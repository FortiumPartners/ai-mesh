# CI/CD Pipeline for Claude Configuration Toolkit
# Validates agents, commands, hooks, and NPM package

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/PRD/**'
      - 'docs/TRD/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/PRD/**'
      - 'docs/TRD/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Validate Configuration Files
  validate-config:
    runs-on: ubuntu-latest
    name: Validate Configuration Files

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Validate agent files
        run: |
          echo "Validating agent markdown files..."
          AGENT_COUNT=$(find agents -name "*.md" -type f | wc -l)
          echo "Found ${AGENT_COUNT} agent files"

          # Verify each agent has required frontmatter
          for agent in agents/*.md; do
            if [ -f "$agent" ]; then
              if ! grep -q "^---$" "$agent"; then
                echo "❌ Missing frontmatter in: $agent"
                exit 1
              fi
              echo "✅ Valid: $agent"
            fi
          done

      - name: Validate command files
        run: |
          echo "Validating command markdown files..."
          COMMAND_COUNT=$(find commands -name "*.md" -type f 2>/dev/null | wc -l)
          echo "Found ${COMMAND_COUNT} command files"

          if [ -d "commands" ]; then
            for cmd in commands/*.md; do
              if [ -f "$cmd" ]; then
                echo "✅ Valid: $cmd"
              fi
            done
          fi

      - name: Validate hook files
        run: |
          echo "Validating hook JavaScript files..."
          HOOK_COUNT=$(find hooks -name "*.js" -type f 2>/dev/null | wc -l)
          echo "Found ${HOOK_COUNT} hook files"

          if [ -d "hooks" ]; then
            for hook in hooks/*.js; do
              if [ -f "$hook" ]; then
                # Basic syntax check
                node -c "$hook" || exit 1
                echo "✅ Valid: $hook"
              fi
            done
          fi

      - name: Validate NPM package structure
        run: |
          echo "Validating NPM package structure..."

          # Check required files
          test -f package.json || (echo "❌ Missing package.json" && exit 1)
          test -f bin/claude-installer || (echo "❌ Missing bin/claude-installer" && exit 1)
          test -f src/api/index.js || (echo "❌ Missing src/api/index.js" && exit 1)

          echo "✅ Package structure valid"

  # NPM Package Tests
  npm-package-test:
    runs-on: ubuntu-latest
    name: NPM Package Tests
    needs: validate-config

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run package tests
        run: npm test

      - name: Test CLI commands
        run: npm run test:cli

      - name: Test API
        run: npm run test:api

      - name: Test installation process
        run: |
          # Test the installer can run
          node bin/claude-installer --version
          node bin/claude-installer --help

  # Installation Tests
  installation-test:
    runs-on: ${{ matrix.os }}
    name: Installation Test (${{ matrix.os }})
    needs: validate-config
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Test NPM installation (global simulation)
        run: |
          # Simulate global installation in test directory
          TEST_DIR="${HOME}/.claude-test"
          mkdir -p "${TEST_DIR}"

          # Run installer with test directory
          node bin/claude-installer validate

          echo "✅ Installation test passed on ${{ matrix.os }}"

      - name: Test legacy bash installation
        run: |
          # Test bash installer (legacy)
          if [ -f install.sh ]; then
            chmod +x install.sh
            # Don't actually install, just verify script runs
            echo "✅ install.sh is executable"
          fi

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run npm audit
        run: npm audit --audit-level moderate || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Publish NPM Package (on main branch only)
  publish-npm:
    runs-on: ubuntu-latest
    name: Publish to NPM
    needs: [npm-package-test, installation-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Check if version changed
        id: check-version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          NPM_VERSION=$(npm view @fortium/claude-installer version 2>/dev/null || echo "0.0.0")

          if [ "$PACKAGE_VERSION" != "$NPM_VERSION" ]; then
            echo "Version changed from $NPM_VERSION to $PACKAGE_VERSION"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged ($PACKAGE_VERSION), skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.check-version.outputs.should_publish == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.check-version.outputs.should_publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.check-version.outputs.version }}
          release_name: Release v${{ steps.check-version.outputs.version }}
          body: |
            ## Claude Configuration Toolkit v${{ steps.check-version.outputs.version }}

            Published to NPM as @fortium/claude-installer

            Install with: `npx @fortium/claude-installer`
          draft: false
          prerelease: false

  # Documentation Build
  build-docs:
    runs-on: ubuntu-latest
    name: Build Documentation
    needs: validate-config
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Count documentation
        run: |
          AGENT_COUNT=$(find agents -name "*.md" -type f | wc -l)
          COMMAND_COUNT=$(find commands -name "*.md" -type f 2>/dev/null | wc -l)
          HOOK_COUNT=$(find hooks -name "*.js" -type f 2>/dev/null | wc -l)
          DOC_COUNT=$(find docs -name "*.md" -type f 2>/dev/null | wc -l)

          echo "📊 Configuration Statistics:"
          echo "  - Agents: ${AGENT_COUNT}"
          echo "  - Commands: ${COMMAND_COUNT}"
          echo "  - Hooks: ${HOOK_COUNT}"
          echo "  - Documentation Files: ${DOC_COUNT}"

          # Create summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 📊 Claude Configuration Statistics

          - **Agents**: ${AGENT_COUNT} specialized agents
          - **Commands**: ${COMMAND_COUNT} slash commands
          - **Hooks**: ${HOOK_COUNT} development lifecycle hooks
          - **Documentation**: ${DOC_COUNT} markdown files

          ### Recent Changes
          - Latest commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Triggered by: ${{ github.event_name }}
          EOF

      - name: Notify success
        if: success()
        run: |
          echo "✅ All checks passed for Claude Configuration Toolkit"
          echo "🚀 Ready for deployment"
