openapi: 3.0.3
info:
  title: Fortium External Metrics Web Service - Authentication API
  description: |
    Authentication and user management API for the Fortium External Metrics Web Service.

    This API provides comprehensive authentication functionality including:
    - JWT-based authentication with refresh tokens
    - User profile management
    - Password security and validation
    - SSO user creation and management
    - Multi-tenant user isolation

    ## Authentication Flow

    1. **Login**: Obtain access and refresh tokens
    2. **Use API**: Include Bearer token in Authorization header
    3. **Refresh**: Use refresh token to get new access token when expired
    4. **Logout**: Revoke refresh token (optional)

    ## Security Features

    - JWT tokens with configurable expiration
    - Refresh token rotation for security
    - Rate limiting on authentication endpoints
    - Password complexity requirements
    - Multi-tenant user isolation
  version: 1.0.0
  contact:
    name: Fortium Development Team
    email: dev@fortium.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.fortium.com/v1
    description: Production server
  - url: https://staging-api.fortium.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

security:
  - bearerAuth: []
  - apiKeyAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get tokens
      description: |
        Authenticate a user with email and password to obtain JWT access and refresh tokens.

        **Rate Limit**: 5 attempts per 15 minutes per IP address
      operationId: loginUser
      security: []  # No auth required for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              loginExample:
                summary: Standard login
                value:
                  email: user@company.com
                  password: SecurePass123!
                  tenantId: 123e4567-e89b-12d3-a456-426614174000
                  rememberMe: true
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                loginSuccess:
                  summary: Successful login
                  value:
                    success: true
                    message: Login successful
                    data:
                      accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      tokenType: Bearer
                      expiresIn: 3600
                      user:
                        userId: 123e4567-e89b-12d3-a456-426614174001
                        email: user@company.com
                        role: user
                        tenantId: 123e4567-e89b-12d3-a456-426614174000
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: |
        Use a valid refresh token to obtain a new access token.

        Refresh tokens have a longer expiration time and can be used to maintain
        user sessions without requiring re-authentication.
      operationId: refreshToken
      security: []  # No auth required, uses refresh token in body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              refreshExample:
                summary: Token refresh
                value:
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: |
        Logout the current user by revoking their refresh token.

        This is optional as tokens will expire naturally, but provides
        explicit logout functionality.
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/profile:
    get:
      tags:
        - User Management
      summary: Get current user profile
      description: Retrieve the profile information for the currently authenticated user.
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - User Management
      summary: Update user profile
      description: Update the profile information for the currently authenticated user.
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/password:
    put:
      tags:
        - User Management
      summary: Change user password
      description: |
        Change the current user's password.

        Requires the current password for security verification.
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/validate-password:
    post:
      tags:
        - User Management
      summary: Validate password strength
      description: |
        Validate a password against security requirements without creating an account.

        Useful for real-time password strength feedback in UI forms.
      operationId: validatePassword
      security: []  # Public endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidatePasswordRequest'
      responses:
        '200':
          description: Password validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordValidationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/revoke-all:
    post:
      tags:
        - Authentication
      summary: Revoke all refresh tokens
      description: |
        Revoke all refresh tokens for the current user, effectively logging them out
        from all devices and sessions.

        This is useful for security purposes when a user suspects their account
        may have been compromised.
      operationId: revokeAllTokens
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All tokens revoked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/sso/user:
    post:
      tags:
        - Authentication
      summary: Create or update SSO user
      description: |
        Create a new user or update an existing user from SSO authentication.

        This endpoint is called by the SSO callback handler and should not be
        used directly by client applications.
      operationId: createOrUpdateSSOUser
      security: []  # Called by SSO provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SSOUserRequest'
      responses:
        '200':
          description: SSO user created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSOUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/health:
    get:
      tags:
        - Health Check
      summary: Authentication service health check
      description: Check the health status of the authentication service.
      operationId: authHealthCheck
      security: []  # Public health check
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from /auth/login
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service authentication

  schemas:
    # Request Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
        - tenantId
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@company.com
        password:
          type: string
          description: User's password
          example: SecurePass123!
        tenantId:
          type: string
          format: uuid
          description: Tenant identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        rememberMe:
          type: boolean
          description: Whether to extend token expiration
          default: false
          example: true

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Valid refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 50
          description: User's first name
          example: John
        lastName:
          type: string
          maxLength: 50
          description: User's last name
          example: Doe

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current password for verification
          example: CurrentPass123!
        newPassword:
          type: string
          description: New password (must meet complexity requirements)
          example: NewSecurePass456!
          minLength: 8
          maxLength: 128

    ValidatePasswordRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: Password to validate
          example: MyPassword123!

    SSOUserRequest:
      type: object
      required:
        - email
        - provider
        - providerId
      properties:
        email:
          type: string
          format: email
          description: User's email from SSO provider
        provider:
          type: string
          description: SSO provider name
          example: google
        providerId:
          type: string
          description: Unique identifier from SSO provider
        firstName:
          type: string
          description: User's first name from SSO provider
        lastName:
          type: string
          description: User's last name from SSO provider

    # Response Schemas
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Login successful
        data:
          type: object
          properties:
            accessToken:
              type: string
              description: JWT access token
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            refreshToken:
              type: string
              description: JWT refresh token
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            tokenType:
              type: string
              example: Bearer
            expiresIn:
              type: integer
              description: Access token expiration time in seconds
              example: 3600
            user:
              $ref: '#/components/schemas/UserProfile'

    RefreshTokenResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Token refreshed successfully
        data:
          type: object
          properties:
            accessToken:
              type: string
              description: New JWT access token
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            tokenType:
              type: string
              example: Bearer
            expiresIn:
              type: integer
              description: Token expiration time in seconds
              example: 3600

    UserProfile:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: Unique user identifier
          example: 123e4567-e89b-12d3-a456-426614174001
        email:
          type: string
          format: email
          description: User's email address
          example: user@company.com
        role:
          type: string
          enum: [admin, user, viewer]
          description: User's role in the system
          example: user
        tenantId:
          type: string
          format: uuid
          description: Associated tenant identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        firstName:
          type: string
          description: User's first name
          example: John
        lastName:
          type: string
          description: User's last name
          example: Doe
        isActive:
          type: boolean
          description: Whether the user account is active
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: '2024-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Last profile update timestamp
          example: '2024-01-01T00:00:00Z'

    PasswordValidationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Password is valid
        data:
          type: object
          properties:
            isValid:
              type: boolean
              description: Whether the password meets requirements
              example: true
            strength:
              type: string
              enum: [weak, medium, strong]
              description: Password strength assessment
              example: strong
            requirements:
              type: object
              properties:
                minLength:
                  type: boolean
                  example: true
                hasUppercase:
                  type: boolean
                  example: true
                hasLowercase:
                  type: boolean
                  example: true
                hasNumber:
                  type: boolean
                  example: true
                hasSpecialChar:
                  type: boolean
                  example: true

    SSOUserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: SSO user created successfully
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/UserProfile'
            isNewUser:
              type: boolean
              description: Whether this is a newly created user
              example: true

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation completed successfully
        data:
          type: object
          description: Optional data payload

    HealthCheckResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Authentication service is healthy
        data:
          type: object
          properties:
            status:
              type: string
              example: healthy
            timestamp:
              type: string
              format: date-time
              example: '2024-01-01T00:00:00Z'
            version:
              type: string
              example: '1.0.0'
            uptime:
              type: number
              description: Service uptime in seconds
              example: 3600

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: An error occurred
        error:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: email
                  message:
                    type: string
                    example: Email is required
                  value:
                    description: The invalid value provided

  responses:
    BadRequest:
      description: Bad Request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: Validation failed
            error:
              code: VALIDATION_ERROR
              details:
                - field: email
                  message: Email is required
                  value: null

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: Authentication required
            error:
              code: UNAUTHORIZED
              details: []

    NotFound:
      description: Not Found - Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: User not found
            error:
              code: NOT_FOUND
              details: []

    RateLimitExceeded:
      description: Too Many Requests - Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: Rate limit exceeded
            error:
              code: RATE_LIMIT_EXCEEDED
              details: []