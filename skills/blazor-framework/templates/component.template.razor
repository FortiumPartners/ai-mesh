@*
 * ============================================================================
 * TEMPLATE: Blazor Component
 * ============================================================================
 *
 * Purpose: Basic Blazor component with parameters, events, and lifecycle
 * Usage: Standard reusable component
 *
 * Placeholders:
 * - {{ComponentName}} - Component name (e.g., UserCard)
 * - {{Namespace}} - Namespace (e.g., MyApp.Components)
 * - {{PropertyName}} - Property name (e.g., Title)
 * - {{SecondPropertyName}} - Second property (e.g., Description)
 * - {{propertyName}} - Camel case (e.g., title)
 * - {{secondPropertyName}} - Camel case (e.g., description)
 *
 * Lines: ~200
 *@

@using Microsoft.FluentUI.AspNetCore.Components
@namespace {{Namespace}}
@inject ILogger<{{ComponentName}}> Logger

<FluentCard>
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
        @if (!string.IsNullOrEmpty({{PropertyName}}))
        {
            <h3>@{{PropertyName}}</h3>
        }

        @if (!string.IsNullOrEmpty({{SecondPropertyName}}))
        {
            <p>@{{SecondPropertyName}}</p>
        }

        @if (ShowContent)
        {
            <div class="content">
                @ChildContent
            </div>
        }

        @if (ShowActions)
        {
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
                <FluentButton
                    Appearance="Appearance.Accent"
                    OnClick="HandlePrimaryAction"
                    Disabled="@IsLoading">
                    @PrimaryActionText
                </FluentButton>

                <FluentButton
                    Appearance="Appearance.Neutral"
                    OnClick="HandleSecondaryAction"
                    Disabled="@IsLoading">
                    @SecondaryActionText
                </FluentButton>
            </FluentStack>
        }

        @if (IsLoading)
        {
            <FluentProgressRing />
        }
    </FluentStack>
</FluentCard>

@code {
    // ========================================================================
    // PARAMETERS
    // ========================================================================

    /// <summary>
    /// Primary display text for the component.
    /// </summary>
    [Parameter, EditorRequired]
    public string {{PropertyName}} { get; set; } = string.Empty;

    /// <summary>
    /// Secondary display text for the component.
    /// </summary>
    [Parameter]
    public string {{SecondPropertyName}} { get; set; } = string.Empty;

    /// <summary>
    /// Determines if the content area should be displayed.
    /// </summary>
    [Parameter]
    public bool ShowContent { get; set; } = true;

    /// <summary>
    /// Determines if action buttons should be displayed.
    /// </summary>
    [Parameter]
    public bool ShowActions { get; set; } = true;

    /// <summary>
    /// Custom content to display in the component.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Text for the primary action button.
    /// </summary>
    [Parameter]
    public string PrimaryActionText { get; set; } = "Save";

    /// <summary>
    /// Text for the secondary action button.
    /// </summary>
    [Parameter]
    public string SecondaryActionText { get; set; } = "Cancel";

    /// <summary>
    /// Event callback invoked when the primary action is triggered.
    /// </summary>
    [Parameter]
    public EventCallback OnPrimaryAction { get; set; }

    /// <summary>
    /// Event callback invoked when the secondary action is triggered.
    /// </summary>
    [Parameter]
    public EventCallback OnSecondaryAction { get; set; }

    /// <summary>
    /// Event callback invoked when the component state changes.
    /// </summary>
    [Parameter]
    public EventCallback<ComponentState> OnStateChanged { get; set; }

    /// <summary>
    /// Additional attributes to apply to the root element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    // ========================================================================
    // CASCADING PARAMETERS (Optional)
    // ========================================================================

    /// <summary>
    /// Theme context from parent component (if using custom theming).
    /// </summary>
    [CascadingParameter]
    public ThemeContext? Theme { get; set; }

    // ========================================================================
    // COMPONENT STATE
    // ========================================================================

    private bool IsLoading { get; set; }
    private string? ErrorMessage { get; set; }
    private ComponentState currentState = ComponentState.Idle;

    // ========================================================================
    // LIFECYCLE METHODS
    // ========================================================================

    /// <summary>
    /// Component initialization - called once when component is created.
    /// </summary>
    protected override void OnInitialized()
    {
        Logger.LogDebug("{{ComponentName}} initialized with {{PropertyName}}: {{{PropertyName}}}", {{PropertyName}});

        // Initialize component state
        currentState = ComponentState.Idle;
    }

    /// <summary>
    /// Async initialization - use for data loading.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Example: Load initial data
        // await LoadDataAsync();

        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Called when parameters are set or changed.
    /// </summary>
    protected override void OnParametersSet()
    {
        // Validate parameters
        if (string.IsNullOrWhiteSpace({{PropertyName}}))
        {
            Logger.LogWarning("{{ComponentName}} initialized without {{PropertyName}}");
        }
    }

    /// <summary>
    /// Called after component has rendered.
    /// </summary>
    /// <param name="firstRender">True on first render, false on subsequent renders.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // One-time setup after first render
            // Example: Focus management, JS interop
            Logger.LogDebug("{{ComponentName}} first render complete");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Determines if component should re-render.
    /// Override to optimize rendering performance.
    /// </summary>
    protected override bool ShouldRender()
    {
        // Return false to skip re-render if state hasn't changed
        return true;
    }

    // ========================================================================
    // EVENT HANDLERS
    // ========================================================================

    private async Task HandlePrimaryAction()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;
            currentState = ComponentState.Processing;

            Logger.LogInformation("{{ComponentName}} primary action triggered");

            // Invoke parent callback
            await OnPrimaryAction.InvokeAsync();

            currentState = ComponentState.Success;
            await NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in {{ComponentName}} primary action");
            ErrorMessage = "An error occurred. Please try again.";
            currentState = ComponentState.Error;
            await NotifyStateChanged();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleSecondaryAction()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            Logger.LogInformation("{{ComponentName}} secondary action triggered");

            // Invoke parent callback
            await OnSecondaryAction.InvokeAsync();

            currentState = ComponentState.Idle;
            await NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in {{ComponentName}} secondary action");
            ErrorMessage = "An error occurred. Please try again.";
            currentState = ComponentState.Error;
        }
        finally
        {
            IsLoading = false;
        }
    }

    // ========================================================================
    // PUBLIC METHODS (Component API)
    // ========================================================================

    /// <summary>
    /// Programmatically trigger the primary action.
    /// </summary>
    public async Task TriggerPrimaryActionAsync()
    {
        await HandlePrimaryAction();
    }

    /// <summary>
    /// Programmatically trigger the secondary action.
    /// </summary>
    public async Task TriggerSecondaryActionAsync()
    {
        await HandleSecondaryAction();
    }

    /// <summary>
    /// Reset the component to its initial state.
    /// </summary>
    public void Reset()
    {
        IsLoading = false;
        ErrorMessage = null;
        currentState = ComponentState.Idle;
        StateHasChanged();
    }

    // ========================================================================
    // PRIVATE METHODS
    // ========================================================================

    private async Task NotifyStateChanged()
    {
        await OnStateChanged.InvokeAsync(currentState);
    }

    private async Task LoadDataAsync()
    {
        // Example data loading method
        IsLoading = true;
        try
        {
            // Simulate API call
            await Task.Delay(100);

            // Load and set data
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading data for {{ComponentName}}");
            ErrorMessage = "Failed to load data";
        }
        finally
        {
            IsLoading = false;
        }
    }
}

// ============================================================================
// SUPPORTING TYPES
// ============================================================================

/// <summary>
/// Represents the current state of the component.
/// </summary>
public enum ComponentState
{
    Idle,
    Processing,
    Success,
    Error
}

/// <summary>
/// Theme context for custom theming (optional).
/// </summary>
public class ThemeContext
{
    public string PrimaryColor { get; set; } = "#0078D4";
    public string BackgroundColor { get; set; } = "#FFFFFF";
    public bool IsDarkMode { get; set; }
}

// ============================================================================
// USAGE EXAMPLES
// ============================================================================

/*
 * Example 1: Basic usage with required parameters
 *
 * <{{ComponentName}}
 *     {{PropertyName}}="Welcome"
 *     {{SecondPropertyName}}="This is a basic component example"
 *     OnPrimaryAction="HandleSave"
 *     OnSecondaryAction="HandleCancel" />
 *
 *
 * Example 2: With custom content
 *
 * <{{ComponentName}} {{PropertyName}}="Custom Content">
 *     <ChildContent>
 *         <p>This is custom content inside the component.</p>
 *         <ul>
 *             <li>Item 1</li>
 *             <li>Item 2</li>
 *         </ul>
 *     </ChildContent>
 * </{{ComponentName}}>
 *
 *
 * Example 3: Programmatic control with component reference
 *
 * <{{ComponentName}}
 *     @ref="componentRef"
 *     {{PropertyName}}="Controlled Component"
 *     OnStateChanged="HandleStateChanged" />
 *
 * <button @onclick="TriggerAction">Trigger Externally</button>
 *
 * @code {
 *     private {{ComponentName}}? componentRef;
 *
 *     private async Task TriggerAction()
 *     {
 *         if (componentRef != null)
 *         {
 *             await componentRef.TriggerPrimaryActionAsync();
 *         }
 *     }
 *
 *     private void HandleStateChanged(ComponentState state)
 *     {
 *         Console.WriteLine($"Component state changed to: {state}");
 *     }
 * }
 *
 *
 * Example 4: With cascading theme
 *
 * <CascadingValue Value="@theme">
 *     <{{ComponentName}}
 *         {{PropertyName}}="Themed Component"
 *         {{SecondPropertyName}}="Uses cascading theme context" />
 * </CascadingValue>
 *
 * @code {
 *     private ThemeContext theme = new() { IsDarkMode = true };
 * }
 */
