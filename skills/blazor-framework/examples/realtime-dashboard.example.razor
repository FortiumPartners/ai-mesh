@*
 * ============================================================================
 * EXAMPLE 2: Real-Time Dashboard with SignalR
 * ============================================================================
 *
 * Complete real-time dashboard with SignalR demonstrating:
 * - SignalR hub integration for live updates
 * - Real-time data streaming from server to client
 * - Connection state management
 * - Automatic reconnection handling
 * - Live metrics and activity feed
 *
 * Technologies: Blazor Server (required), SignalR, Fluent UI
 * Lines: ~400 | Complexity: Advanced
 *@

@page "/dashboard"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.FluentUI.AspNetCore.Components
@inject NavigationManager Navigation
@inject ILogger<Dashboard> Logger
@implements IAsyncDisposable

<PageTitle>Real-Time Dashboard</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="24">
    @* Header with Connection Status *@
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Icon="Icons.Regular.Size32.ChartMultiple()" Color="Color.Accent" />
        <h1>Real-Time Dashboard</h1>
        <FluentSpacer />

        @* Connection Status *@
        <FluentBadge Appearance="@GetConnectionBadgeAppearance()">
            @connectionStatus
        </FluentBadge>

        @if (isConnected)
        {
            <FluentIcon Icon="Icons.Filled.Size20.CheckmarkCircle()" Color="Color.Success" />
        }
        else
        {
            <FluentIcon Icon="Icons.Regular.Size20.DismissCircle()" Color="Color.Error" />
        }
    </FluentStack>

    @* Metrics Cards *@
    <FluentGrid Spacing="16">
        <FluentGridItem xs="12" sm="6" md="3">
            <FluentCard>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
                        <small style="color: var(--neutral-foreground-hint);">Active Users</small>
                        <FluentIcon Icon="Icons.Regular.Size20.People()" Color="Color.Accent" />
                    </FluentStack>
                    <strong style="font-size: 32px;">@metrics.ActiveUsers</strong>
                    <small style="color: var(--success-foreground-rest);">
                        â–² @metrics.UserChangePercent% from last hour
                    </small>
                </FluentStack>
            </FluentCard>
        </FluentGridItem>

        <FluentGridItem xs="12" sm="6" md="3">
            <FluentCard>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
                        <small style="color: var(--neutral-foreground-hint);">Messages/sec</small>
                        <FluentIcon Icon="Icons.Regular.Size20.Mail()" Color="Color.Accent" />
                    </FluentStack>
                    <strong style="font-size: 32px;">@metrics.MessagesPerSecond</strong>
                    <small>Real-time throughput</small>
                </FluentStack>
            </FluentCard>
        </FluentGridItem>

        <FluentGridItem xs="12" sm="6" md="3">
            <FluentCard>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
                        <small style="color: var(--neutral-foreground-hint);">CPU Usage</small>
                        <FluentIcon Icon="Icons.Regular.Size20.Desktop()" Color="Color.Accent" />
                    </FluentStack>
                    <strong style="font-size: 32px;">@metrics.CpuUsage%</strong>
                    <FluentProgressBar Value="@metrics.CpuUsage" Max="100" />
                </FluentStack>
            </FluentCard>
        </FluentGridItem>

        <FluentGridItem xs="12" sm="6" md="3">
            <FluentCard>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
                        <small style="color: var(--neutral-foreground-hint);">Memory</small>
                        <FluentIcon Icon="Icons.Regular.Size20.Server()" Color="Color.Accent" />
                    </FluentStack>
                    <strong style="font-size: 32px;">@metrics.MemoryUsageMB MB</strong>
                    <small>of @metrics.TotalMemoryMB MB</small>
                </FluentStack>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>

    @* Main Content Grid *@
    <FluentGrid Spacing="16">
        @* Activity Feed *@
        <FluentGridItem xs="12" md="6">
            <FluentCard Style="height: 500px; display: flex; flex-direction: column;">
                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween">
                    <h3>Activity Feed</h3>
                    <FluentButton Size="ButtonSize.Small" OnClick="ClearActivities">Clear</FluentButton>
                </FluentStack>

                <div style="flex: 1; overflow-y: auto; margin-top: 16px;">
                    @if (activities.Any())
                    {
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                            @foreach (var activity in activities.Take(50))
                            {
                                <FluentCard Style="padding: 12px; background: var(--neutral-layer-2);">
                                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="12">
                                        <FluentIcon
                                            Icon="@GetActivityIcon(activity.Type)"
                                            Color="@GetActivityColor(activity.Type)" />
                                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="4" Style="flex: 1;">
                                            <strong>@activity.Message</strong>
                                            <small style="color: var(--neutral-foreground-hint);">
                                                @activity.Timestamp.ToString("HH:mm:ss")
                                            </small>
                                        </FluentStack>
                                    </FluentStack>
                                </FluentCard>
                            }
                        </FluentStack>
                    }
                    else
                    {
                        <p style="text-align: center; color: var(--neutral-foreground-hint); padding: 48px;">
                            No activity yet. Waiting for events...
                        </p>
                    }
                </div>
            </FluentCard>
        </FluentGridItem>

        @* Live Chart Placeholder *@
        <FluentGridItem xs="12" md="6">
            <FluentCard Style="height: 500px;">
                <h3>Live Metrics Chart</h3>
                <div style="height: 400px; display: flex; align-items: center; justify-content: center;">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16" HorizontalAlignment="HorizontalAlignment.Center">
                        <FluentIcon Icon="Icons.Regular.Size48.ChartMultiple()" Color="Color.Accent" />
                        <p style="color: var(--neutral-foreground-hint);">
                            Chart visualization with @dataPoints.Count data points
                        </p>
                        <small>Last update: @lastUpdateTime.ToString("HH:mm:ss")</small>
                    </FluentStack>
                </div>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>

    @* Connection Log *@
    <FluentCard>
        <FluentAccordion>
            <FluentAccordionItem Heading="Connection Log">
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                    @foreach (var log in connectionLogs.TakeLast(10))
                    {
                        <small style="font-family: monospace;">[@log.Timestamp.ToString("HH:mm:ss")] @log.Message</small>
                    }
                </FluentStack>
            </FluentAccordionItem>
        </FluentAccordion>
    </FluentCard>
</FluentStack>

@code {
    // ========================================================================
    // STATE
    // ========================================================================

    private HubConnection? hubConnection;
    private bool isConnected = false;
    private string connectionStatus = "Disconnected";

    private DashboardMetrics metrics = new();
    private List<Activity> activities = new();
    private List<DataPoint> dataPoints = new();
    private List<ConnectionLog> connectionLogs = new();
    private DateTime lastUpdateTime = DateTime.Now;

    // ========================================================================
    // LIFECYCLE
    // ========================================================================

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing dashboard with SignalR connection");

        await InitializeSignalRConnection();
    }

    private async Task InitializeSignalRConnection()
    {
        try
        {
            LogConnection("Building SignalR connection...");

            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/datahub"))
                .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
                .Build();

            // Register event handlers
            hubConnection.On<DashboardMetrics>("ReceiveMetrics", HandleMetricsUpdate);
            hubConnection.On<Activity>("ReceiveActivity", HandleActivityUpdate);
            hubConnection.On<DataPoint>("ReceiveDataPoint", HandleDataPointUpdate);

            // Connection lifecycle events
            hubConnection.Closed += HandleConnectionClosed;
            hubConnection.Reconnecting += HandleReconnecting;
            hubConnection.Reconnected += HandleReconnected;

            LogConnection("Starting connection...");
            await hubConnection.StartAsync();

            isConnected = true;
            connectionStatus = "Connected";
            LogConnection("Connection established successfully");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing SignalR connection");
            connectionStatus = "Connection Failed";
            LogConnection($"Connection failed: {ex.Message}");
        }
    }

    // ========================================================================
    // SIGNALR EVENT HANDLERS
    // ========================================================================

    private void HandleMetricsUpdate(DashboardMetrics newMetrics)
    {
        metrics = newMetrics;
        lastUpdateTime = DateTime.Now;
        StateHasChanged();
    }

    private void HandleActivityUpdate(Activity activity)
    {
        activities.Insert(0, activity);

        // Keep only last 100 activities
        if (activities.Count > 100)
        {
            activities.RemoveRange(100, activities.Count - 100);
        }

        StateHasChanged();
    }

    private void HandleDataPointUpdate(DataPoint dataPoint)
    {
        dataPoints.Add(dataPoint);

        // Keep only last 50 data points
        if (dataPoints.Count > 50)
        {
            dataPoints.RemoveAt(0);
        }

        StateHasChanged();
    }

    // ========================================================================
    // CONNECTION LIFECYCLE HANDLERS
    // ========================================================================

    private Task HandleConnectionClosed(Exception? exception)
    {
        isConnected = false;
        connectionStatus = "Disconnected";
        LogConnection($"Connection closed: {exception?.Message ?? "Normal closure"}");

        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleReconnecting(Exception? exception)
    {
        connectionStatus = "Reconnecting...";
        LogConnection($"Reconnecting: {exception?.Message ?? "Unknown reason"}");

        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleReconnected(string? connectionId)
    {
        isConnected = true;
        connectionStatus = "Connected";
        LogConnection($"Reconnected successfully (ID: {connectionId})");

        StateHasChanged();
        return Task.CompletedTask;
    }

    // ========================================================================
    // UI ACTIONS
    // ========================================================================

    private void ClearActivities()
    {
        activities.Clear();
        Logger.LogInformation("Cleared activity feed");
    }

    // ========================================================================
    // HELPERS
    // ========================================================================

    private Appearance GetConnectionBadgeAppearance()
    {
        return isConnected ? Appearance.Accent : Appearance.Neutral;
    }

    private Icons.Regular.Size20 GetActivityIcon(ActivityType type)
    {
        return type switch
        {
            ActivityType.UserJoined => new Icons.Regular.Size20.PersonAdd(),
            ActivityType.UserLeft => new Icons.Regular.Size20.PersonDelete(),
            ActivityType.MessageSent => new Icons.Regular.Size20.Mail(),
            ActivityType.ErrorOccurred => new Icons.Regular.Size20.ErrorCircle(),
            _ => new Icons.Regular.Size20.Info()
        };
    }

    private Color GetActivityColor(ActivityType type)
    {
        return type switch
        {
            ActivityType.UserJoined => Color.Success,
            ActivityType.UserLeft => Color.Warning,
            ActivityType.ErrorOccurred => Color.Error,
            _ => Color.Neutral
        };
    }

    private void LogConnection(string message)
    {
        connectionLogs.Add(new ConnectionLog
        {
            Timestamp = DateTime.Now,
            Message = message
        });

        Logger.LogInformation("SignalR: {Message}", message);
    }

    // ========================================================================
    // DISPOSAL
    // ========================================================================

    public async ValueTask DisposeAsync()
    {
        Logger.LogInformation("Disposing dashboard SignalR connection");

        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

// ============================================================================
// MODELS
// ============================================================================

public class DashboardMetrics
{
    public int ActiveUsers { get; set; } = Random.Shared.Next(100, 500);
    public int MessagesPerSecond { get; set; } = Random.Shared.Next(10, 100);
    public int CpuUsage { get; set; } = Random.Shared.Next(20, 80);
    public int MemoryUsageMB { get; set; } = Random.Shared.Next(512, 2048);
    public int TotalMemoryMB { get; set; } = 4096;
    public int UserChangePercent { get; set; } = Random.Shared.Next(-10, 20);
}

public class Activity
{
    public ActivityType Type { get; set; }
    public string Message { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; } = DateTime.Now;
}

public enum ActivityType
{
    UserJoined,
    UserLeft,
    MessageSent,
    ErrorOccurred,
    Info
}

public class DataPoint
{
    public DateTime Timestamp { get; set; } = DateTime.Now;
    public double Value { get; set; }
}

public class ConnectionLog
{
    public DateTime Timestamp { get; set; }
    public string Message { get; set; } = string.Empty;
}

// ============================================================================
// SIGNALR HUB (Server-side - Hubs/DataHub.cs)
// ============================================================================

/*
 * Create this file: Hubs/DataHub.cs
 *
 * using Microsoft.AspNetCore.SignalR;
 *
 * public class DataHub : Hub
 * {
 *     public async Task SendMetrics(DashboardMetrics metrics)
 *     {
 *         await Clients.All.SendAsync("ReceiveMetrics", metrics);
 *     }
 *
 *     public async Task SendActivity(Activity activity)
 *     {
 *         await Clients.All.SendAsync("ReceiveActivity", activity);
 *     }
 *
 *     public async Task SendDataPoint(DataPoint dataPoint)
 *     {
 *         await Clients.All.SendAsync("ReceiveDataPoint", dataPoint);
 *     }
 * }
 *
 *
 * Register in Program.cs:
 *
 * builder.Services.AddSignalR();
 * app.MapHub<DataHub>("/datahub");
 *
 *
 * Background service for data generation (Services/DataGeneratorService.cs):
 *
 * public class DataGeneratorService : BackgroundService
 * {
 *     private readonly IHubContext<DataHub> _hubContext;
 *
 *     public DataGeneratorService(IHubContext<DataHub> hubContext)
 *     {
 *         _hubContext = hubContext;
 *     }
 *
 *     protected override async Task ExecuteAsync(CancellationToken stoppingToken)
 *     {
 *         while (!stoppingToken.IsCancellationRequested)
 *         {
 *             var metrics = new DashboardMetrics(); // Generate random metrics
 *             await _hubContext.Clients.All.SendAsync("ReceiveMetrics", metrics);
 *
 *             var activity = new Activity
 *             {
 *                 Type = ActivityType.Info,
 *                 Message = $"System update at {DateTime.Now:HH:mm:ss}",
 *                 Timestamp = DateTime.Now
 *             };
 *             await _hubContext.Clients.All.SendAsync("ReceiveActivity", activity);
 *
 *             await Task.Delay(2000, stoppingToken); // Update every 2 seconds
 *         }
 *     }
 * }
 *
 *
 * Register background service in Program.cs:
 *
 * builder.Services.AddHostedService<DataGeneratorService>();
 */
