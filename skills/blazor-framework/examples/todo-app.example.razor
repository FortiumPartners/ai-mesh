@*
 * ============================================================================
 * EXAMPLE 1: Complete Todo Application with Fluent UI
 * ============================================================================
 *
 * This example demonstrates a production-ready Todo application with:
 * - Fluent UI component integration
 * - Local state management with browser localStorage
 * - CRUD operations (Create, Read, Update, Delete)
 * - Filtering and search functionality
 * - Data persistence across sessions
 *
 * Technologies:
 * - Blazor Server or WebAssembly
 * - Microsoft Fluent UI Blazor Components
 * - Blazored.LocalStorage for persistence
 *
 * Lines: ~400
 * Complexity: Intermediate
 *@

@page "/todos"
@using Microsoft.FluentUI.AspNetCore.Components
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject ILogger<Todos> Logger
@implements IDisposable

<PageTitle>Todos - Blazor Example</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="24">
    @* Header *@
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Icon="Icons.Regular.Size32.TaskListSquare()" Color="Color.Accent" />
        <h1>My Todos</h1>
        <FluentBadge Appearance="Appearance.Accent">@GetActiveCount()</FluentBadge>
    </FluentStack>

    @* Add New Todo *@
    <FluentCard>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
            <FluentTextField
                @bind-Value="newTodoText"
                @bind-Value:after="OnNewTodoTextChanged"
                @onkeydown="HandleKeyDown"
                Placeholder="What needs to be done?"
                Style="flex: 1;"
                Autofocus="true" />

            <FluentButton
                Appearance="Appearance.Accent"
                IconStart="@(new Icons.Regular.Size20.Add())"
                OnClick="AddTodo"
                Disabled="@string.IsNullOrWhiteSpace(newTodoText)">
                Add Todo
            </FluentButton>
        </FluentStack>
    </FluentCard>

    @* Filters and Actions *@
    <FluentCard>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="16" VerticalAlignment="VerticalAlignment.Center">
            @* Filter Buttons *@
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
                <FluentButton
                    Appearance="@(currentFilter == TodoFilter.All ? Appearance.Accent : Appearance.Neutral)"
                    OnClick="@(() => SetFilter(TodoFilter.All))">
                    All (@todos.Count)
                </FluentButton>
                <FluentButton
                    Appearance="@(currentFilter == TodoFilter.Active ? Appearance.Accent : Appearance.Neutral)"
                    OnClick="@(() => SetFilter(TodoFilter.Active))">
                    Active (@GetActiveCount())
                </FluentButton>
                <FluentButton
                    Appearance="@(currentFilter == TodoFilter.Completed ? Appearance.Accent : Appearance.Neutral)"
                    OnClick="@(() => SetFilter(TodoFilter.Completed))">
                    Completed (@GetCompletedCount())
                </FluentButton>
            </FluentStack>

            <FluentSpacer />

            @* Search *@
            <FluentSearch
                @bind-Value="searchTerm"
                @bind-Value:after="ApplyFilters"
                Placeholder="Search todos..."
                Style="width: 250px;" />

            @* Clear Completed *@
            @if (GetCompletedCount() > 0)
            {
                <FluentButton
                    Appearance="Appearance.Stealth"
                    OnClick="ClearCompleted">
                    Clear Completed
                </FluentButton>
            }
        </FluentStack>
    </FluentCard>

    @* Todo List *@
    @if (filteredTodos.Any())
    {
        <FluentDataGrid Items="@filteredTodos.AsQueryable()" Virtualize="true" Style="height: calc(100vh - 400px);">
            <TemplateColumn Title="">
                <FluentCheckbox
                    Value="@context.IsCompleted"
                    ValueChanged="@(value => ToggleTodo(context))"
                    aria-label="@($"Mark {context.Text} as {(context.IsCompleted ? "incomplete" : "complete")}")" />
            </TemplateColumn>

            <TemplateColumn Title="Todo" Style="flex: 1;">
                @if (editingTodoId == context.Id)
                {
                    <FluentTextField
                        @bind-Value="editingText"
                        @onkeydown="@(e => HandleEditKeyDown(e, context))"
                        @onfocusout="@(() => SaveEdit(context))"
                        Autofocus="true"
                        Style="width: 100%;" />
                }
                else
                {
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                        <span
                            style="@(context.IsCompleted ? "text-decoration: line-through; color: var(--neutral-foreground-hint);" : "")"
                            @ondblclick="@(() => StartEdit(context))">
                            @context.Text
                        </span>
                        <small style="color: var(--neutral-foreground-hint);">
                            Created: @context.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                        </small>
                    </FluentStack>
                }
            </TemplateColumn>

            <TemplateColumn Title="Actions">
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="4">
                    @if (editingTodoId != context.Id)
                    {
                        <FluentButton
                            Size="ButtonSize.Small"
                            Appearance="Appearance.Stealth"
                            IconStart="@(new Icons.Regular.Size16.Edit())"
                            OnClick="@(() => StartEdit(context))"
                            aria-label="@($"Edit {context.Text}")">
                        </FluentButton>
                    }
                    <FluentButton
                        Size="ButtonSize.Small"
                        Appearance="Appearance.Stealth"
                        IconStart="@(new Icons.Regular.Size16.Delete())"
                        OnClick="@(() => DeleteTodo(context))"
                        aria-label="@($"Delete {context.Text}")">
                    </FluentButton>
                </FluentStack>
            </TemplateColumn>
        </FluentDataGrid>
    }
    else
    {
        @* Empty State *@
        <FluentCard Style="text-align: center; padding: 48px;">
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16" HorizontalAlignment="HorizontalAlignment.Center">
                <FluentIcon Icon="Icons.Regular.Size48.CheckmarkSquare()" Color="Color.Neutral" />
                <h3>@GetEmptyStateMessage()</h3>
                @if (currentFilter != TodoFilter.All && todos.Any())
                {
                    <FluentButton OnClick="@(() => SetFilter(TodoFilter.All))">
                        View All Todos
                    </FluentButton>
                }
            </FluentStack>
        </FluentCard>
    }

    @* Statistics Card *@
    @if (todos.Any())
    {
        <FluentCard>
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="32">
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                    <small style="color: var(--neutral-foreground-hint);">Total</small>
                    <strong style="font-size: 24px;">@todos.Count</strong>
                </FluentStack>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                    <small style="color: var(--neutral-foreground-hint);">Active</small>
                    <strong style="font-size: 24px; color: var(--accent-foreground-rest);">@GetActiveCount()</strong>
                </FluentStack>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                    <small style="color: var(--neutral-foreground-hint);">Completed</small>
                    <strong style="font-size: 24px; color: var(--success-foreground-rest);">@GetCompletedCount()</strong>
                </FluentStack>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                    <small style="color: var(--neutral-foreground-hint);">Completion Rate</small>
                    <strong style="font-size: 24px;">@GetCompletionRate()%</strong>
                </FluentStack>
            </FluentStack>
        </FluentCard>
    }
</FluentStack>

@code {
    // ========================================================================
    // STATE
    // ========================================================================

    private List<TodoItem> todos = new();
    private List<TodoItem> filteredTodos = new();
    private string newTodoText = string.Empty;
    private string searchTerm = string.Empty;
    private TodoFilter currentFilter = TodoFilter.All;

    private Guid? editingTodoId = null;
    private string editingText = string.Empty;

    private const string STORAGE_KEY = "blazor-todos";
    private Timer? autoSaveTimer;

    // ========================================================================
    // LIFECYCLE
    // ========================================================================

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Loading todos from localStorage");

        try
        {
            // Load todos from localStorage
            var storedTodos = await LocalStorage.GetItemAsync<List<TodoItem>>(STORAGE_KEY);
            if (storedTodos != null && storedTodos.Any())
            {
                todos = storedTodos;
                Logger.LogInformation("Loaded {Count} todos", todos.Count);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading todos from localStorage");
        }

        ApplyFilters();

        // Setup auto-save timer (debounce saves)
        autoSaveTimer = new Timer(async _ => await SaveTodos(), null, Timeout.Infinite, Timeout.Infinite);
    }

    public void Dispose()
    {
        autoSaveTimer?.Dispose();
    }

    // ========================================================================
    // TODO OPERATIONS
    // ========================================================================

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(newTodoText))
            return;

        var todo = new TodoItem
        {
            Id = Guid.NewGuid(),
            Text = newTodoText.Trim(),
            IsCompleted = false,
            CreatedAt = DateTime.Now
        };

        todos.Insert(0, todo); // Add to beginning
        newTodoText = string.Empty;

        Logger.LogInformation("Added todo: {Text}", todo.Text);

        ApplyFilters();
        await SaveTodos();
    }

    private async Task ToggleTodo(TodoItem todo)
    {
        todo.IsCompleted = !todo.IsCompleted;
        todo.CompletedAt = todo.IsCompleted ? DateTime.Now : null;

        Logger.LogInformation("Toggled todo {Id}: {IsCompleted}", todo.Id, todo.IsCompleted);

        ApplyFilters();
        await SaveTodos();
    }

    private void StartEdit(TodoItem todo)
    {
        editingTodoId = todo.Id;
        editingText = todo.Text;
    }

    private async Task SaveEdit(TodoItem todo)
    {
        if (editingTodoId == todo.Id && !string.IsNullOrWhiteSpace(editingText))
        {
            todo.Text = editingText.Trim();
            Logger.LogInformation("Updated todo {Id}", todo.Id);
            await SaveTodos();
        }

        editingTodoId = null;
        editingText = string.Empty;
    }

    private async Task DeleteTodo(TodoItem todo)
    {
        todos.Remove(todo);
        Logger.LogInformation("Deleted todo {Id}", todo.Id);

        ApplyFilters();
        await SaveTodos();
    }

    private async Task ClearCompleted()
    {
        var completedCount = todos.Count(t => t.IsCompleted);
        todos.RemoveAll(t => t.IsCompleted);

        Logger.LogInformation("Cleared {Count} completed todos", completedCount);

        ApplyFilters();
        await SaveTodos();
    }

    // ========================================================================
    // FILTERING
    // ========================================================================

    private void SetFilter(TodoFilter filter)
    {
        currentFilter = filter;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var query = todos.AsEnumerable();

        // Apply status filter
        query = currentFilter switch
        {
            TodoFilter.Active => query.Where(t => !t.IsCompleted),
            TodoFilter.Completed => query.Where(t => t.IsCompleted),
            _ => query
        };

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(t => t.Text.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        filteredTodos = query.ToList();
    }

    // ========================================================================
    // EVENT HANDLERS
    // ========================================================================

    private void OnNewTodoTextChanged()
    {
        // Can add validation or formatting here
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddTodo();
        }
    }

    private async Task HandleEditKeyDown(KeyboardEventArgs e, TodoItem todo)
    {
        if (e.Key == "Enter")
        {
            await SaveEdit(todo);
        }
        else if (e.Key == "Escape")
        {
            editingTodoId = null;
            editingText = string.Empty;
        }
    }

    // ========================================================================
    // PERSISTENCE
    // ========================================================================

    private async Task SaveTodos()
    {
        try
        {
            await LocalStorage.SetItemAsync(STORAGE_KEY, todos);
            Logger.LogDebug("Saved {Count} todos to localStorage", todos.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving todos to localStorage");
        }
    }

    // ========================================================================
    // HELPERS
    // ========================================================================

    private int GetActiveCount() => todos.Count(t => !t.IsCompleted);
    private int GetCompletedCount() => todos.Count(t => t.IsCompleted);
    private int GetCompletionRate() => todos.Any() ? (int)((double)GetCompletedCount() / todos.Count * 100) : 0;

    private string GetEmptyStateMessage()
    {
        return currentFilter switch
        {
            TodoFilter.Active => "No active todos. Great job!",
            TodoFilter.Completed => "No completed todos yet.",
            _ when !string.IsNullOrWhiteSpace(searchTerm) => "No todos match your search.",
            _ => "No todos yet. Add one to get started!"
        };
    }
}

// ============================================================================
// MODELS
// ============================================================================

public class TodoItem
{
    public Guid Id { get; set; }
    public string Text { get; set; } = string.Empty;
    public bool IsCompleted { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime? CompletedAt { get; set; }
}

public enum TodoFilter
{
    All,
    Active,
    Completed
}
