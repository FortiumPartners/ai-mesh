1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "chart.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "chart.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "chart.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "chart.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Monitor the deployment status:
   kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "chart.selectorLabels" . }}" -w

3. View application logs:
   kubectl logs --namespace {{ .Release.Namespace }} -l "{{ include "chart.selectorLabels" . }}" --follow

4. Check application health:
{{- if .Values.livenessProbe.httpGet }}
   kubectl exec --namespace {{ .Release.Namespace }} deployment/{{ include "chart.fullname" . }} -- curl -f {{ .Values.livenessProbe.httpGet.path }}
{{- end }}

{{- if .Values.persistence.enabled }}

5. Your data is persisted using a PersistentVolumeClaim:
   kubectl get pvc --namespace {{ .Release.Namespace }} {{ include "chart.fullname" . }}-pvc
{{- end }}

{{- if .Values.autoscaling.enabled }}

6. Horizontal Pod Autoscaler is configured:
   kubectl get hpa --namespace {{ .Release.Namespace }} {{ include "chart.fullname" . }}
{{- end }}

{{- if .Values.monitoring.enabled }}

7. Monitoring is enabled:
{{- if .Values.monitoring.serviceMonitor.enabled }}
   - ServiceMonitor created for Prometheus integration
{{- end }}
   - Metrics available at: {{ .Values.monitoring.serviceMonitor.path | default "/metrics" }}
{{- end }}

{{- if .Values.networkPolicy.enabled }}

8. Network Policy is enabled for enhanced security:
   kubectl describe networkpolicy --namespace {{ .Release.Namespace }} {{ include "chart.fullname" . }}
{{- end }}

{{- if .Values.rbac.create }}

9. RBAC resources have been created:
   kubectl describe serviceaccount --namespace {{ .Release.Namespace }} {{ include "chart.serviceAccountName" . }}
   kubectl describe role --namespace {{ .Release.Namespace }} {{ include "chart.fullname" . }}
   kubectl describe rolebinding --namespace {{ .Release.Namespace }} {{ include "chart.fullname" . }}
{{- end }}

{{- if .Values.tests.enabled }}

10. Run tests to verify the deployment:
    helm test {{ .Release.Name }} --namespace {{ .Release.Namespace }}
{{- end }}

---
Generated by: Helm Chart Specialist Agent
Chart Version: {{ .Chart.Version }}
App Version: {{ .Chart.AppVersion }}
Generated At: {{ now | date "2006-01-02 15:04:05" }}

For more information about this chart, visit:
{{- if .Chart.Home }}
{{ .Chart.Home }}
{{- else }}
https://github.com/your-org/helm-charts
{{- end }}

Support and Documentation:
- Troubleshooting: Check pod logs and events for detailed error information
- Configuration: Review values.yaml for customization options
- Updates: Use 'helm upgrade' to deploy configuration changes
- Rollback: Use 'helm rollback' if issues occur after deployment