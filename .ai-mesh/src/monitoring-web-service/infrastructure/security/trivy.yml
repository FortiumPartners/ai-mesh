# Trivy Security Scanning Configuration
# Task 3.1: Advanced security scanning and validation

# Trivy configuration for container image vulnerability scanning
apiVersion: v1
kind: ConfigMap
metadata:
  name: trivy-config
  namespace: security-scanning
data:
  trivy.yaml: |
    # Global configuration
    global:
      # Database configuration
      cache-dir: /tmp/trivy-cache
      timeout: 10m0s
      insecure: false
      
      # Output configuration
      format: json
      output: trivy-results.json
      
      # Update configuration
      skip-update: false
      offline-scan: false
      
      # Debug configuration
      debug: false
      quiet: false
      
    # Vulnerability scanning configuration
    vulnerability:
      # Severity levels to include
      severity:
        - UNKNOWN
        - LOW
        - MEDIUM
        - HIGH
        - CRITICAL
        
      # Vulnerability types
      vuln-type:
        - os
        - library
        
      # Skip specific vulnerabilities
      skip-files:
        - "**/.git/**"
        - "**/node_modules/**"
        - "**/vendor/**"
        
      # Ignore specific CVEs
      ignorefile: .trivyignore
      
      # Exit codes
      exit-code: 1  # Non-zero exit on vulnerabilities
      severity-for-exit: CRITICAL  # Exit on critical vulnerabilities only
      
    # Secret scanning configuration
    secret:
      # Enable secret detection
      enable: true
      
      # Secret types to detect
      types:
        - aws-access-key-id
        - aws-secret-access-key
        - github-pat
        - github-oauth
        - gitlab-pat
        - slack-access-token
        - slack-web-hook
        - stripe-api-key
        - jwt
        - private-key
        - ssh-key
        - pgp-private-key
        - credit-card-number
        
    # License scanning configuration
    license:
      # Enable license detection
      enable: true
      
      # License categories to flag
      forbidden:
        - GPL-2.0
        - GPL-3.0
        - AGPL-1.0
        - AGPL-3.0
        
      # License categories that require review
      restricted:
        - Apache-2.0
        - MIT
        - BSD-2-Clause
        - BSD-3-Clause
        
    # Configuration scanning
    config:
      # Enable configuration scanning
      enable: true
      
      # Policy configuration
      policy: "./policies"
      
      # Skip specific directories
      skip-dirs:
        - node_modules
        - .git
        - .terraform
        
    # Custom policies for different environments
    policies:
      # Production policies (strictest)
      production:
        vulnerability:
          severity-for-exit: HIGH
          max-critical: 0
          max-high: 5
          max-medium: 20
          
        secret:
          fail-on-detection: true
          
        license:
          fail-on-forbidden: true
          warn-on-restricted: true
          
      # Staging policies
      staging:
        vulnerability:
          severity-for-exit: HIGH
          max-critical: 2
          max-high: 10
          max-medium: 50
          
        secret:
          fail-on-detection: true
          
        license:
          fail-on-forbidden: true
          warn-on-restricted: false
          
      # Development policies (most permissive)
      development:
        vulnerability:
          severity-for-exit: CRITICAL
          max-critical: 5
          max-high: -1  # No limit
          max-medium: -1  # No limit
          
        secret:
          fail-on-detection: false
          warn-on-detection: true
          
        license:
          fail-on-forbidden: false
          warn-on-forbidden: true
          warn-on-restricted: false

  # Trivy ignore file for known acceptable risks
  .trivyignore: |
    # Temporary ignores with expiration dates
    CVE-2023-example-1  # Expires: 2025-03-01 - Development only, patch pending
    
    # Base image vulnerabilities being tracked by vendor
    CVE-2023-example-2  # Node.js base image - vendor patch expected Q1 2025
    
    # False positives
    CVE-2023-example-3  # False positive - not applicable to our usage
    
    # Development dependencies (not in production)
    CVE-2023-example-4  # Development dependency, not in production build

  # Trivy scanning script
  scan-script.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Configuration
    ENVIRONMENT="${ENVIRONMENT:-development}"
    IMAGE_NAME="${1:-}"
    OUTPUT_DIR="${OUTPUT_DIR:-./trivy-results}"
    TRIVY_CONFIG="${TRIVY_CONFIG:-./trivy.yaml}"
    
    # Colors for output
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
    
    # Validation
    if [[ -z "${IMAGE_NAME}" ]]; then
        echo -e "${RED}Error: Image name is required${NC}"
        echo "Usage: $0 <image-name>"
        exit 1
    fi
    
    echo -e "${BLUE}🔍 Starting Trivy security scan${NC}"
    echo "Environment: ${ENVIRONMENT}"
    echo "Image: ${IMAGE_NAME}"
    echo "Output directory: ${OUTPUT_DIR}"
    
    # Create output directory
    mkdir -p "${OUTPUT_DIR}"
    
    # Update vulnerability database
    echo -e "${BLUE}📥 Updating vulnerability database...${NC}"
    trivy image --download-db-only
    
    # Run vulnerability scan
    echo -e "${BLUE}🔍 Scanning for vulnerabilities...${NC}"
    trivy image \
        --config "${TRIVY_CONFIG}" \
        --format json \
        --output "${OUTPUT_DIR}/vulnerabilities.json" \
        --severity HIGH,CRITICAL \
        "${IMAGE_NAME}"
    
    # Run secret scan
    echo -e "${BLUE}🔐 Scanning for secrets...${NC}"
    trivy image \
        --config "${TRIVY_CONFIG}" \
        --scanners secret \
        --format json \
        --output "${OUTPUT_DIR}/secrets.json" \
        "${IMAGE_NAME}"
    
    # Run license scan
    echo -e "${BLUE}📄 Scanning for license issues...${NC}"
    trivy image \
        --config "${TRIVY_CONFIG}" \
        --scanners license \
        --format json \
        --output "${OUTPUT_DIR}/licenses.json" \
        "${IMAGE_NAME}"
    
    # Run configuration scan
    echo -e "${BLUE}⚙️ Scanning for configuration issues...${NC}"
    trivy image \
        --config "${TRIVY_CONFIG}" \
        --scanners config \
        --format json \
        --output "${OUTPUT_DIR}/configs.json" \
        "${IMAGE_NAME}"
    
    # Generate summary report
    echo -e "${BLUE}📊 Generating summary report...${NC}"
    cat > "${OUTPUT_DIR}/scan-summary.json" <<EOF
    {
      "scan_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
      "environment": "${ENVIRONMENT}",
      "image": "${IMAGE_NAME}",
      "scanner_version": "$(trivy --version | head -n1)",
      "scans_performed": [
        "vulnerabilities",
        "secrets",
        "licenses",
        "configurations"
      ]
    }
    EOF
    
    # Parse results and provide feedback
    parse_results() {
        local scan_type=$1
        local results_file="${OUTPUT_DIR}/${scan_type}.json"
        
        if [[ ! -f "${results_file}" ]]; then
            echo -e "${YELLOW}⚠️ No ${scan_type} results file found${NC}"
            return 0
        fi
        
        case "${scan_type}" in
            "vulnerabilities")
                local critical=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "${results_file}")
                local high=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "${results_file}")
                local medium=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' "${results_file}")
                local low=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' "${results_file}")
                
                echo -e "${BLUE}📊 Vulnerability Summary:${NC}"
                echo -e "   Critical: ${critical}"
                echo -e "   High: ${high}"
                echo -e "   Medium: ${medium}"
                echo -e "   Low: ${low}"
                
                if [[ "${critical}" -gt 0 ]]; then
                    echo -e "${RED}🚨 Critical vulnerabilities found!${NC}"
                    jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | "  - \(.VulnerabilityID): \(.Title)"' "${results_file}"
                    return 1
                fi
                ;;
                
            "secrets")
                local secret_count=$(jq -r '[.Results[]?.Secrets[]?] | length' "${results_file}")
                
                echo -e "${BLUE}🔐 Secrets Summary:${NC}"
                echo -e "   Secrets found: ${secret_count}"
                
                if [[ "${secret_count}" -gt 0 ]]; then
                    echo -e "${RED}🚨 Secrets detected in image!${NC}"
                    jq -r '.Results[]?.Secrets[]? | "  - \(.RuleID): \(.Title) (Line: \(.StartLine))"' "${results_file}"
                    return 1
                fi
                ;;
                
            "licenses")
                local license_issues=$(jq -r '[.Results[]?.Licenses[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' "${results_file}")
                
                echo -e "${BLUE}📄 License Summary:${NC}"
                echo -e "   License issues: ${license_issues}"
                
                if [[ "${license_issues}" -gt 0 ]]; then
                    echo -e "${YELLOW}⚠️ License issues found${NC}"
                    jq -r '.Results[]?.Licenses[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "  - \(.Name): \(.Severity)"' "${results_file}"
                fi
                ;;
                
            "configs")
                local config_issues=$(jq -r '[.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' "${results_file}")
                
                echo -e "${BLUE}⚙️ Configuration Summary:${NC}"
                echo -e "   Configuration issues: ${config_issues}"
                
                if [[ "${config_issues}" -gt 0 ]]; then
                    echo -e "${YELLOW}⚠️ Configuration issues found${NC}"
                    jq -r '.Results[]?.Misconfigurations[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "  - \(.ID): \(.Title)"' "${results_file}"
                fi
                ;;
        esac
        
        return 0
    }
    
    # Parse all results
    overall_status=0
    
    echo -e "\n${BLUE}📈 Scan Results Summary${NC}"
    echo "================================"
    
    for scan_type in vulnerabilities secrets licenses configs; do
        if ! parse_results "${scan_type}"; then
            overall_status=1
        fi
        echo
    done
    
    # Generate human-readable report
    cat > "${OUTPUT_DIR}/security-report.md" <<EOF
    # Container Security Scan Report
    
    **Scan Date:** $(date -u)
    **Environment:** ${ENVIRONMENT}
    **Image:** ${IMAGE_NAME}
    **Scanner:** Trivy $(trivy --version | head -n1 | cut -d' ' -f2)
    
    ## Executive Summary
    
    This report contains the results of a comprehensive security scan of the container image, including:
    - Vulnerability assessment
    - Secret detection
    - License compliance
    - Configuration analysis
    
    ## Scan Results
    
    ### Vulnerabilities
    $(jq -r 'if (.Results[]?.Vulnerabilities | length) > 0 then "Found \(.Results[]?.Vulnerabilities | length) vulnerabilities" else "No vulnerabilities detected" end' "${OUTPUT_DIR}/vulnerabilities.json")
    
    ### Secrets
    $(jq -r 'if (.Results[]?.Secrets | length) > 0 then "⚠️ Found \(.Results[]?.Secrets | length) secrets" else "✅ No secrets detected" end' "${OUTPUT_DIR}/secrets.json")
    
    ### Licenses
    $(jq -r 'if (.Results[]?.Licenses | length) > 0 then "Found \(.Results[]?.Licenses | length) license entries" else "No license information available" end' "${OUTPUT_DIR}/licenses.json")
    
    ### Configuration
    $(jq -r 'if (.Results[]?.Misconfigurations | length) > 0 then "Found \(.Results[]?.Misconfigurations | length) configuration issues" else "No configuration issues detected" end' "${OUTPUT_DIR}/configs.json")
    
    ## Recommendations
    
    1. Address all CRITICAL and HIGH severity vulnerabilities
    2. Remove any detected secrets from the image
    3. Review license compliance requirements
    4. Fix configuration security issues
    5. Implement regular security scanning in CI/CD pipeline
    
    ---
    *Report generated on $(date -u) by Trivy Security Scanner*
    EOF
    
    # Final status
    if [[ ${overall_status} -eq 0 ]]; then
        echo -e "${GREEN}🎉 Security scan completed successfully - no critical issues found!${NC}"
    else
        echo -e "${RED}⚠️ Security scan completed with critical issues that must be addressed${NC}"
    fi
    
    echo -e "${BLUE}📁 Scan results saved to: ${OUTPUT_DIR}${NC}"
    exit ${overall_status}

---
# Trivy operator configuration for Kubernetes
apiVersion: v1
kind: ConfigMap
metadata:
  name: trivy-operator-config
  namespace: trivy-system
data:
  # Trivy operator configuration
  config.yaml: |
    # Vulnerability scanner configuration
    vulnerabilityReports:
      scanner: "Trivy"
      
    # Configuration audit scanner
    configAuditReports:
      scanner: "Trivy"
      
    # Exposed secret scanner  
    exposedSecretReports:
      scanner: "Trivy"
      
    # RBAC assessment scanner
    rbacAssessmentReports:
      scanner: "Trivy"
      
    # Kubernetes infra assessment scanner
    infraAssessmentReports:
      scanner: "Trivy"
      
    # Compliance reports
    complianceReports:
      cron: "0 1 * * *"  # Daily at 1 AM
      
    # Scan job configuration
    scanJob:
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node-role.kubernetes.io/worker"
                    operator: "Exists"
                    
    # Resource limits
    resources:
      requests:
        cpu: "100m"
        memory: "100M"
      limits:
        cpu: "500m"  
        memory: "500M"
        
    # Trivy configuration
    trivy:
      # Database repository
      repository: "ghcr.io/aquasecurity/trivy-db"
      tag: "2"
      
      # Java database repository  
      javaDbRepository: "ghcr.io/aquasecurity/trivy-java-db"
      
      # Resources for trivy pod
      resources:
        requests:
          cpu: "100m"
          memory: "100M" 
        limits:
          cpu: "500m"
          memory: "500M"
          
      # Server mode configuration
      serverInsecure: false
      mode: "Standalone"  # or ClientServer
      
      # Additional vulnerability databases
      additionalVulnerabilityReportFields: "Description,Links,CVSS,Target,Class,PackagePath"
      
      # Skip files configuration  
      skipFiles: ".trivyignore,Dockerfile.trivyignore"
      
      # Skip directories
      skipDirs: "/var/lib/dpkg,/var/lib/apt,/var/cache/apt,/var/log"