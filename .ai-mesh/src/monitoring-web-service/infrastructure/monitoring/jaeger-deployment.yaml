# Task 6.3: Jaeger Distributed Tracing Deployment
# Helm Chart Specialist - Sprint 6 Observability Implementation
# Complete Jaeger setup with collector, query, and agent components

apiVersion: v1
kind: Namespace
metadata:
  name: jaeger-system
  labels:
    name: jaeger-system
    app: jaeger

---
# Jaeger All-in-One for development/testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-all-in-one
  namespace: jaeger-system
  labels:
    app: jaeger
    component: all-in-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
      component: all-in-one
  template:
    metadata:
      labels:
        app: jaeger
        component: all-in-one
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14269"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.50.0
        args:
          - --memory.max-traces=50000
          - --query.base-path=/jaeger
          - --prometheus.server-url=http://prometheus.monitoring:9090
          - --prometheus.query.support-spanmetrics-connector=true
          - --query.max-clock-skew-adjustment=0s
        ports:
        - containerPort: 16686
          name: query
        - containerPort: 14268
          name: http-collector
        - containerPort: 14250
          name: grpc-collector
        - containerPort: 6831
          name: agent-compact
          protocol: UDP
        - containerPort: 6832
          name: agent-binary
          protocol: UDP
        - containerPort: 5778
          name: agent-config
        - containerPort: 14269
          name: admin
        env:
        - name: SPAN_STORAGE_TYPE
          value: "memory"
        - name: COLLECTOR_ZIPKIN_HOST_PORT
          value: ":9411"
        - name: QUERY_BASE_PATH
          value: "/jaeger"
        - name: METRICS_STORAGE_TYPE
          value: "prometheus"
        - name: PROMETHEUS_SERVER_URL
          value: "http://prometheus.monitoring:9090"
        - name: PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR
          value: "true"
        - name: JAEGER_DISABLED
          value: "false"
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 1Gi
            cpu: 500m
        livenessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
# Jaeger Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-all-in-one
  namespace: jaeger-system
  labels:
    app: jaeger
    component: all-in-one
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "14269"
spec:
  selector:
    app: jaeger
    component: all-in-one
  ports:
  - name: query
    port: 16686
    targetPort: 16686
  - name: http-collector
    port: 14268
    targetPort: 14268
  - name: grpc-collector
    port: 14250
    targetPort: 14250
  - name: agent-compact
    port: 6831
    targetPort: 6831
    protocol: UDP
  - name: agent-binary
    port: 6832
    targetPort: 6832
    protocol: UDP
  - name: agent-config
    port: 5778
    targetPort: 5778
  - name: admin
    port: 14269
    targetPort: 14269
  - name: zipkin
    port: 9411
    targetPort: 9411
  type: ClusterIP

---
# Jaeger Collector Service (for external access)
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: jaeger-system
  labels:
    app: jaeger
    component: collector
spec:
  selector:
    app: jaeger
    component: all-in-one
  ports:
  - name: http-collector
    port: 14268
    targetPort: 14268
  - name: grpc-collector
    port: 14250
    targetPort: 14250
  type: ClusterIP

---
# Jaeger Query Service (for UI access)
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: jaeger-system
  labels:
    app: jaeger
    component: query
spec:
  selector:
    app: jaeger
    component: all-in-one
  ports:
  - name: query
    port: 16686
    targetPort: 16686
  type: ClusterIP

---
# Jaeger Agent DaemonSet (for local collection)
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jaeger-agent
  namespace: jaeger-system
  labels:
    app: jaeger
    component: agent
spec:
  selector:
    matchLabels:
      app: jaeger
      component: agent
  template:
    metadata:
      labels:
        app: jaeger
        component: agent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14271"
    spec:
      hostNetwork: false
      dnsPolicy: ClusterFirst
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
      containers:
      - name: jaeger-agent
        image: jaegertracing/jaeger-agent:1.50.0
        args:
          - --reporter.grpc.host-port=jaeger-collector.jaeger-system:14250
          - --reporter.type=grpc
          - --agent.tags=cluster=helm-chart-specialist,deployment.name=jaeger-agent
          - --log-level=info
        ports:
        - containerPort: 6831
          name: compact
          protocol: UDP
        - containerPort: 6832
          name: binary
          protocol: UDP
        - containerPort: 5778
          name: http
        - containerPort: 14271
          name: admin
        env:
        - name: REPORTER_GRPC_HOST_PORT
          value: "jaeger-collector.jaeger-system:14250"
        - name: REPORTER_TYPE
          value: "grpc"
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            memory: 64Mi
            cpu: 50m
          limits:
            memory: 128Mi
            cpu: 100m
        livenessProbe:
          httpGet:
            path: /
            port: 14271
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 14271
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
# Jaeger Agent Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-agent
  namespace: jaeger-system
  labels:
    app: jaeger
    component: agent
spec:
  selector:
    app: jaeger
    component: agent
  ports:
  - name: compact
    port: 6831
    targetPort: 6831
    protocol: UDP
  - name: binary
    port: 6832
    targetPort: 6832
    protocol: UDP
  - name: http
    port: 5778
    targetPort: 5778
  - name: admin
    port: 14271
    targetPort: 14271
  clusterIP: None

---
# Helm Chart APM Service Integration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helm-chart-apm-service
  namespace: monitoring-web-service
  labels:
    app: helm-chart-apm-service
    component: observability
spec:
  replicas: 2
  selector:
    matchLabels:
      app: helm-chart-apm-service
  template:
    metadata:
      labels:
        app: helm-chart-apm-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9464"
        prometheus.io/path: "/tracing-metrics"
    spec:
      serviceAccountName: helm-chart-apm
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
      - name: apm-service
        image: node:18-alpine
        command: ["node", "/app/distributed-tracing-apm.js"]
        ports:
        - containerPort: 3000
          name: api
        - containerPort: 9464
          name: tracing-metrics
        env:
        - name: NODE_ENV
          value: "production"
        - name: SERVICE_NAME
          value: "helm-chart-specialist"
        - name: SERVICE_VERSION
          value: "1.0.0"
        - name: ENVIRONMENT
          value: "production"
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector.jaeger-system:14268/api/traces"
        - name: JAEGER_AGENT_HOST
          value: "jaeger-agent.jaeger-system"
        - name: JAEGER_AGENT_PORT
          value: "6832"
        - name: SAMPLING_RATE
          value: "1.0"
        - name: ENABLE_PROFILING
          value: "true"
        - name: ENABLE_BUSINESS_TRANSACTIONS
          value: "true"
        volumeMounts:
        - name: app-code
          mountPath: /app
          readOnly: true
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: 256Mi
            cpu: 200m
          limits:
            memory: 512Mi
            cpu: 500m
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-code
        configMap:
          name: helm-chart-apm-code
      - name: tmp
        emptyDir: {}

---
# Helm Chart APM Service
apiVersion: v1
kind: Service
metadata:
  name: helm-chart-apm-service
  namespace: monitoring-web-service
  labels:
    app: helm-chart-apm-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9464"
    prometheus.io/path: "/tracing-metrics"
spec:
  selector:
    app: helm-chart-apm-service
  ports:
  - name: api
    port: 3000
    targetPort: 3000
  - name: tracing-metrics
    port: 9464
    targetPort: 9464
  type: ClusterIP

---
# ServiceAccount for APM Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: helm-chart-apm
  namespace: monitoring-web-service

---
# ClusterRole for APM Service
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: helm-chart-apm
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding for APM Service
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: helm-chart-apm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: helm-chart-apm
subjects:
- kind: ServiceAccount
  name: helm-chart-apm
  namespace: monitoring-web-service

---
# Ingress for Jaeger UI
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jaeger-ui
  namespace: jaeger-system
  labels:
    app: jaeger
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
spec:
  ingressClassName: nginx
  rules:
  - host: jaeger.monitoring-web-service.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jaeger-query
            port:
              number: 16686

---
# ConfigMap for APM Service Code
apiVersion: v1
kind: ConfigMap
metadata:
  name: helm-chart-apm-code
  namespace: monitoring-web-service
data:
  distributed-tracing-apm.js: |
    // This would contain the actual APM service code
    // For deployment, the actual file content would be included here
    console.log('Helm Chart APM Service starting...');

    const express = require('express');
    const app = express();

    app.get('/health', (req, res) => {
      res.json({ status: 'healthy', timestamp: new Date().toISOString() });
    });

    app.listen(3000, () => {
      console.log('APM Service listening on port 3000');
    });

  package.json: |
    {
      "name": "helm-chart-apm-service",
      "version": "1.0.0",
      "description": "Helm Chart Specialist APM Service",
      "main": "distributed-tracing-apm.js",
      "dependencies": {
        "express": "^4.18.2",
        "@opentelemetry/api": "^1.6.0",
        "@opentelemetry/auto-instrumentations-node": "^0.39.4",
        "@opentelemetry/exporter-jaeger": "^1.17.0",
        "@opentelemetry/exporter-prometheus": "^0.43.0",
        "@opentelemetry/resources": "^1.17.0",
        "@opentelemetry/semantic-conventions": "^1.17.0",
        "@opentelemetry/sdk-metrics": "^1.17.0",
        "winston": "^3.10.0"
      }
    }

---
# Network Policy for Jaeger System
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: jaeger-netpol
  namespace: jaeger-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring-web-service
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: jaeger-system
    ports:
    - protocol: TCP
      port: 16686  # Jaeger UI
    - protocol: TCP
      port: 14268  # HTTP collector
    - protocol: TCP
      port: 14250  # gRPC collector
    - protocol: UDP
      port: 6831   # Agent compact
    - protocol: UDP
      port: 6832   # Agent binary
    - protocol: TCP
      port: 5778   # Agent config
    - protocol: TCP
      port: 14269  # Admin
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus

---
# ServiceMonitor for Jaeger metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: jaeger-metrics
  namespace: jaeger-system
  labels:
    app: jaeger
spec:
  selector:
    matchLabels:
      app: jaeger
  endpoints:
  - port: admin
    interval: 30s
    path: /metrics