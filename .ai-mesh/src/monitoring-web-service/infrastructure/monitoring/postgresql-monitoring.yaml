# PostgreSQL Monitoring Infrastructure
# Enhanced monitoring for PostgreSQL/TimescaleDB with comprehensive metrics collection
# Implements specialized PostgreSQL monitoring as part of Phase 2: Infrastructure & Integration

apiVersion: v1
kind: Namespace
metadata:
  name: postgresql-monitoring
  labels:
    name: postgresql-monitoring
    app: postgresql-monitoring-stack
---
# PostgreSQL Exporter Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-exporter
  namespace: postgresql-monitoring
---
# PostgreSQL Exporter ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: postgres-exporter
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "pods"]
    verbs: ["get", "list", "watch"]
---
# PostgreSQL Exporter ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: postgres-exporter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: postgres-exporter
subjects:
  - kind: ServiceAccount
    name: postgres-exporter
    namespace: postgresql-monitoring
---
# PostgreSQL Connection Secret
apiVersion: v1
kind: Secret
metadata:
  name: postgres-exporter-secret
  namespace: postgresql-monitoring
type: Opaque
stringData:
  # Connection string for PostgreSQL exporter
  # Format: postgresql://username:password@host:port/database?sslmode=require
  DATA_SOURCE_NAME: "postgresql://metrics_user:secure_development_password@postgres.monitoring-web-service:5432/metrics_development?sslmode=disable"
  # Alternative URI format
  DATA_SOURCE_URI: "postgres.monitoring-web-service:5432/metrics_development?sslmode=disable"
  DATA_SOURCE_USER: "metrics_user"
  DATA_SOURCE_PASS: "secure_development_password"
---
# PostgreSQL Exporter ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-exporter-config
  namespace: postgresql-monitoring
data:
  # PostgreSQL Exporter configuration
  queries.yaml: |
    # Custom queries for monitoring PostgreSQL and TimescaleDB
    
    # Database size monitoring
    pg_database_size:
      query: "SELECT pg_database.datname, pg_database_size(pg_database.datname) as size FROM pg_database"
      master: true
      cache_seconds: 30
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of the database"
        - size:
            usage: "GAUGE"
            description: "Size of the database in bytes"
    
    # Table size monitoring (top 20 largest tables)
    pg_table_size:
      query: |
        SELECT 
          schemaname,
          tablename,
          pg_total_relation_size(schemaname||'.'||tablename) as total_size,
          pg_relation_size(schemaname||'.'||tablename) as table_size
        FROM pg_tables 
        WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
        ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC 
        LIMIT 20
      master: true
      cache_seconds: 60
      metrics:
        - schemaname:
            usage: "LABEL"
            description: "Schema name"
        - tablename:
            usage: "LABEL"
            description: "Table name"
        - total_size:
            usage: "GAUGE"
            description: "Total table size including indexes in bytes"
        - table_size:
            usage: "GAUGE"
            description: "Table size in bytes"
    
    # Connection and activity monitoring
    pg_stat_activity:
      query: |
        SELECT 
          datname,
          state,
          count(*) as connections
        FROM pg_stat_activity 
        WHERE datname IS NOT NULL
        GROUP BY datname, state
      master: true
      cache_seconds: 15
      metrics:
        - datname:
            usage: "LABEL"
            description: "Database name"
        - state:
            usage: "LABEL"
            description: "Connection state"
        - connections:
            usage: "GAUGE"
            description: "Number of connections in this state"
    
    # Long running queries
    pg_long_running_queries:
      query: |
        SELECT 
          datname,
          usename,
          count(*) as long_queries
        FROM pg_stat_activity 
        WHERE state = 'active' 
          AND now() - query_start > interval '5 minutes'
          AND datname IS NOT NULL
        GROUP BY datname, usename
      master: true
      cache_seconds: 30
      metrics:
        - datname:
            usage: "LABEL"
            description: "Database name"
        - usename:
            usage: "LABEL"
            description: "Username"
        - long_queries:
            usage: "GAUGE"
            description: "Number of long running queries"
    
    # TimescaleDB hypertable monitoring
    timescaledb_hypertables:
      query: |
        SELECT 
          schema_name,
          table_name,
          num_dimensions,
          num_chunks
        FROM timescaledb_information.hypertables
      master: true
      cache_seconds: 300
      metrics:
        - schema_name:
            usage: "LABEL"
            description: "Hypertable schema name"
        - table_name:
            usage: "LABEL"
            description: "Hypertable name"
        - num_dimensions:
            usage: "GAUGE"
            description: "Number of dimensions in hypertable"
        - num_chunks:
            usage: "GAUGE"
            description: "Number of chunks in hypertable"
    
    # TimescaleDB chunk statistics
    timescaledb_chunks:
      query: |
        SELECT 
          hypertable_schema,
          hypertable_name,
          count(*) as total_chunks,
          sum(CASE WHEN dropped = true THEN 1 ELSE 0 END) as dropped_chunks,
          sum(compressed_chunk_id IS NOT NULL) as compressed_chunks
        FROM timescaledb_information.chunks
        GROUP BY hypertable_schema, hypertable_name
      master: true
      cache_seconds: 120
      metrics:
        - hypertable_schema:
            usage: "LABEL"
            description: "Hypertable schema name"
        - hypertable_name:
            usage: "LABEL"
            description: "Hypertable name"
        - total_chunks:
            usage: "GAUGE"
            description: "Total number of chunks"
        - dropped_chunks:
            usage: "GAUGE"
            description: "Number of dropped chunks"
        - compressed_chunks:
            usage: "GAUGE"
            description: "Number of compressed chunks"
    
    # Query performance monitoring
    pg_stat_statements:
      query: |
        SELECT 
          datname,
          queryid,
          calls,
          total_time,
          mean_time,
          rows,
          100.0 * shared_blks_hit / nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
        FROM pg_stat_statements s
        JOIN pg_database d ON s.dbid = d.oid
        WHERE calls > 100
        ORDER BY mean_time DESC
        LIMIT 50
      master: true
      cache_seconds: 60
      metrics:
        - datname:
            usage: "LABEL"
            description: "Database name"
        - queryid:
            usage: "LABEL"
            description: "Query identifier"
        - calls:
            usage: "COUNTER"
            description: "Number of times executed"
        - total_time:
            usage: "COUNTER"
            description: "Total time spent in the statement, in milliseconds"
        - mean_time:
            usage: "GAUGE"
            description: "Mean time spent in the statement, in milliseconds"
        - rows:
            usage: "COUNTER"
            description: "Total number of rows retrieved or affected"
        - hit_percent:
            usage: "GAUGE"
            description: "Buffer cache hit percentage"
    
    # Replication monitoring (if applicable)
    pg_replication:
      query: |
        SELECT 
          client_addr,
          client_hostname,
          state,
          pg_current_wal_lsn() - sent_lsn AS send_lag,
          pg_current_wal_lsn() - write_lsn AS write_lag,
          pg_current_wal_lsn() - flush_lsn AS flush_lag,
          pg_current_wal_lsn() - replay_lsn AS replay_lag
        FROM pg_stat_replication
      master: true
      cache_seconds: 30
      metrics:
        - client_addr:
            usage: "LABEL"
            description: "Client address"
        - client_hostname:
            usage: "LABEL"
            description: "Client hostname"
        - state:
            usage: "LABEL"
            description: "Replication state"
        - send_lag:
            usage: "GAUGE"
            description: "Send lag in bytes"
        - write_lag:
            usage: "GAUGE"
            description: "Write lag in bytes"
        - flush_lag:
            usage: "GAUGE"
            description: "Flush lag in bytes"
        - replay_lag:
            usage: "GAUGE"
            description: "Replay lag in bytes"

  # Alert rules for PostgreSQL monitoring
  postgresql-rules.yaml: |
    groups:
      - name: postgresql.rules
        rules:
          # Database connectivity
          - alert: PostgreSQLDown
            expr: pg_up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "PostgreSQL instance is down"
              description: "PostgreSQL instance {{ $labels.instance }} has been down for more than 1 minute."
          
          # Connection limits
          - alert: PostgreSQLTooManyConnections
            expr: (pg_stat_activity_count / pg_settings_max_connections) > 0.8
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "PostgreSQL too many connections"
              description: "PostgreSQL instance {{ $labels.instance }} has {{ $value | humanizePercentage }} of max connections in use."
          
          # Long running queries
          - alert: PostgreSQLLongRunningQueries
            expr: pg_stat_activity_max_tx_duration > 300
            for: 1m
            labels:
              severity: warning
            annotations:
              summary: "PostgreSQL long running queries"
              description: "PostgreSQL instance {{ $labels.instance }} has queries running for more than 5 minutes."
          
          # High query time
          - alert: PostgreSQLHighQueryTime
            expr: avg_over_time(pg_stat_statements_mean_time_ms[5m]) > 1000
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "PostgreSQL high query time"
              description: "PostgreSQL instance {{ $labels.instance }} has average query time of {{ $value }}ms over 5 minutes."
          
          # Low cache hit ratio
          - alert: PostgreSQLLowCacheHitRatio
            expr: (pg_stat_database_blks_hit / (pg_stat_database_blks_hit + pg_stat_database_blks_read)) < 0.95
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "PostgreSQL low cache hit ratio"
              description: "PostgreSQL instance {{ $labels.instance }} has cache hit ratio of {{ $value | humanizePercentage }}."
          
          # Database size growth
          - alert: PostgreSQLDatabaseSizeGrowth
            expr: increase(pg_database_size_bytes[1h]) > 1073741824  # 1GB
            for: 0m
            labels:
              severity: info
            annotations:
              summary: "PostgreSQL database size growth"
              description: "PostgreSQL database {{ $labels.datname }} has grown by {{ $value | humanizeBytes }} in the last hour."
          
          # TimescaleDB specific alerts
          - alert: TimescaleDBChunkCompressionLow
            expr: (timescaledb_compressed_chunks / timescaledb_total_chunks) < 0.5
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "TimescaleDB low chunk compression ratio"
              description: "TimescaleDB hypertable {{ $labels.hypertable_name }} has compression ratio of {{ $value | humanizePercentage }}."
          
          # Deadlock monitoring
          - alert: PostgreSQLDeadlocks
            expr: increase(pg_stat_database_deadlocks[1m]) > 0
            for: 0m
            labels:
              severity: warning
            annotations:
              summary: "PostgreSQL deadlocks detected"
              description: "PostgreSQL database {{ $labels.datname }} has {{ $value }} deadlocks in the last minute."
          
          # WAL files growth
          - alert: PostgreSQLWALFilesGrowth
            expr: pg_stat_archiver_archived_count - pg_stat_archiver_last_archived_count > 100
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "PostgreSQL WAL files growth"
              description: "PostgreSQL instance {{ $labels.instance }} has {{ $value }} unarchived WAL files."

---
# PostgreSQL Exporter Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: postgresql-monitoring
  labels:
    app: postgres-exporter
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
  template:
    metadata:
      labels:
        app: postgres-exporter
        component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: postgres-exporter
      containers:
        - name: postgres-exporter
          image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
          ports:
            - containerPort: 9187
              name: metrics
              protocol: TCP
          env:
            - name: DATA_SOURCE_NAME
              valueFrom:
                secretKeyRef:
                  name: postgres-exporter-secret
                  key: DATA_SOURCE_NAME
            - name: PG_EXPORTER_EXTEND_QUERY_PATH
              value: "/etc/postgres-exporter/queries.yaml"
            - name: PG_EXPORTER_AUTO_DISCOVER_DATABASES
              value: "true"
            - name: PG_EXPORTER_EXCLUDE_DATABASES
              value: "postgres,template0,template1"
            # Performance tuning
            - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
              value: "false"
            - name: PG_EXPORTER_DISABLE_SETTINGS_METRICS
              value: "false"
            - name: PG_EXPORTER_INCLUDE_DATABASES
              value: "metrics_development,metrics_staging,metrics_production"
          volumeMounts:
            - name: queries-config
              mountPath: /etc/postgres-exporter/
              readOnly: true
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9187
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9187
            initialDelaySeconds: 5
            periodSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
      volumes:
        - name: queries-config
          configMap:
            name: postgres-exporter-config
            items:
              - key: queries.yaml
                path: queries.yaml
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      restartPolicy: Always
---
# PostgreSQL Exporter Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter
  namespace: postgresql-monitoring
  labels:
    app: postgres-exporter
    component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: postgres-exporter
  ports:
    - name: metrics
      port: 9187
      targetPort: 9187
      protocol: TCP
  type: ClusterIP
---
# ServiceMonitor for Prometheus Operator (if using)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgres-exporter
  namespace: postgresql-monitoring
  labels:
    app: postgres-exporter
    component: monitoring
spec:
  selector:
    matchLabels:
      app: postgres-exporter
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      honorLabels: true
  namespaceSelector:
    matchNames:
      - postgresql-monitoring
---
# Grafana Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-grafana-dashboard
  namespace: postgresql-monitoring
  labels:
    grafana_dashboard: "1"
data:
  postgresql-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "PostgreSQL Monitoring Dashboard",
        "tags": ["postgresql", "timescaledb", "monitoring"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Database Connections",
            "type": "stat",
            "targets": [
              {
                "expr": "pg_stat_activity_count",
                "legendFormat": "{{datname}} - {{state}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "displayMode": "list",
                  "orientation": "horizontal"
                },
                "mappings": [],
                "thresholds": {
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              }
            },
            "options": {
              "reduceOptions": {
                "values": false,
                "calcs": ["lastNotNull"],
                "fields": ""
              },
              "orientation": "auto",
              "textMode": "auto",
              "colorMode": "value",
              "graphMode": "area",
              "justifyMode": "auto"
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Query Performance",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(pg_stat_statements_calls[5m])",
                "legendFormat": "Queries/sec"
              },
              {
                "expr": "pg_stat_statements_mean_time_ms",
                "legendFormat": "Avg Query Time (ms)"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "Database Size Growth",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_database_size_bytes",
                "legendFormat": "{{datname}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 8
            }
          },
          {
            "id": 4,
            "title": "TimescaleDB Chunks",
            "type": "stat",
            "targets": [
              {
                "expr": "timescaledb_total_chunks",
                "legendFormat": "{{hypertable_name}} - Total"
              },
              {
                "expr": "timescaledb_compressed_chunks",
                "legendFormat": "{{hypertable_name}} - Compressed"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 8
            }
          },
          {
            "id": 5,
            "title": "Cache Hit Ratio",
            "type": "singlestat",
            "targets": [
              {
                "expr": "pg_stat_database_blks_hit / (pg_stat_database_blks_hit + pg_stat_database_blks_read)",
                "legendFormat": "{{datname}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 16
            }
          },
          {
            "id": 6,
            "title": "Long Running Queries",
            "type": "table",
            "targets": [
              {
                "expr": "pg_stat_activity_max_tx_duration",
                "legendFormat": "{{datname}} - {{usename}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 16
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }