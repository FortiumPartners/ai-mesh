# Security Scanning Pipeline
# Comprehensive security validation for the monitoring web service
# Phase 2: Infrastructure & Integration - Enhanced Security

name: Security Scan

on:
  # Run on all PRs to main and develop
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  
  # Run on push to protected branches
  push:
    branches: [ main, develop ]
  
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'code-only'
          - 'container-only'
          - 'infrastructure-only'

# Set concurrency to prevent multiple security scans
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: fortium-metrics-web-service

jobs:
  # Code Security Analysis
  code-security:
    name: Code Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code-only' || github.event.inputs.scan_type == '' }}
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: .github/codeql/codeql.yml
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      # Snyk Security Scan
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      # Semgrep Security Scan
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      # npm audit
      - name: Run npm audit
        run: |
          npm audit --audit-level=high --json > npm-audit.json || true
          
      - name: Process npm audit results
        run: |
          if [ -f npm-audit.json ]; then
            vulnerabilities=$(cat npm-audit.json | jq '.metadata.vulnerabilities.total')
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "::warning::Found $vulnerabilities npm vulnerabilities"
              cat npm-audit.json | jq '.vulnerabilities'
            fi
          fi

      # Secret scanning with TruffleHog
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'container-only' || github.event.inputs.scan_type == '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: monitoring-web-service:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Trivy Container Scan
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'monitoring-web-service:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Grype Container Scan
      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: 'monitoring-web-service:security-scan'
          severity-cutoff: medium
          output-format: sarif

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      # Docker Scout (if available)
      - name: Docker Scout CVEs
        uses: docker/scout-action@v1
        if: ${{ github.event_name == 'pull_request' }}
        with:
          command: cves
          image: monitoring-web-service:security-scan
          only-severities: critical,high
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure Security Scanning
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'infrastructure-only' || github.event.inputs.scan_type == '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Checkov for Infrastructure as Code scanning
      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,github_actions
          output_format: sarif
          output_file_path: reports/results.sarif
          download_external_modules: true
          quiet: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/results.sarif

      # Kubernetes Security with Kubesec
      - name: Run Kubesec scan on Kubernetes manifests
        run: |
          # Install kubesec
          curl -sSX GET "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" \
            | grep -o '"browser_download_url": "[^"]*linux_amd64.tar.gz"' \
            | grep -o 'https://[^"]*' \
            | xargs -I {} curl -L {} -o kubesec.tar.gz
          tar -xf kubesec.tar.gz
          
          # Scan Kubernetes manifests
          mkdir -p security-reports
          find k8s/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Scanning $file"
            ./kubesec scan "$file" > "security-reports/kubesec-$(basename "$file").json" || true
          done
          
          # Scan Helm charts
          find helm-chart/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Scanning $file"
            ./kubesec scan "$file" > "security-reports/kubesec-helm-$(basename "$file").json" || true
          done

      - name: Process Kubesec results
        run: |
          if [ -d security-reports ]; then
            for report in security-reports/kubesec-*.json; do
              if [ -f "$report" ]; then
                score=$(cat "$report" | jq '.score // 0')
                if [ "$score" -lt 0 ]; then
                  echo "::warning::Security issues found in $(basename "$report")"
                  cat "$report" | jq '.scoring.advise[]'
                fi
              fi
            done
          fi

      # Terraform Security (if Terraform files exist)
      - name: Run TFSec
        if: hashFiles('**/*.tf') != ''
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          sarif_file: tfsec.sarif

      - name: Upload TFSec results
        if: hashFiles('**/*.tf') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec.sarif

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [code-security, container-security, infrastructure-security]
    if: always() && (needs.code-security.result != 'skipped' || needs.container-security.result != 'skipped' || needs.infrastructure-security.result != 'skipped')
    
    steps:
      - name: Generate Security Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Security | ${{ needs.code-security.result }} | ${{ needs.code-security.result == 'success' && '✅ No critical issues' || '❌ Issues found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result }} | ${{ needs.container-security.result == 'success' && '✅ No critical issues' || '❌ Issues found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Security | ${{ needs.infrastructure-security.result }} | ${{ needs.infrastructure-security.result == 'success' && '✅ No critical issues' || '❌ Issues found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.code-security.result }}" != "success" ] || [ "${{ needs.container-security.result }}" != "success" ] || [ "${{ needs.infrastructure-security.result }}" != "success" ]; then
            echo "- Review security alerts in the Security tab" >> $GITHUB_STEP_SUMMARY
            echo "- Fix identified vulnerabilities before deployment" >> $GITHUB_STEP_SUMMARY
            echo "- Consider updating dependencies and base images" >> $GITHUB_STEP_SUMMARY
          else
            echo "- All security scans passed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Ready for deployment" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const codeResult = '${{ needs.code-security.result }}';
            const containerResult = '${{ needs.container-security.result }}';
            const infraResult = '${{ needs.infrastructure-security.result }}';
            
            let body = '## 🛡️ Security Scan Results\n\n';
            body += '| Scan Type | Result |\n';
            body += '|-----------|--------|\n';
            body += `| Code Security | ${codeResult === 'success' ? '✅ Passed' : '❌ Failed'} |\n`;
            body += `| Container Security | ${containerResult === 'success' ? '✅ Passed' : '❌ Failed'} |\n`;
            body += `| Infrastructure Security | ${infraResult === 'success' ? '✅ Passed' : '❌ Failed'} |\n\n`;
            
            const allPassed = codeResult === 'success' && containerResult === 'success' && infraResult === 'success';
            
            if (allPassed) {
              body += '🎉 All security scans passed! This PR is ready for review.\n';
            } else {
              body += '⚠️ Some security scans failed. Please review the security alerts and fix identified issues.\n\n';
              body += 'Check the [Security tab](../../security) for detailed findings.\n';
            }
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body
            });

  # Notify security team if critical issues found
  notify-security:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [code-security, container-security, infrastructure-security]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          title: '🚨 Security Scan Failure'
          text: |
            Critical security issues detected in monitoring-web-service
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Please review the security alerts immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}