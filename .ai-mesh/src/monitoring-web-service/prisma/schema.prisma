// =====================================================
// Prisma Schema for External Metrics Web Service
// Multi-tenant PostgreSQL database with row-level security
// =====================================================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  output          = "../src/generated/prisma-client"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["public", "tenant_template"]
}

// =====================================================
// Master Tenant Registry (public schema)
// =====================================================

model Tenant {
  // Primary identifier for the tenant
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // Human-readable organization name (required)
  name   String @db.VarChar(255)
  domain String @unique @db.VarChar(255)

  // PostgreSQL schema name for this tenant's data
  schemaName String @unique @map("schema_name") @db.VarChar(63)

  // Subscription plan tier
  subscriptionPlan String @default("basic") @map("subscription_plan") @db.VarChar(50)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Soft delete flag
  isActive Boolean @default(true) @map("is_active")

  // Additional tenant metadata (JSON)
  metadata Json @default("{}") @db.JsonB

  // Contact information
  adminEmail   String? @map("admin_email") @db.VarChar(255)
  billingEmail String? @map("billing_email") @db.VarChar(255)

  // Data residency and compliance settings
  dataRegion         String @default("us-east-1") @map("data_region") @db.VarChar(50)
  complianceSettings Json   @default("{}") @map("compliance_settings") @db.JsonB

  @@map("tenants")
  @@schema("public")
}

// =====================================================
// Per-Tenant Schema Models (tenant_template schema)
// =====================================================

model User {
  // Primary identifier for the user
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // User authentication and contact info
  email     String @unique @db.VarChar(255)
  firstName String @map("first_name") @db.VarChar(100)
  lastName  String @map("last_name") @db.VarChar(100)

  // Role-based access control
  role String @default("developer") @db.VarChar(50)

  // Password-based authentication (optional, for non-SSO users)
  password String? @db.VarChar(255)

  // Single Sign-On integration
  ssoProvider String? @map("sso_provider") @db.VarChar(50)
  ssoUserId   String? @map("sso_user_id") @db.VarChar(255)

  // User activity tracking
  lastLogin  DateTime? @map("last_login") @db.Timestamptz(6)
  loginCount Int       @default(0) @map("login_count")

  // User preferences and settings
  timezone    String @default("UTC") @db.VarChar(50)
  preferences Json   @default("{}") @db.JsonB

  // Account status and metadata
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  metricsSessions   MetricsSession[]
  dashboardConfigs  DashboardConfig[]
  activities        ActivityData[]

  @@map("users")
  @@schema("tenant_template")
}

model MetricsSession {
  // Primary identifier for the session
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // User who owns this session
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Session timing information
  sessionStart    DateTime @map("session_start") @db.Timestamptz(6)
  sessionEnd      DateTime? @map("session_end") @db.Timestamptz(6)
  totalDurationMs BigInt?  @map("total_duration_ms")

  // Session metadata and analysis
  toolsUsed         Json? @map("tools_used") @db.JsonB
  productivityScore Int?  @map("productivity_score")

  // Session categorization and context
  sessionType String  @default("development") @map("session_type") @db.VarChar(50)
  projectId   String? @map("project_id") @db.VarChar(100)
  tags        Json    @default("[]") @map("tags") @db.JsonB

  // Quality metrics
  interruptionsCount Int    @default(0) @map("interruptions_count")
  focusTimeMs        BigInt @default(0) @map("focus_time_ms")

  // Session notes and description
  description String?

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  toolMetrics ToolMetric[]

  @@map("metrics_sessions")
  @@schema("tenant_template")
}

model ToolMetric {
  // Primary identifier for the tool usage record
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // Session this tool usage belongs to
  sessionId String         @map("session_id") @db.Uuid
  session   MetricsSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Tool identification
  toolName     String  @map("tool_name") @db.VarChar(100)
  toolCategory String? @map("tool_category") @db.VarChar(50)

  // Usage statistics
  executionCount   Int    @default(1) @map("execution_count")
  totalDurationMs  BigInt @map("total_duration_ms")
  averageDurationMs BigInt @map("average_duration_ms")

  // Quality and reliability metrics
  successRate Decimal @map("success_rate") @db.Decimal(5, 4)
  errorCount  Int     @default(0) @map("error_count")

  // Performance metrics
  memoryUsageMb Int?    @map("memory_usage_mb")
  cpuTimeMs     BigInt? @map("cpu_time_ms")

  // Tool-specific metadata
  parameters      Json?   @db.JsonB
  outputSizeBytes BigInt? @map("output_size_bytes")

  // Context and categorization
  commandLine      String? @db.Text
  workingDirectory String? @map("working_directory") @db.VarChar(500)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("tool_metrics")
  @@schema("tenant_template")
}

model DashboardConfig {
  // Primary identifier for the dashboard configuration
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // User who owns this dashboard configuration
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Dashboard identification and metadata
  dashboardName String  @map("dashboard_name") @db.VarChar(100)
  description   String?

  // Widget layout and configuration
  widgetLayout Json @map("widget_layout") @db.JsonB

  // Dashboard settings
  isDefault            Boolean @default(false) @map("is_default")
  isPublic             Boolean @default(false) @map("is_public")
  refreshIntervalSeconds Int   @default(30) @map("refresh_interval_seconds")

  // Access and sharing
  sharedWithRoles Json @default("[]") @map("shared_with_roles") @db.JsonB

  // Version control for dashboard evolution
  version Int @default(1)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([userId, isDefault], name: "unique_default_dashboard")
  @@map("dashboard_configs")
  @@schema("tenant_template")
}

model ActivityData {
  // Primary identifier for the activity
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // User who performed the activity
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Activity action details
  actionName        String @map("action_name") @db.VarChar(100)
  actionDescription String @map("action_description") @db.Text

  // Activity target/context
  targetName String @map("target_name") @db.VarChar(200)
  targetType String @default("unknown") @map("target_type") @db.VarChar(50)

  // Activity status and metadata
  status    String @default("success") @db.VarChar(20)
  priority  Int    @default(0)
  isAutomated Boolean @default(false) @map("is_automated")

  // Activity timing
  timestamp   DateTime @default(now()) @db.Timestamptz(6)
  duration    Int?     // Duration in milliseconds
  completedAt DateTime? @map("completed_at") @db.Timestamptz(6)

  // Additional context and metadata
  metadata   Json?   @db.JsonB
  tags       Json    @default("[]") @db.JsonB
  projectId  String? @map("project_id") @db.VarChar(100)

  // Error information (if status is error)
  errorMessage String? @map("error_message") @db.Text
  errorCode    String? @map("error_code") @db.VarChar(50)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("activity_data")
  @@schema("tenant_template")
}