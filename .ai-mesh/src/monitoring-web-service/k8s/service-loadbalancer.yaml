# Load Balancer Services Configuration
# Sprint 8 Task 8.3: Advanced load balancing & auto-scaling
#
# Features:
# - Application Load Balancer (ALB) with AWS Load Balancer Controller
# - Network Load Balancer (NLB) for high-performance scenarios
# - Service Mesh integration with Istio
# - SSL termination and routing rules
# - Health checks and traffic splitting

---
# ClusterIP Service (internal)
apiVersion: v1
kind: Service
metadata:
  name: external-metrics-service
  namespace: fortium-metrics
  labels:
    app: external-metrics-service
    component: backend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: external-metrics-service
    component: backend

---
# Application Load Balancer (ALB) Service
apiVersion: v1
kind: Service
metadata:
  name: external-metrics-service-alb
  namespace: fortium-metrics
  labels:
    app: external-metrics-service
    component: loadbalancer
  annotations:
    # AWS Load Balancer Controller annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "external"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    
    # SSL Configuration
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
    
    # Health checks
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold: "3"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    
    # Performance optimizations
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "300"
    
    # Access logs
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "fortium-metrics-alb-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "external-metrics-service"
    
    # Security groups
    service.beta.kubernetes.io/aws-load-balancer-security-groups: "sg-alb-external-metrics"
    service.beta.kubernetes.io/aws-load-balancer-manage-backend-security-group-rules: "true"
    
    # Sticky sessions (if needed)
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: |
      stickiness.enabled=true,
      stickiness.lb_cookie.duration_seconds=3600,
      deregistration_delay.timeout_seconds=30
spec:
  type: LoadBalancer
  ports:
  - name: https
    port: 443
    targetPort: 3000
    protocol: TCP
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  selector:
    app: external-metrics-service
    component: backend

---
# Network Load Balancer (NLB) for high-performance scenarios
apiVersion: v1
kind: Service
metadata:
  name: external-metrics-service-nlb
  namespace: fortium-metrics
  labels:
    app: external-metrics-service
    component: nlb
  annotations:
    # NLB-specific annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internal"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    
    # Performance optimizations for NLB
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: |
      preserve_client_ip.enabled=true,
      proxy_protocol_v2.enabled=false,
      deregistration_delay.timeout_seconds=30,
      deregistration_delay.connection_termination.enabled=true
    
    # Health checks for NLB
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "6"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold: "2"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: external-metrics-service
    component: backend

---
# Ingress for path-based routing and SSL termination
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: external-metrics-service-ingress
  namespace: fortium-metrics
  labels:
    app: external-metrics-service
  annotations:
    # AWS ALB Ingress Controller annotations
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/group.name: "fortium-metrics"
    
    # SSL Configuration
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:region:account:certificate/cert-id"
    alb.ingress.kubernetes.io/ssl-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # Health checks
    alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP"
    alb.ingress.kubernetes.io/healthcheck-path: "/health"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '10'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    
    # Performance optimizations
    alb.ingress.kubernetes.io/target-group-attributes: |
      stickiness.enabled=true,
      stickiness.lb_cookie.duration_seconds=3600,
      deregistration_delay.timeout_seconds=30,
      slow_start.duration_seconds=30
    
    # Security
    alb.ingress.kubernetes.io/security-groups: "sg-alb-external-metrics"
    alb.ingress.kubernetes.io/manage-backend-security-group-rules: "true"
    
    # Access logs
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=fortium-metrics-alb-logs,
      access_logs.s3.prefix=external-metrics-ingress,
      idle_timeout.timeout_seconds=60,
      routing.http2.enabled=true,
      routing.http.drop_invalid_header_fields.enabled=true
    
    # WAF integration
    alb.ingress.kubernetes.io/wafv2-acl-arn: "arn:aws:wafv2:region:account:regional/webacl/fortium-metrics-waf/id"
    
    # Rate limiting (can be combined with WAF)
    alb.ingress.kubernetes.io/actions.rate-limit: |
      {
        "type": "fixed-response",
        "fixedResponseConfig": {
          "contentType": "text/plain",
          "statusCode": "429",
          "messageBody": "Rate limit exceeded"
        }
      }
spec:
  rules:
  - host: api.fortium-metrics.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: external-metrics-service
            port:
              number: 80
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: external-metrics-service
            port:
              number: 80
      - path: /health
        pathType: Exact
        backend:
          service:
            name: external-metrics-service
            port:
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: external-metrics-service
            port:
              number: 9090
  - host: metrics.fortium.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: external-metrics-service
            port:
              number: 80

---
# Service Monitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: external-metrics-service-monitor
  namespace: fortium-metrics
  labels:
    app: external-metrics-service
    prometheus: kube-prometheus
spec:
  selector:
    matchLabels:
      app: external-metrics-service
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - fortium-metrics

---
# EndpointSlice for advanced traffic management (Istio integration)
apiVersion: v1
kind: Endpoints
metadata:
  name: external-metrics-service-istio
  namespace: fortium-metrics
  labels:
    app: external-metrics-service
    service.istio.io/canonical-name: external-metrics-service
    service.istio.io/canonical-revision: v1
subsets:
- addresses:
  # These will be automatically populated by the service controller
  ports:
  - name: http
    port: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    protocol: TCP

---
# Virtual Service for Istio traffic management
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: external-metrics-service-vs
  namespace: fortium-metrics
spec:
  hosts:
  - api.fortium-metrics.com
  - external-metrics-service.fortium-metrics.svc.cluster.local
  gateways:
  - external-metrics-gateway
  - mesh
  http:
  - match:
    - uri:
        prefix: /api/v1/health
  - match:
    - uri:
        prefix: /health
    route:
    - destination:
        host: external-metrics-service.fortium-metrics.svc.cluster.local
        port:
          number: 80
      weight: 100
    timeout: 5s
    retries:
      attempts: 3
      perTryTimeout: 2s
  - match:
    - uri:
        prefix: /api/v1
    route:
    - destination:
        host: external-metrics-service.fortium-metrics.svc.cluster.local
        port:
          number: 80
      weight: 100
    timeout: 30s
    retries:
      attempts: 2
      perTryTimeout: 10s
    fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 5s
  - match:
    - uri:
        prefix: /metrics
    route:
    - destination:
        host: external-metrics-service.fortium-metrics.svc.cluster.local
        port:
          number: 9090
      weight: 100

---
# Destination Rule for load balancing and circuit breaking
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: external-metrics-service-dr
  namespace: fortium-metrics
spec:
  host: external-metrics-service.fortium-metrics.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN  # Options: ROUND_ROBIN, LEAST_CONN, RANDOM, PASSTHROUGH
    connectionPool:
      tcp:
        maxConnections: 100
        connectTimeout: 30s
        keepAlive:
          time: 7200s
          interval: 75s
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 3
        idleTimeout: 60s
        h2UpgradePolicy: UPGRADE
        useClientProtocol: true
    circuitBreaker:
      consecutiveGatewayErrors: 5
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30
      splitExternalLocalOriginErrors: false
    outlierDetection:
      consecutiveGatewayErrors: 5
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30

---
# Gateway for Istio ingress
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: external-metrics-gateway
  namespace: fortium-metrics
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: fortium-metrics-tls-cert
    hosts:
    - api.fortium-metrics.com
    - metrics.fortium.ai
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - api.fortium-metrics.com
    - metrics.fortium.ai
    tls:
      httpsRedirect: true