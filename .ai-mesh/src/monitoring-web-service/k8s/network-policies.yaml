# Kubernetes Network Policies for Secure Pod Communication
# Task 3.2: Network security and segmentation

---
# Default deny-all network policy for security by default
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: default
  labels:
    app: security
    component: network-policy
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Allow DNS resolution for all pods
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: default
  labels:
    app: security
    component: dns-policy
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Web tier network policy - allows ingress from load balancer
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: web-tier-policy
  namespace: default
  labels:
    app: metrics-web-service
    tier: web
    managed-by: infrastructure-subagent
spec:
  podSelector:
    matchLabels:
      tier: web
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from AWS Load Balancer Controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: aws-load-balancer-controller
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 3000
  # Allow traffic from other web tier pods
  - from:
    - podSelector:
        matchLabels:
          tier: web
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 3000
  egress:
  # Allow communication to application tier
  - to:
    - podSelector:
        matchLabels:
          tier: app
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
  # Allow HTTPS to external services
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Application tier network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: app-tier-policy
  namespace: default
  labels:
    app: metrics-web-service
    tier: app
    managed-by: infrastructure-subagent
spec:
  podSelector:
    matchLabels:
      tier: app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from web tier
  - from:
    - podSelector:
        matchLabels:
          tier: web
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
  # Allow traffic from other app tier pods
  - from:
    - podSelector:
        matchLabels:
          tier: app
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
  # Allow health checks from system namespaces
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080  # Health check endpoint
  egress:
  # Allow communication to data tier (managed databases are accessed via security groups)
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  # Allow HTTPS for external API calls
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow communication to monitoring services
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus
    - protocol: TCP
      port: 3000  # Grafana

---
# Monitoring tier network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-tier-policy
  namespace: monitoring
  labels:
    app: monitoring
    tier: monitoring
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow scraping from Prometheus
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 8080
  # Allow Grafana to query Prometheus
  - from:
    - podSelector:
        matchLabels:
          app: grafana
    ports:
    - protocol: TCP
      port: 9090
  # Allow access to Grafana dashboard
  - from:
    - namespaceSelector:
        matchLabels:
          name: default
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 3000
  egress:
  # Allow Prometheus to scrape targets
  - to:
    - namespaceSelector:
        matchLabels:
          name: default
    ports:
    - protocol: TCP
      port: 8080  # Application metrics
    - protocol: TCP
      port: 9100  # Node exporter
  # Allow alertmanager to send notifications
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 587   # SMTP
    - protocol: TCP
      port: 25    # SMTP

---
# System namespace policies for kube-system
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kube-system-policy
  namespace: kube-system
  labels:
    app: system
    tier: system
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow all ingress for system components
  - from: []
  egress:
  # Allow all egress for system components
  - to: []

---
# Istio service mesh network policies (if using Istio)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: istio-system-policy
  namespace: istio-system
  labels:
    app: istio
    tier: service-mesh
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress gateway traffic
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 15090  # Envoy admin port
  # Allow pilot discovery
  - from:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 15010
    - protocol: TCP
      port: 15011
    - protocol: TCP
      port: 8080
  egress:
  # Allow all egress for Istio components
  - to: []

---
# Development namespace policy (more permissive)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: development-policy
  namespace: development
  labels:
    app: development
    environment: development
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from same namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: development
  # Allow ingress from monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  # Allow all egress for development
  - to: []

---
# Staging namespace policy (production-like but with some debugging access)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: staging-policy
  namespace: staging
  labels:
    app: staging
    environment: staging
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Web tier ingress
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: aws-load-balancer-controller
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  # Monitoring ingress
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  # Same namespace communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: staging
  egress:
  # Database access
  - to: []
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  # HTTPS for external services
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Monitoring egress
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring

---
# Production namespace policy (most restrictive)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: production-policy
  namespace: production
  labels:
    app: production
    environment: production
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Only allow ingress from load balancer
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: aws-load-balancer-controller
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  # Allow monitoring scraping
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080  # Metrics endpoint only
  # Allow same namespace communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: production
  egress:
  # Database access (RDS/ElastiCache are controlled by security groups)
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  # HTTPS for external APIs only
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # No other egress allowed

---
# Network policy for CI/CD namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cicd-policy
  namespace: cicd
  labels:
    app: cicd
    component: pipeline
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow webhook traffic from GitHub/GitLab
  - from: []
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 443
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow deployment to all namespaces
  - to:
    - namespaceSelector: {}
  # Allow external access for Git, Docker registry, etc.
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 22   # Git over SSH

---
# Network policy for security scanning namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: security-scanning-policy
  namespace: security-scanning
  labels:
    app: security-scanning
    component: vulnerability-scanning
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  # Allow same namespace communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: security-scanning
  egress:
  # Allow scanning all namespaces
  - to:
    - namespaceSelector: {}
  # Allow external access for vulnerability databases
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80   # Some vulnerability DBs use HTTP

---
# Network policy validator webhook
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: network-policy-validator
  namespace: kube-system
  labels:
    app: network-policy-validator
    component: admission-controller
    managed-by: infrastructure-subagent
spec:
  podSelector:
    matchLabels:
      app: network-policy-validator
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow webhook traffic from API server
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          component: kube-apiserver
    ports:
    - protocol: TCP
      port: 9443
  egress:
  # Allow validation of network policies across namespaces
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443  # Kubernetes API

---
# Emergency access policy (break-glass procedure)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: emergency-access
  namespace: default
  labels:
    app: emergency
    component: break-glass
    managed-by: infrastructure-subagent
  annotations:
    emergency.fortium.com/expires: "2025-12-31T23:59:59Z"
    emergency.fortium.com/reason: "Emergency access for incident response"
    emergency.fortium.com/approved-by: "security-team"
spec:
  podSelector:
    matchLabels:
      emergency-access: "true"
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow emergency access from designated pods only
  - from:
    - podSelector:
        matchLabels:
          role: incident-response
    ports:
    - protocol: TCP
      port: 22
    - protocol: TCP
      port: 8080
  egress:
  # Allow limited egress for emergency procedures
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 22

---
# Network policy for backup and restore operations
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backup-restore-policy
  namespace: backup
  labels:
    app: backup
    component: backup-restore
    managed-by: infrastructure-subagent
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow backup to external storage
  - to: []
    ports:
    - protocol: TCP
      port: 443  # S3, external backup services
  # Allow database backup
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  # Allow Kubernetes API access for resource backup
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 443