# Kubernetes Service and Ingress for External Metrics Web Service

apiVersion: v1
kind: Service
metadata:
  name: metrics-web-service
  labels:
    app: metrics-web-service
    component: backend
  annotations:
    # AWS Load Balancer Controller annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/api/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "3000"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval-seconds: "30"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout-seconds: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold-count: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold-count: "3"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: https
    port: 443
    targetPort: 3000
    protocol: TCP
  selector:
    app: metrics-web-service
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 86400 # 24 hours

---
# Internal service for pod-to-pod communication
apiVersion: v1
kind: Service
metadata:
  name: metrics-web-service-internal
  labels:
    app: metrics-web-service
    component: backend
    type: internal
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: metrics-web-service

---
# Ingress for advanced routing and SSL termination
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: metrics-web-service-ingress
  labels:
    app: metrics-web-service
  annotations:
    # AWS Load Balancer Controller
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: "fortium-metrics-alb"
    
    # SSL and HTTPS
    alb.ingress.kubernetes.io/certificate-arn: "${SSL_CERTIFICATE_ARN}"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: |
      {
        "Type": "redirect",
        "RedirectConfig": {
          "Protocol": "HTTPS",
          "Port": "443",
          "StatusCode": "HTTP_301"
        }
      }
    
    # Health checks
    alb.ingress.kubernetes.io/healthcheck-path: "/api/health"
    alb.ingress.kubernetes.io/healthcheck-port: "3000"
    alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "10"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    
    # Security
    alb.ingress.kubernetes.io/security-groups: "${ALB_SECURITY_GROUP_ID}"
    alb.ingress.kubernetes.io/wafv2-acl-arn: "${WAF_WEB_ACL_ARN}"
    
    # Performance
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      deletion_protection.enabled=true,
      idle_timeout.timeout_seconds=60,
      routing.http.desync_mitigation_mode=defensive,
      routing.http.preserve_host_header.enabled=true,
      routing.http2.enabled=true
    
    # Tags
    alb.ingress.kubernetes.io/tags: |
      Project=External Metrics Web Service,
      Environment=${ENVIRONMENT},
      ManagedBy=Kubernetes

spec:
  rules:
  # Production domain
  - host: metrics.fortium.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ssl-redirect
            port:
              name: use-annotation
      - path: /
        pathType: Prefix
        backend:
          service:
            name: metrics-web-service
            port:
              number: 3000
  
  # Staging domain
  - host: staging-metrics.fortium.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: metrics-web-service
            port:
              number: 3000
  
  # Health check endpoint (no redirect)
  - http:
      paths:
      - path: /api/health
        pathType: Exact
        backend:
          service:
            name: metrics-web-service
            port:
              number: 3000
      - path: /healthz
        pathType: Exact
        backend:
          service:
            name: metrics-web-service
            port:
              number: 3000

  tls:
  - hosts:
    - metrics.fortium.dev
    - staging-metrics.fortium.dev
    secretName: metrics-tls-secret

---
# Service Monitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: metrics-web-service-monitor
  labels:
    app: metrics-web-service
    team: engineering
spec:
  selector:
    matchLabels:
      app: metrics-web-service
  endpoints:
  - port: http
    path: /api/metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true
    metricRelabelings:
    - sourceLabels: [__name__]
      regex: 'go_.*'
      action: drop
    - sourceLabels: [__name__]
      regex: 'process_.*'
      action: drop

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: metrics-web-service-network-policy
  labels:
    app: metrics-web-service
spec:
  podSelector:
    matchLabels:
      app: metrics-web-service
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow ingress from ALB/NLB
  - from:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          app.kubernetes.io/name: aws-load-balancer-controller
    ports:
    - protocol: TCP
      port: 3000
  
  # Allow ingress from same namespace for internal communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: default
    ports:
    - protocol: TCP
      port: 3000
  
  # Allow Prometheus scraping
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 3000
  
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow HTTPS to external services (APIs, registries)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  
  # Allow database connections
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  
  # Allow connection to AWS services
  - to: []
    ports:
    - protocol: TCP
      port: 443  # AWS API calls