# External Metrics Web Service - Docker Compose Configuration
# Based on TRD Sprint 1 requirements for local development and staging deployment

version: '3.8'

services:
  # Main application service
  metrics-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: fortium-metrics-web-service:latest
    container_name: metrics-api
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-metrics_development}
      - DB_USER=${DB_USER:-metrics_user}
      - DB_PASSWORD=${DB_PASSWORD:-secure_development_password}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Application configuration
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - JWT_SECRET=${JWT_SECRET:-development_jwt_secret_change_in_production}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-development_refresh_secret_change_in_production}
      
      # Performance tuning (from TRD)
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS:-300}
      - MAX_BATCH_SIZE=${MAX_BATCH_SIZE:-1000}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-60000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-1000}
      
      # Real-time processing configuration
      - AGGREGATION_WINDOWS=${AGGREGATION_WINDOWS:-1m,5m,15m,1h,1d}
      - FLUSH_INTERVAL_MS=${FLUSH_INTERVAL_MS:-30000}
      - MAX_MEMORY_MB=${MAX_MEMORY_MB:-512}
      
      # Background jobs configuration
      - DATA_RETENTION_DAYS=${DATA_RETENTION_DAYS:-90}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-300}
      
      # Seq Logging Configuration (Sprint 1: Task 1.4)
      - SEQ_SERVER_URL=${SEQ_SERVER_URL:-http://seq:80}
      - SEQ_API_KEY=${SEQ_API_KEY:-}
      - SEQ_BATCH_SIZE=${SEQ_BATCH_SIZE:-100}
      - SEQ_FLUSH_INTERVAL=${SEQ_FLUSH_INTERVAL:-30000}
      - SEQ_REQUEST_TIMEOUT=${SEQ_REQUEST_TIMEOUT:-10000}
      - SEQ_ENABLE_TLS=${SEQ_ENABLE_TLS:-false}
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      seq:
        condition: service_healthy
    
    networks:
      - metrics-network
    
    volumes:
      # Mount logs directory for persistence
      - metrics-logs:/app/logs
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

  # PostgreSQL with TimescaleDB (from TRD specifications)
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: metrics-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-metrics_development}
      - POSTGRES_USER=${DB_USER:-metrics_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_development_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    ports:
      - "${DB_PORT:-5432}:5432"
    
    volumes:
      # Persistent data storage
      - postgres-data:/var/lib/postgresql/data
      # Custom PostgreSQL configuration
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      # Initialization scripts (commented out for Prisma setup)
      # - ./src/migrations:/docker-entrypoint-initdb.d/
    
    networks:
      - metrics-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-metrics_user} -d ${DB_NAME:-metrics_development}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Performance optimization for development
    command: |
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis for caching and session management (from TRD)
  redis:
    image: redis:7-alpine
    container_name: metrics-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    
    volumes:
      - redis-data:/data
      - ./database/redis.conf:/etc/redis/redis.conf:ro
    
    networks:
      - metrics-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    # Redis configuration for production-ready setup
    command: |
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec

  # Development database admin interface (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: metrics-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@fortium.dev}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin_password}
      - PGADMIN_CONFIG_SERVER_MODE=False
    
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    
    networks:
      - metrics-network
    
    depends_on:
      postgres:
        condition: service_healthy
    
    restart: unless-stopped
    
    profiles:
      - development  # Only start with --profile development

  # Redis Commander for Redis management (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: metrics-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    
    networks:
      - metrics-network
    
    depends_on:
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    profiles:
      - development  # Only start with --profile development

  # Seq Structured Logging Server (Sprint 1: Task 1.4)
  seq:
    image: datalust/seq:2024.3
    container_name: metrics-seq
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINPASSWORDHASH=${SEQ_ADMIN_PASSWORD_HASH:-}
      - SEQ_FIRSTRUN_ADMINUSERNAME=${SEQ_ADMIN_USERNAME:-admin}
      # Enable anonymous ingestion for development
      - SEQ_API_CANONFIGUREAUTHENTICATION=True
    
    ports:
      - "${SEQ_PORT:-5341}:80"
      - "${SEQ_INGESTION_PORT:-45341}:45341"  # Ingestion API
    
    volumes:
      - seq-data:/data
      - seq-logs:/var/log/seq
      # Configuration for production-ready settings
      - ./seq/seq.json:/etc/seq/seq.json:ro
    
    networks:
      - metrics-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/version"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5
    
    # Resource limits for development
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

# Named volumes for data persistence
volumes:
  postgres-data:
    driver: local
    name: metrics-postgres-data
  
  redis-data:
    driver: local
    name: metrics-redis-data
  
  pgadmin-data:
    driver: local
    name: metrics-pgadmin-data
  
  metrics-logs:
    driver: local
    name: metrics-app-logs
  
  seq-data:
    driver: local
    name: metrics-seq-data
  
  seq-logs:
    driver: local
    name: metrics-seq-logs

# Custom network for service communication
networks:
  metrics-network:
    driver: bridge
    name: metrics-network
    ipam:
      config:
        - subnet: 172.20.0.0/16