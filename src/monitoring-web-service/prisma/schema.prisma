generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma-client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas           = ["public", "tenant_template"]
}

model Tenant {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String   @db.VarChar(255)
  domain             String   @unique @db.VarChar(255)
  schemaName         String   @unique @map("schema_name") @db.VarChar(63)
  subscriptionPlan   String   @default("basic") @map("subscription_plan") @db.VarChar(50)
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  isActive           Boolean  @default(true) @map("is_active")
  metadata           Json     @default("{}")
  adminEmail         String?  @map("admin_email") @db.VarChar(255)
  billingEmail       String?  @map("billing_email") @db.VarChar(255)
  dataRegion         String   @default("us-east-1") @map("data_region") @db.VarChar(50)
  complianceSettings Json     @default("{}") @map("compliance_settings")

  @@map("tenants")
  @@schema("public")
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String            @unique @db.VarChar(255)
  firstName        String            @map("first_name") @db.VarChar(100)
  lastName         String            @map("last_name") @db.VarChar(100)
  role             String            @default("developer") @db.VarChar(50)
  ssoProvider      String?           @map("sso_provider") @db.VarChar(50)
  ssoUserId        String?           @map("sso_user_id") @db.VarChar(255)
  lastLogin        DateTime?         @map("last_login") @db.Timestamptz(6)
  loginCount       Int               @default(0) @map("login_count")
  timezone         String            @default("UTC") @db.VarChar(50)
  preferences      Json              @default("{}")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  password         String?           @db.VarChar(255)
  activities       ActivityData[]
  dashboardConfigs DashboardConfig[]
  metricsSessions  MetricsSession[]

  @@map("users")
  @@schema("tenant_template")
}

model MetricsSession {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String       @map("user_id") @db.Uuid
  sessionStart       DateTime     @map("session_start") @db.Timestamptz(6)
  sessionEnd         DateTime?    @map("session_end") @db.Timestamptz(6)
  totalDurationMs    BigInt?      @map("total_duration_ms")
  toolsUsed          Json?        @map("tools_used")
  productivityScore  Int?         @map("productivity_score")
  sessionType        String       @default("development") @map("session_type") @db.VarChar(50)
  projectId          String?      @map("project_id") @db.VarChar(100)
  tags               Json         @default("[]") @map("tags")
  interruptionsCount Int          @default(0) @map("interruptions_count")
  focusTimeMs        BigInt       @default(0) @map("focus_time_ms")
  description        String?
  createdAt          DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  toolMetrics        ToolMetric[]

  @@map("metrics_sessions")
  @@schema("tenant_template")
}

model ToolMetric {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId         String         @map("session_id") @db.Uuid
  toolName          String         @map("tool_name") @db.VarChar(100)
  toolCategory      String?        @map("tool_category") @db.VarChar(50)
  executionCount    Int            @default(1) @map("execution_count")
  totalDurationMs   BigInt         @map("total_duration_ms")
  averageDurationMs BigInt         @map("average_duration_ms")
  successRate       Decimal        @map("success_rate") @db.Decimal(5, 4)
  errorCount        Int            @default(0) @map("error_count")
  memoryUsageMb     Int?           @map("memory_usage_mb")
  cpuTimeMs         BigInt?        @map("cpu_time_ms")
  parameters        Json?
  outputSizeBytes   BigInt?        @map("output_size_bytes")
  workingDirectory  String?        @map("working_directory") @db.VarChar(500)
  createdAt         DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  commandLine       String?
  session           MetricsSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("tool_metrics")
  @@schema("tenant_template")
}

model DashboardConfig {
  id                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                 String   @map("user_id") @db.Uuid
  dashboardName          String   @map("dashboard_name") @db.VarChar(100)
  description            String?
  widgetLayout           Json     @map("widget_layout")
  isDefault              Boolean  @default(false) @map("is_default")
  isPublic               Boolean  @default(false) @map("is_public")
  refreshIntervalSeconds Int      @default(30) @map("refresh_interval_seconds")
  sharedWithRoles        Json     @default("[]") @map("shared_with_roles")
  version                Int      @default(1)
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, isDefault], name: "unique_default_dashboard")
  @@map("dashboard_configs")
  @@schema("tenant_template")
}

model ActivityData {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String              @map("user_id") @db.Uuid
  actionName        String              @map("action_name") @db.VarChar(100)
  actionDescription String              @map("action_description")
  targetName        String              @map("target_name") @db.VarChar(200)
  targetType        String              @default("unknown") @map("target_type") @db.VarChar(50)
  status            String              @default("success") @db.VarChar(20)
  priority          Int                 @default(0)
  isAutomated       Boolean             @default(false) @map("is_automated")
  timestamp         DateTime            @default(now()) @db.Timestamptz(6)
  duration          Int?
  completedAt       DateTime?           @map("completed_at") @db.Timestamptz(6)
  metadata          Json?
  tags              Json                @default("[]")
  projectId         String?             @map("project_id") @db.VarChar(100)
  errorMessage      String?             @map("error_message")
  errorCode         String?             @map("error_code") @db.VarChar(50)
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Enhanced context fields
  enhancedContext   Json?               @map("enhanced_context")
  performanceMetrics Json?              @map("performance_metrics")
  inputData         Json?               @map("input_data")
  outputData        Json?               @map("output_data")
  errorDetails      Json?               @map("error_details")
  correlationData   Json?               @map("correlation_data")
  businessImpact    Json?               @map("business_impact")

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflowsAsRoot   ActivityWorkflow[]  @relation("WorkflowRootActivity")

  @@map("activity_data")
  @@schema("tenant_template")
}

model ActivityWorkflow {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflowId      String        @map("workflow_id") @db.VarChar(255)
  name            String?       @db.VarChar(255)
  description     String?
  rootActivityId  String?       @map("root_activity_id") @db.Uuid
  status          String        @default("active") @db.VarChar(50)
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  metadata        Json          @default("{}")

  rootActivity    ActivityData? @relation("WorkflowRootActivity", fields: [rootActivityId], references: [id], onDelete: SetNull)

  @@map("activity_workflows")
  @@schema("tenant_template")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model auth_audit_log {
  id              String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organization_id String?        @db.Uuid
  user_id         String?        @db.Uuid
  event_type      String         @db.VarChar(50)
  event_details   Json           @default("{}")
  ip_address      String?        @db.Inet
  user_agent      String?
  success         Boolean
  error_message   String?
  timestamp       DateTime?      @default(now()) @db.Timestamptz(6)
  organizations   organizations? @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  users           users?         @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([event_type, timestamp(sort: Desc)], map: "idx_auth_audit_event_type")
  @@index([organization_id, timestamp(sort: Desc)], map: "idx_auth_audit_org_time")
  @@index([user_id, timestamp(sort: Desc)], map: "idx_auth_audit_user_time")
  @@schema("public")
}

model organizations {
  id                  String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                String             @db.VarChar(255)
  slug                String             @unique @db.VarChar(100)
  settings            Json               @default("{}")
  data_retention_days Int                @default(365)
  max_users           Int?
  max_teams           Int?
  created_at          DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?          @default(now()) @db.Timestamptz(6)
  auth_audit_log      auth_audit_log[]
  projects            projects[]
  refresh_tokens      refresh_tokens[]
  sso_providers       sso_providers[]
  team_memberships    team_memberships[]
  teams               teams[]
  user_sessions       user_sessions[]
  users               users[]

  @@index([created_at], map: "idx_organizations_created_at")
  @@index([slug], map: "idx_organizations_slug")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model projects {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organization_id String        @db.Uuid
  team_id         String        @db.Uuid
  name            String        @db.VarChar(255)
  description     String?
  repository_url  String?       @db.VarChar(500)
  settings        Json          @default("{}")
  status          String        @default("active") @db.VarChar(50)
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?     @default(now()) @db.Timestamptz(6)
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  teams           teams         @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([organization_id, team_id, name])
  @@index([team_id], map: "idx_projects_team")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  jti             String        @unique @db.Uuid
  user_id         String        @db.Uuid
  organization_id String        @db.Uuid
  token_family    String        @db.VarChar(255)
  expires_at      DateTime      @db.Timestamptz(6)
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires_at], map: "idx_refresh_tokens_expires")
  @@index([jti], map: "idx_refresh_tokens_jti")
  @@index([organization_id], map: "idx_refresh_tokens_org")
  @@index([user_id], map: "idx_refresh_tokens_user")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sso_providers {
  id                      String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organization_id         String        @db.Uuid
  provider_name           String        @db.VarChar(50)
  provider_type           String        @db.VarChar(50)
  client_id               String        @db.VarChar(255)
  client_secret_encrypted String?
  discovery_url           String?       @db.VarChar(500)
  redirect_uri            String        @db.VarChar(500)
  scopes                  Json          @default("[]")
  additional_config       Json          @default("{}")
  is_active               Boolean       @default(true)
  created_at              DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?     @default(now()) @db.Timestamptz(6)
  organizations           organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([organization_id, provider_name])
  @@index([organization_id], map: "idx_sso_providers_org")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model team_memberships {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organization_id String        @db.Uuid
  team_id         String        @db.Uuid
  user_id         String        @db.Uuid
  role            String        @default("member") @db.VarChar(50)
  joined_at       DateTime?     @default(now()) @db.Timestamptz(6)
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  teams           teams         @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([team_id, user_id])
  @@index([organization_id, user_id], map: "idx_team_memberships_org_user")
  @@index([team_id], map: "idx_team_memberships_team")
  @@index([user_id], map: "idx_team_memberships_user")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model teams {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organization_id  String             @db.Uuid
  name             String             @db.VarChar(255)
  description      String?
  settings         Json               @default("{}")
  is_active        Boolean            @default(true)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  projects         projects[]
  team_memberships team_memberships[]
  organizations    organizations      @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([organization_id, name])
  @@index([organization_id], map: "idx_teams_organization")
  @@schema("public")
}

model token_blacklist {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  jti            String    @unique @db.Uuid
  blacklisted_at DateTime? @default(now()) @db.Timestamptz(6)
  expires_at     DateTime  @db.Timestamptz(6)

  @@index([expires_at], map: "idx_token_blacklist_expires")
  @@index([jti], map: "idx_token_blacklist_jti")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_sessions {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id         String        @db.Uuid
  organization_id String        @db.Uuid
  session_token   String        @unique @db.VarChar(255)
  ip_address      String?       @db.Inet
  user_agent      String?
  last_activity   DateTime?     @default(now()) @db.Timestamptz(6)
  expires_at      DateTime      @db.Timestamptz(6)
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([last_activity], map: "idx_user_sessions_activity")
  @@index([expires_at], map: "idx_user_sessions_expires")
  @@index([session_token], map: "idx_user_sessions_token")
  @@index([user_id], map: "idx_user_sessions_user")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organization_id   String             @db.Uuid
  email             String             @db.VarChar(255)
  name              String             @db.VarChar(255)
  password_hash     String?            @db.VarChar(255)
  role              String             @db.VarChar(50)
  external_id       String?            @db.VarChar(255)
  external_provider String?            @db.VarChar(50)
  settings          Json               @default("{}")
  is_active         Boolean            @default(true)
  email_verified    Boolean            @default(false)
  last_login_at     DateTime?          @db.Timestamptz(6)
  created_at        DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?          @default(now()) @db.Timestamptz(6)
  auth_audit_log    auth_audit_log[]
  refresh_tokens    refresh_tokens[]
  team_memberships  team_memberships[]
  user_sessions     user_sessions[]
  organizations     organizations      @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([external_provider, external_id])
  @@unique([organization_id, email])
  @@index([organization_id, email], map: "idx_users_org_email")
  @@index([organization_id, role], map: "idx_users_org_role")
  @@schema("public")
}
