<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="24" failures="0" errors="0" time="1.127">
  <testsuite name="JWTService" errors="0" failures="0" skipped="24" timestamp="2025-09-07T23:05:57" time="0.034" tests="24">
    <testcase classname="JWTService › generateTokenPair should generate valid JWT token pair" name="JWTService › generateTokenPair should generate valid JWT token pair" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › generateTokenPair should include correct permissions for developer role" name="JWTService › generateTokenPair should include correct permissions for developer role" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › generateTokenPair should include team lead permissions for team leads" name="JWTService › generateTokenPair should include team lead permissions for team leads" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › generateTokenPair should handle admin role with full permissions" name="JWTService › generateTokenPair should handle admin role with full permissions" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › verifyAccessToken should verify valid access token" name="JWTService › verifyAccessToken should verify valid access token" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › verifyAccessToken should reject blacklisted tokens" name="JWTService › verifyAccessToken should reject blacklisted tokens" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › verifyAccessToken should reject expired tokens" name="JWTService › verifyAccessToken should reject expired tokens" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › verifyAccessToken should reject tampered tokens" name="JWTService › verifyAccessToken should reject tampered tokens" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › refreshAccessToken should refresh valid refresh token" name="JWTService › refreshAccessToken should refresh valid refresh token" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › refreshAccessToken should reject invalid refresh token" name="JWTService › refreshAccessToken should reject invalid refresh token" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › refreshAccessToken should reject refresh token not in database" name="JWTService › refreshAccessToken should reject refresh token not in database" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › hasPermission should allow owner full access" name="JWTService › hasPermission should allow owner full access" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › hasPermission should allow admin resource-specific access" name="JWTService › hasPermission should allow admin resource-specific access" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › hasPermission should evaluate permission conditions correctly" name="JWTService › hasPermission should evaluate permission conditions correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › hasPermission should deny access when no matching permission" name="JWTService › hasPermission should deny access when no matching permission" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › token revocation should revoke access token" name="JWTService › token revocation should revoke access token" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › token revocation should revoke refresh token" name="JWTService › token revocation should revoke refresh token" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › token revocation should revoke all user tokens" name="JWTService › token revocation should revoke all user tokens" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › token cleanup should clean up expired tokens" name="JWTService › token cleanup should clean up expired tokens" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › error handling should handle database errors gracefully" name="JWTService › error handling should handle database errors gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="JWTService › error handling should handle malformed tokens" name="JWTService › error handling should handle malformed tokens" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Role-based Permission System › permission inheritance should inherit team lead permissions for managers" name="Role-based Permission System › permission inheritance should inherit team lead permissions for managers" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Role-based Permission System › permission inheritance should not add team lead permissions for regular team members" name="Role-based Permission System › permission inheritance should not add team lead permissions for regular team members" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Role-based Permission System › complex permission scenarios should handle multiple team memberships correctly" name="Role-based Permission System › complex permission scenarios should handle multiple team memberships correctly" time="0">
      <skipped/>
    </testcase>
  </testsuite>
</testsuites>