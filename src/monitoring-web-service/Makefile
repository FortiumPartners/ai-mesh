# Fortium AI-Augmented Development - Monitoring Web Service
# Makefile for managing backend, websocket, and frontend services

.PHONY: help install dev start stop backend frontend websocket test clean logs status health signoz-start signoz-stop signoz-logs signoz-clean signoz-validate otel-test

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Default target
help:
	@echo "$(BLUE)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(BLUE)‚ïë$(NC)  $(GREEN)Fortium Monitoring Web Service - Development Commands$(NC)       $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£$(NC)"
	@echo "$(BLUE)‚ïë$(NC) $(YELLOW)Development:$(NC)                                                   $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make install    - Install all dependencies                   $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make dev        - Start all services in development mode     $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make start      - Start all services (alias for dev)         $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make stop       - Stop all running services                  $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)                                                                 $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC) $(YELLOW)Individual Services:$(NC)                                           $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make backend    - Start backend/websocket server only        $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make frontend   - Start frontend dev server only             $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)                                                                 $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC) $(YELLOW)Testing & Monitoring:$(NC)                                          $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make test       - Run all tests                              $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make logs       - Show logs from all services                $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make status     - Check service status                       $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make health     - Check backend health endpoint              $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)                                                                 $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC) $(YELLOW)SignOz Observability:$(NC)                                          $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make signoz-start   - Start SignOz observability stack       $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make signoz-stop    - Stop SignOz services                   $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make signoz-logs    - View SignOz logs                       $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make signoz-clean   - Clean SignOz data (caution!)           $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make signoz-validate - Validate SignOz integration           $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make otel-test      - Test OpenTelemetry integration         $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)                                                                 $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC) $(YELLOW)Maintenance:$(NC)                                                   $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make clean      - Clean build artifacts and logs             $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make restart    - Restart all services                       $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïë$(NC)   make db-reset   - Reset database (caution!)                  $(BLUE)‚ïë$(NC)"
	@echo "$(BLUE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"

# Install all dependencies
install:
	@echo "$(YELLOW)üì¶ Installing backend dependencies...$(NC)"
	@npm install
	@echo "$(YELLOW)üì¶ Installing frontend dependencies...$(NC)"
	@cd frontend && npm install
	@echo "$(GREEN)‚úÖ All dependencies installed successfully!$(NC)"

# Start all services in development mode with hot reload
dev:
	@echo "$(BLUE)üöÄ Starting all services in development mode with hot reload...$(NC)"
	@make -j 2 backend-watch-bg frontend-bg
	@echo "$(GREEN)‚úÖ All services started with hot reload!$(NC)"
	@echo ""
	@echo "$(BLUE)üìä Service URLs:$(NC)"
	@echo "  Backend API:  $(GREEN)http://localhost:3001$(NC)"
	@echo "  Frontend:     $(GREEN)http://localhost:3000$(NC)"
	@echo "  Health Check: $(GREEN)http://localhost:3001/health$(NC)"
	@echo "  WebSocket:    $(GREEN)ws://localhost:3001$(NC)"
	@echo ""
	@echo "$(YELLOW)üî• Hot reload enabled - changes will auto-restart services$(NC)"
	@echo "$(YELLOW)Press Ctrl+C to stop all services$(NC)"
	@tail -f /dev/null

# Alias for dev
start: dev

# Start backend/websocket server in background
backend-bg:
	@echo "$(YELLOW)üîß Starting backend/websocket server...$(NC)"
	@PORT=3001 npx tsx src/app.ts 2>&1 | sed 's/^/[BACKEND] /' &

# Start backend/websocket server with hot reload in background
backend-watch-bg:
	@echo "$(YELLOW)üîß Starting backend/websocket server with hot reload...$(NC)"
	@PORT=3001 npx tsx watch src/app.ts 2>&1 | sed 's/^/[BACKEND] /' &

# Start frontend in background
frontend-bg:
	@echo "$(YELLOW)üé® Starting frontend dev server...$(NC)"
	@cd frontend && npm run dev 2>&1 | sed 's/^/[FRONTEND] /' &

# Start backend/websocket server only
backend:
	@echo "$(YELLOW)üîß Starting backend/websocket server...$(NC)"
	PORT=3001 npx tsx src/app.ts

# Start frontend only
frontend:
	@echo "$(YELLOW)üé® Starting frontend dev server...$(NC)"
	cd frontend && npm run dev

# Start websocket server (alias for backend)
websocket: backend

# Stop all services
stop:
	@echo "$(RED)üõë Stopping all services...$(NC)"
	@pkill -f "tsx src/app.ts" || true
	@pkill -f "vite" || true
	@lsof -ti:3001 | xargs kill -9 2>/dev/null || true
	@lsof -ti:3000 | xargs kill -9 2>/dev/null || true
	@echo "$(GREEN)‚úÖ All services stopped$(NC)"

# Restart all services
restart:
	@make stop
	@sleep 2
	@make dev

# Run tests
test:
	@echo "$(YELLOW)üß™ Running backend tests...$(NC)"
	@npm test
	@echo "$(YELLOW)üß™ Running frontend tests...$(NC)"
	@cd frontend && npm test

# Show logs from all services
logs:
	@echo "$(BLUE)üìã Showing recent logs...$(NC)"
	@tail -f *.log 2>/dev/null || echo "$(YELLOW)No log files found. Services may be using console output.$(NC)"

# Check service status
status:
	@echo "$(BLUE)üìä Service Status:$(NC)"
	@echo -n "Backend (port 3001): "
	@if lsof -Pi :3001 -sTCP:LISTEN -t >/dev/null ; then \
		echo "$(GREEN)‚úÖ Running$(NC)"; \
	else \
		echo "$(RED)‚ùå Stopped$(NC)"; \
	fi
	@echo -n "Frontend (port 3000): "
	@if lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null ; then \
		echo "$(GREEN)‚úÖ Running$(NC)"; \
	else \
		echo "$(RED)‚ùå Stopped$(NC)"; \
	fi

# Check backend health
health:
	@echo "$(BLUE)üè• Checking backend health...$(NC)"
	@curl -s http://localhost:3001/health | jq '.' || echo "$(RED)‚ùå Backend is not responding$(NC)"

# Clean build artifacts and logs
clean:
	@echo "$(YELLOW)üßπ Cleaning build artifacts...$(NC)"
	@rm -rf dist/
	@rm -rf frontend/dist/
	@rm -rf node_modules/.cache/
	@rm -rf frontend/node_modules/.cache/
	@rm -f *.log
	@echo "$(GREEN)‚úÖ Clean complete$(NC)"

# Database reset (caution!)
db-reset:
	@echo "$(RED)‚ö†Ô∏è  WARNING: This will reset the database!$(NC)"
	@echo "Press Ctrl+C to cancel, or wait 5 seconds to continue..."
	@sleep 5
	@echo "$(YELLOW)üóÑÔ∏è  Resetting database...$(NC)"
	@npx prisma migrate reset --force
	@echo "$(GREEN)‚úÖ Database reset complete$(NC)"

# Build for production
build:
	@echo "$(YELLOW)üèóÔ∏è  Building backend...$(NC)"
	@npm run build
	@echo "$(YELLOW)üèóÔ∏è  Building frontend...$(NC)"
	@cd frontend && npm run build
	@echo "$(GREEN)‚úÖ Build complete$(NC)"

# Run in production mode
prod:
	@echo "$(BLUE)üöÄ Starting in production mode...$(NC)"
	@NODE_ENV=production node dist/server-websocket.js &
	@cd frontend && npm run preview &
	@echo "$(GREEN)‚úÖ Production servers started$(NC)"

# Docker commands
docker-up:
	@echo "$(BLUE)üê≥ Starting services with Docker Compose...$(NC)"
	@docker-compose up -d
	@echo "$(GREEN)‚úÖ Docker services started$(NC)"

docker-down:
	@echo "$(RED)üê≥ Stopping Docker services...$(NC)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ Docker services stopped$(NC)"

docker-logs:
	@docker-compose logs -f

# Development with auto-reload
watch:
	@echo "$(BLUE)üëÅÔ∏è  Starting services with auto-reload...$(NC)"
	@make -j 2 backend-watch frontend-bg

backend-watch:
	@echo "$(YELLOW)üîß Starting backend with auto-reload...$(NC)"
	@PORT=3001 npx tsx watch src/app.ts

# Seed test data
seed:
	@echo "$(YELLOW)üå± Seeding test data...$(NC)"
	@npx tsx scripts/seed-test-data.ts
	@echo "$(GREEN)‚úÖ Test data seeded$(NC)"

# Open dashboard in browser
open:
	@echo "$(BLUE)üåê Opening dashboard in browser...$(NC)"
	@open http://localhost:5173 || xdg-open http://localhost:5173 || echo "Please open http://localhost:5173 in your browser"

# Quick start (install, then dev)
quickstart: install dev open

# Check if all prerequisites are installed
check-deps:
	@echo "$(BLUE)üîç Checking dependencies...$(NC)"
	@command -v node >/dev/null 2>&1 || { echo "$(RED)‚ùå Node.js is not installed$(NC)"; exit 1; }
	@command -v npm >/dev/null 2>&1 || { echo "$(RED)‚ùå npm is not installed$(NC)"; exit 1; }
	@echo "$(GREEN)‚úÖ All dependencies found$(NC)"
	@echo "  Node version: $$(node --version)"
	@echo "  npm version: $$(npm --version)"

# SignOz Observability Platform Commands
signoz-start:
	@echo "$(BLUE)üîç Starting SignOz observability stack...$(NC)"
	@docker-compose -f docker-compose.signoz.yml up -d
	@echo "$(GREEN)‚úÖ SignOz services starting...$(NC)"
	@echo "$(YELLOW)üìä SignOz UI will be available at: http://localhost:3301$(NC)"
	@echo "$(YELLOW)üîó OTLP Endpoint: http://localhost:4318$(NC)"
	@echo "$(YELLOW)‚è≥ Please wait 60-90 seconds for all services to be ready$(NC)"

signoz-stop:
	@echo "$(BLUE)üõë Stopping SignOz observability stack...$(NC)"
	@docker-compose -f docker-compose.signoz.yml down
	@echo "$(GREEN)‚úÖ SignOz services stopped$(NC)"

signoz-logs:
	@echo "$(BLUE)üìã Showing SignOz service logs...$(NC)"
	@docker-compose -f docker-compose.signoz.yml logs -f

signoz-clean:
	@echo "$(RED)‚ö†Ô∏è  WARNING: This will delete all SignOz data including traces and metrics!$(NC)"
	@read -p "Are you sure? Type 'yes' to continue: " confirm && [ "$$confirm" = "yes" ] || exit 1
	@echo "$(BLUE)üßπ Cleaning SignOz data and containers...$(NC)"
	@docker-compose -f docker-compose.signoz.yml down -v
	@docker system prune -f
	@echo "$(GREEN)‚úÖ SignOz data cleaned$(NC)"

signoz-validate:
	@echo "$(BLUE)üîç Validating SignOz integration...$(NC)"
	@npx tsx scripts/validate-signoz-integration.ts

otel-test:
	@echo "$(BLUE)üß™ Testing OpenTelemetry integration...$(NC)"
	@npx tsx scripts/test-otel-integration.ts

# Combined observability setup
observability-setup: signoz-start
	@echo "$(YELLOW)‚è≥ Waiting for SignOz to initialize...$(NC)"
	@sleep 60
	@make signoz-validate
	@echo "$(GREEN)üéâ SignOz observability platform is ready!$(NC)"
	@echo "$(CYAN)üìä Access SignOz UI: http://localhost:3301$(NC)"
	@echo "$(CYAN)üîç Generate test data: make otel-test$(NC)"

# Start application with observability
dev-otel: signoz-start
	@echo "$(YELLOW)‚è≥ Waiting for SignOz services...$(NC)"
	@sleep 30
	@echo "$(BLUE)üöÄ Starting application with OpenTelemetry...$(NC)"
	@npm run dev:otel