# Production-ready Kubernetes Deployment Template
# Security-hardened with resource limits, health checks, and best practices
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ APP_NAME }}
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    version: {{ VERSION | default("1.0.0") }}
    component: {{ COMPONENT | default("application") }}
    managed-by: infrastructure-management-subagent
  annotations:
    deployment.kubernetes.io/revision: "1"
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    infrastructure.fortium.io/template-version: "1.0"
    infrastructure.fortium.io/security-validated: "true"
spec:
  replicas: {{ REPLICAS | default(3) }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ APP_NAME }}
  template:
    metadata:
      labels:
        app: {{ APP_NAME }}
        version: {{ VERSION | default("1.0.0") }}
        component: {{ COMPONENT | default("application") }}
      annotations:
        # Security and monitoring annotations
        prometheus.io/scrape: "{{ ENABLE_METRICS | default('true') }}"
        prometheus.io/port: "{{ METRICS_PORT | default('8080') }}"
        prometheus.io/path: "{{ METRICS_PATH | default('/metrics') }}"
    spec:
      # Security Context (Pod level)
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ RUN_AS_USER | default(1001) }}
        runAsGroup: {{ RUN_AS_GROUP | default(3000) }}
        fsGroup: {{ FS_GROUP | default(2000) }}
        seccompProfile:
          type: RuntimeDefault
      
      # Service Account (if specified)
      {% if SERVICE_ACCOUNT %}
      serviceAccountName: {{ SERVICE_ACCOUNT }}
      {% endif %}
      
      # Node Selection (if specified)
      {% if NODE_SELECTOR %}
      nodeSelector:
        {{ NODE_SELECTOR | to_yaml | indent(8) }}
      {% endif %}
      
      # Pod Disruption Budget considerations
      {% if AFFINITY_RULES %}
      affinity:
        {{ AFFINITY_RULES | to_yaml | indent(8) }}
      {% endif %}
      
      # Tolerations (if specified)
      {% if TOLERATIONS %}
      tolerations:
        {{ TOLERATIONS | to_yaml | indent(8) }}
      {% endif %}
      
      # Init containers (if needed)
      {% if INIT_CONTAINERS %}
      initContainers:
        {{ INIT_CONTAINERS | to_yaml | indent(8) }}
      {% endif %}
      
      containers:
      - name: {{ CONTAINER_NAME | default(APP_NAME) }}
        image: {{ IMAGE }}:{{ IMAGE_TAG | default("latest") }}
        imagePullPolicy: {{ IMAGE_PULL_POLICY | default("Always") }}
        
        # Security Context (Container level)
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: {{ READ_ONLY_ROOT | default(true) }}
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
            {% if REQUIRED_CAPABILITIES %}
            add:
              {{ REQUIRED_CAPABILITIES | to_yaml | indent(14) }}
            {% endif %}
        
        # Resource Management
        resources:
          requests:
            memory: {{ MEMORY_REQUEST | default("256Mi") }}
            cpu: {{ CPU_REQUEST | default("100m") }}
            {% if EPHEMERAL_STORAGE_REQUEST %}
            ephemeral-storage: {{ EPHEMERAL_STORAGE_REQUEST }}
            {% endif %}
          limits:
            memory: {{ MEMORY_LIMIT | default("512Mi") }}
            cpu: {{ CPU_LIMIT | default("500m") }}
            {% if EPHEMERAL_STORAGE_LIMIT %}
            ephemeral-storage: {{ EPHEMERAL_STORAGE_LIMIT }}
            {% endif %}
        
        # Application Port Configuration
        ports:
        - name: http
          containerPort: {{ HTTP_PORT | default(8080) }}
          protocol: TCP
        {% if ADDITIONAL_PORTS %}
        {% for port in ADDITIONAL_PORTS %}
        - name: {{ port.name }}
          containerPort: {{ port.port }}
          protocol: {{ port.protocol | default("TCP") }}
        {% endfor %}
        {% endif %}
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: {{ LIVENESS_PATH | default("/health") }}
            port: {{ LIVENESS_PORT | default("http") }}
            scheme: {{ LIVENESS_SCHEME | default("HTTP") }}
          initialDelaySeconds: {{ LIVENESS_INITIAL_DELAY | default(30) }}
          periodSeconds: {{ LIVENESS_PERIOD | default(10) }}
          timeoutSeconds: {{ LIVENESS_TIMEOUT | default(5) }}
          successThreshold: {{ LIVENESS_SUCCESS_THRESHOLD | default(1) }}
          failureThreshold: {{ LIVENESS_FAILURE_THRESHOLD | default(3) }}
        
        readinessProbe:
          httpGet:
            path: {{ READINESS_PATH | default("/ready") }}
            port: {{ READINESS_PORT | default("http") }}
            scheme: {{ READINESS_SCHEME | default("HTTP") }}
          initialDelaySeconds: {{ READINESS_INITIAL_DELAY | default(5) }}
          periodSeconds: {{ READINESS_PERIOD | default(5) }}
          timeoutSeconds: {{ READINESS_TIMEOUT | default(3) }}
          successThreshold: {{ READINESS_SUCCESS_THRESHOLD | default(1) }}
          failureThreshold: {{ READINESS_FAILURE_THRESHOLD | default(3) }}
        
        # Startup Probe (for slow-starting applications)
        {% if ENABLE_STARTUP_PROBE %}
        startupProbe:
          httpGet:
            path: {{ STARTUP_PATH | default("/health") }}
            port: {{ STARTUP_PORT | default("http") }}
          initialDelaySeconds: {{ STARTUP_INITIAL_DELAY | default(10) }}
          periodSeconds: {{ STARTUP_PERIOD | default(10) }}
          timeoutSeconds: {{ STARTUP_TIMEOUT | default(5) }}
          failureThreshold: {{ STARTUP_FAILURE_THRESHOLD | default(30) }}
        {% endif %}
        
        # Environment Variables
        env:
        # Application-specific environment variables
        {% if ENVIRONMENT_VARIABLES %}
        {% for env in ENVIRONMENT_VARIABLES %}
        - name: {{ env.name }}
          {% if env.value %}
          value: "{{ env.value }}"
          {% elif env.valueFrom %}
          valueFrom:
            {{ env.valueFrom | to_yaml | indent(12) }}
          {% endif %}
        {% endfor %}
        {% endif %}
        
        # Standard observability environment variables
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Environment variable sources (ConfigMaps and Secrets)
        {% if CONFIG_MAPS %}
        envFrom:
        {% for configmap in CONFIG_MAPS %}
        - configMapRef:
            name: {{ configmap.name }}
            {% if configmap.optional %}
            optional: {{ configmap.optional }}
            {% endif %}
        {% endfor %}
        {% endif %}
        
        {% if SECRETS %}
        {% for secret in SECRETS %}
        - secretRef:
            name: {{ secret.name }}
            {% if secret.optional %}
            optional: {{ secret.optional }}
            {% endif %}
        {% endfor %}
        {% endif %}
        
        # Volume Mounts
        {% if VOLUME_MOUNTS %}
        volumeMounts:
        {% for mount in VOLUME_MOUNTS %}
        - name: {{ mount.name }}
          mountPath: {{ mount.mountPath }}
          {% if mount.subPath %}
          subPath: {{ mount.subPath }}
          {% endif %}
          {% if mount.readOnly %}
          readOnly: {{ mount.readOnly }}
          {% endif %}
        {% endfor %}
        {% endif %}
        
        # Temporary filesystem for read-only root filesystem
        {% if READ_ONLY_ROOT %}
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: var-cache-volume
          mountPath: /var/cache
        - name: var-run-volume
          mountPath: /var/run
        {% endif %}
      
      # Volumes
      volumes:
      {% if READ_ONLY_ROOT %}
      # Temporary volumes for read-only filesystem
      - name: tmp-volume
        emptyDir:
          sizeLimit: {{ TMP_SIZE_LIMIT | default("1Gi") }}
      - name: var-cache-volume
        emptyDir:
          sizeLimit: {{ CACHE_SIZE_LIMIT | default("1Gi") }}
      - name: var-run-volume
        emptyDir:
          sizeLimit: {{ RUN_SIZE_LIMIT | default("100Mi") }}
      {% endif %}
      
      {% if VOLUMES %}
      {% for volume in VOLUMES %}
      - name: {{ volume.name }}
        {% if volume.configMap %}
        configMap:
          name: {{ volume.configMap.name }}
          {% if volume.configMap.defaultMode %}
          defaultMode: {{ volume.configMap.defaultMode }}
          {% endif %}
          {% if volume.configMap.items %}
          items:
            {{ volume.configMap.items | to_yaml | indent(12) }}
          {% endif %}
        {% elif volume.secret %}
        secret:
          secretName: {{ volume.secret.secretName }}
          {% if volume.secret.defaultMode %}
          defaultMode: {{ volume.secret.defaultMode }}
          {% endif %}
          {% if volume.secret.items %}
          items:
            {{ volume.secret.items | to_yaml | indent(12) }}
          {% endif %}
        {% elif volume.persistentVolumeClaim %}
        persistentVolumeClaim:
          claimName: {{ volume.persistentVolumeClaim.claimName }}
        {% elif volume.emptyDir %}
        emptyDir:
          {% if volume.emptyDir.sizeLimit %}
          sizeLimit: {{ volume.emptyDir.sizeLimit }}
          {% endif %}
          {% if volume.emptyDir.medium %}
          medium: {{ volume.emptyDir.medium }}
          {% endif %}
        {% endif %}
      {% endfor %}
      {% endif %}
      
      # Image Pull Secrets
      {% if IMAGE_PULL_SECRETS %}
      imagePullSecrets:
      {% for secret in IMAGE_PULL_SECRETS %}
      - name: {{ secret }}
      {% endfor %}
      {% endif %}
      
      # DNS Configuration
      {% if DNS_CONFIG %}
      dnsConfig:
        {{ DNS_CONFIG | to_yaml | indent(8) }}
      {% endif %}
      
      # Host Aliases
      {% if HOST_ALIASES %}
      hostAliases:
        {{ HOST_ALIASES | to_yaml | indent(8) }}
      {% endif %}
      
      # Termination Grace Period
      terminationGracePeriodSeconds: {{ TERMINATION_GRACE_PERIOD | default(30) }}
      
      # Restart Policy
      restartPolicy: Always

---
# Horizontal Pod Autoscaler (optional)
{% if ENABLE_HPA %}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ APP_NAME }}-hpa
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: autoscaler
    managed-by: infrastructure-management-subagent
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ APP_NAME }}
  minReplicas: {{ HPA_MIN_REPLICAS | default(3) }}
  maxReplicas: {{ HPA_MAX_REPLICAS | default(10) }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{ HPA_CPU_TARGET | default(70) }}
  {% if HPA_MEMORY_TARGET %}
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{ HPA_MEMORY_TARGET }}
  {% endif %}
  {% if HPA_CUSTOM_METRICS %}
  {% for metric in HPA_CUSTOM_METRICS %}
  - type: {{ metric.type }}
    {{ metric.type.lower() }}:
      {{ metric.config | to_yaml | indent(6) }}
  {% endfor %}
  {% endif %}
  behavior:
    scaleUp:
      stabilizationWindowSeconds: {{ HPA_SCALE_UP_STABILIZATION | default(60) }}
      policies:
      - type: Percent
        value: {{ HPA_SCALE_UP_PERCENT | default(100) }}
        periodSeconds: {{ HPA_SCALE_UP_PERIOD | default(15) }}
    scaleDown:
      stabilizationWindowSeconds: {{ HPA_SCALE_DOWN_STABILIZATION | default(300) }}
      policies:
      - type: Percent
        value: {{ HPA_SCALE_DOWN_PERCENT | default(10) }}
        periodSeconds: {{ HPA_SCALE_DOWN_PERIOD | default(60) }}
{% endif %}

---
# Pod Disruption Budget (recommended for production)
{% if ENABLE_PDB %}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ APP_NAME }}-pdb
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: disruption-budget
    managed-by: infrastructure-management-subagent
spec:
  selector:
    matchLabels:
      app: {{ APP_NAME }}
  {% if PDB_MIN_AVAILABLE %}
  minAvailable: {{ PDB_MIN_AVAILABLE }}
  {% else %}
  maxUnavailable: {{ PDB_MAX_UNAVAILABLE | default("25%") }}
  {% endif %}
{% endif %}