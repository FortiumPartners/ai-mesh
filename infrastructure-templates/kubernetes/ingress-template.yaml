# Production-ready Kubernetes Ingress Templates
# Supports multiple ingress controllers (nginx, traefik, AWS ALB)
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ APP_NAME }}{% if INGRESS_SUFFIX %}-{{ INGRESS_SUFFIX }}{% endif %}
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: ingress
    managed-by: infrastructure-management-subagent
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    infrastructure.fortium.io/template-version: "1.0"
    infrastructure.fortium.io/ingress-controller: "{{ INGRESS_CONTROLLER | default('nginx') }}"
    
    {% if INGRESS_CONTROLLER == "nginx" %}
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    {% if NGINX_REWRITE_TARGET %}
    nginx.ingress.kubernetes.io/rewrite-target: "{{ NGINX_REWRITE_TARGET }}"
    {% endif %}
    {% if NGINX_SSL_REDIRECT is defined %}
    nginx.ingress.kubernetes.io/ssl-redirect: "{{ NGINX_SSL_REDIRECT | lower }}"
    {% endif %}
    {% if NGINX_FORCE_SSL_REDIRECT is defined %}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "{{ NGINX_FORCE_SSL_REDIRECT | lower }}"
    {% endif %}
    {% if NGINX_CORS_ENABLED %}
    nginx.ingress.kubernetes.io/enable-cors: "true"
    {% if NGINX_CORS_ALLOW_ORIGIN %}
    nginx.ingress.kubernetes.io/cors-allow-origin: "{{ NGINX_CORS_ALLOW_ORIGIN }}"
    {% endif %}
    {% if NGINX_CORS_ALLOW_METHODS %}
    nginx.ingress.kubernetes.io/cors-allow-methods: "{{ NGINX_CORS_ALLOW_METHODS }}"
    {% endif %}
    {% if NGINX_CORS_ALLOW_HEADERS %}
    nginx.ingress.kubernetes.io/cors-allow-headers: "{{ NGINX_CORS_ALLOW_HEADERS }}"
    {% endif %}
    {% endif %}
    {% if NGINX_RATE_LIMIT %}
    nginx.ingress.kubernetes.io/rate-limit-enabled: "true"
    nginx.ingress.kubernetes.io/rate-limit-rps: "{{ NGINX_RATE_LIMIT.rps | default(10) }}"
    nginx.ingress.kubernetes.io/rate-limit-rpm: "{{ NGINX_RATE_LIMIT.rpm | default(600) }}"
    {% endif %}
    {% if NGINX_AUTH_TYPE %}
    nginx.ingress.kubernetes.io/auth-type: "{{ NGINX_AUTH_TYPE }}"
    {% if NGINX_AUTH_SECRET %}
    nginx.ingress.kubernetes.io/auth-secret: "{{ NGINX_AUTH_SECRET }}"
    {% endif %}
    {% if NGINX_AUTH_REALM %}
    nginx.ingress.kubernetes.io/auth-realm: "{{ NGINX_AUTH_REALM }}"
    {% endif %}
    {% endif %}
    {% if NGINX_CLIENT_MAX_BODY_SIZE %}
    nginx.ingress.kubernetes.io/proxy-body-size: "{{ NGINX_CLIENT_MAX_BODY_SIZE }}"
    {% endif %}
    {% if NGINX_PROXY_CONNECT_TIMEOUT %}
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "{{ NGINX_PROXY_CONNECT_TIMEOUT }}"
    {% endif %}
    {% if NGINX_PROXY_SEND_TIMEOUT %}
    nginx.ingress.kubernetes.io/proxy-send-timeout: "{{ NGINX_PROXY_SEND_TIMEOUT }}"
    {% endif %}
    {% if NGINX_PROXY_READ_TIMEOUT %}
    nginx.ingress.kubernetes.io/proxy-read-timeout: "{{ NGINX_PROXY_READ_TIMEOUT }}"
    {% endif %}
    {% if NGINX_CUSTOM_CONFIG %}
    nginx.ingress.kubernetes.io/configuration-snippet: |
      {{ NGINX_CUSTOM_CONFIG | indent(6) }}
    {% endif %}
    
    {% elif INGRESS_CONTROLLER == "alb" %}
    # AWS Application Load Balancer Controller annotations
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: "{{ ALB_SCHEME | default('internet-facing') }}"
    alb.ingress.kubernetes.io/target-type: "{{ ALB_TARGET_TYPE | default('ip') }}"
    {% if ALB_SUBNETS %}
    alb.ingress.kubernetes.io/subnets: "{{ ALB_SUBNETS | join(',') }}"
    {% endif %}
    {% if ALB_SECURITY_GROUPS %}
    alb.ingress.kubernetes.io/security-groups: "{{ ALB_SECURITY_GROUPS | join(',') }}"
    {% endif %}
    {% if ALB_CERTIFICATE_ARN %}
    alb.ingress.kubernetes.io/certificate-arn: "{{ ALB_CERTIFICATE_ARN }}"
    {% endif %}
    {% if ALB_SSL_POLICY %}
    alb.ingress.kubernetes.io/ssl-policy: "{{ ALB_SSL_POLICY }}"
    {% endif %}
    {% if ALB_BACKEND_PROTOCOL %}
    alb.ingress.kubernetes.io/backend-protocol: "{{ ALB_BACKEND_PROTOCOL }}"
    {% endif %}
    {% if ALB_HEALTH_CHECK_PATH %}
    alb.ingress.kubernetes.io/healthcheck-path: "{{ ALB_HEALTH_CHECK_PATH }}"
    {% endif %}
    {% if ALB_HEALTH_CHECK_PROTOCOL %}
    alb.ingress.kubernetes.io/healthcheck-protocol: "{{ ALB_HEALTH_CHECK_PROTOCOL }}"
    {% endif %}
    {% if ALB_SUCCESS_CODES %}
    alb.ingress.kubernetes.io/success-codes: "{{ ALB_SUCCESS_CODES }}"
    {% endif %}
    {% if ALB_LISTEN_PORTS %}
    alb.ingress.kubernetes.io/listen-ports: '[{{ ALB_LISTEN_PORTS | map("to_json") | join(",") }}]'
    {% endif %}
    {% if ALB_ACTIONS %}
    {% for action_name, action_config in ALB_ACTIONS.items() %}
    alb.ingress.kubernetes.io/actions.{{ action_name }}: '{{ action_config | to_json }}'
    {% endfor %}
    {% endif %}
    {% if ALB_CONDITIONS %}
    {% for condition_name, condition_config in ALB_CONDITIONS.items() %}
    alb.ingress.kubernetes.io/conditions.{{ condition_name }}: '{{ condition_config | to_json }}'
    {% endfor %}
    {% endif %}
    {% if ALB_TAGS %}
    alb.ingress.kubernetes.io/tags: "{{ ALB_TAGS | map('join', '=') | join(',') }}"
    {% endif %}
    
    {% elif INGRESS_CONTROLLER == "traefik" %}
    # Traefik Ingress Controller annotations
    kubernetes.io/ingress.class: "traefik"
    {% if TRAEFIK_ROUTER_ENTRYPOINTS %}
    traefik.ingress.kubernetes.io/router.entrypoints: "{{ TRAEFIK_ROUTER_ENTRYPOINTS }}"
    {% endif %}
    {% if TRAEFIK_ROUTER_TLS %}
    traefik.ingress.kubernetes.io/router.tls: "{{ TRAEFIK_ROUTER_TLS | lower }}"
    {% endif %}
    {% if TRAEFIK_ROUTER_TLS_CERTRESOLVER %}
    traefik.ingress.kubernetes.io/router.tls.certresolver: "{{ TRAEFIK_ROUTER_TLS_CERTRESOLVER }}"
    {% endif %}
    {% if TRAEFIK_ROUTER_MIDDLEWARES %}
    traefik.ingress.kubernetes.io/router.middlewares: "{{ TRAEFIK_ROUTER_MIDDLEWARES | join(',') }}"
    {% endif %}
    {% if TRAEFIK_ROUTER_PRIORITY %}
    traefik.ingress.kubernetes.io/router.priority: "{{ TRAEFIK_ROUTER_PRIORITY }}"
    {% endif %}
    {% if TRAEFIK_SERVICE_STICKY_COOKIE %}
    traefik.ingress.kubernetes.io/service.sticky.cookie: "{{ TRAEFIK_SERVICE_STICKY_COOKIE | lower }}"
    {% endif %}
    {% endif %}
    
    # Custom annotations
    {% if CUSTOM_ANNOTATIONS %}
    {% for key, value in CUSTOM_ANNOTATIONS.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
    {% endif %}
spec:
  # Ingress Class Name (for Kubernetes 1.18+)
  {% if INGRESS_CLASS_NAME %}
  ingressClassName: {{ INGRESS_CLASS_NAME }}
  {% endif %}
  
  # TLS Configuration
  {% if TLS_ENABLED %}
  tls:
  {% if TLS_HOSTS %}
  {% for tls_config in TLS_HOSTS %}
  - hosts:
    {% for host in tls_config.hosts %}
    - {{ host }}
    {% endfor %}
    {% if tls_config.secretName %}
    secretName: {{ tls_config.secretName }}
    {% endif %}
  {% endfor %}
  {% else %}
  - hosts:
    {% for host in HOSTS %}
    - {{ host }}
    {% endfor %}
    {% if TLS_SECRET_NAME %}
    secretName: {{ TLS_SECRET_NAME }}
    {% endif %}
  {% endif %}
  {% endif %}
  
  # Ingress Rules
  rules:
  {% for host in HOSTS %}
  - host: {{ host }}
    http:
      paths:
      {% if PATHS %}
      {% for path in PATHS %}
      - path: {{ path.path }}
        pathType: {{ path.pathType | default("Prefix") }}
        backend:
          service:
            name: {{ path.serviceName | default(APP_NAME) }}
            port:
              {% if path.servicePort is number %}
              number: {{ path.servicePort }}
              {% else %}
              name: {{ path.servicePort | default("http") }}
              {% endif %}
      {% endfor %}
      {% else %}
      - path: {{ DEFAULT_PATH | default("/") }}
        pathType: {{ DEFAULT_PATH_TYPE | default("Prefix") }}
        backend:
          service:
            name: {{ SERVICE_NAME | default(APP_NAME) }}
            port:
              {% if SERVICE_PORT is number %}
              number: {{ SERVICE_PORT | default(80) }}
              {% else %}
              name: {{ SERVICE_PORT | default("http") }}
              {% endif %}
      {% endif %}
  {% endfor %}

---
# Certificate (for cert-manager)
{% if ENABLE_CERT_MANAGER %}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ APP_NAME }}-tls
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: certificate
    managed-by: infrastructure-management-subagent
spec:
  secretName: {{ TLS_SECRET_NAME | default(APP_NAME + "-tls") }}
  issuerRef:
    name: {{ CERT_ISSUER_NAME }}
    kind: {{ CERT_ISSUER_KIND | default("ClusterIssuer") }}
    {% if CERT_ISSUER_GROUP %}
    group: {{ CERT_ISSUER_GROUP }}
    {% endif %}
  dnsNames:
  {% for host in HOSTS %}
  - {{ host }}
  {% endfor %}
  {% if CERT_DURATION %}
  duration: {{ CERT_DURATION }}
  {% endif %}
  {% if CERT_RENEW_BEFORE %}
  renewBefore: {{ CERT_RENEW_BEFORE }}
  {% endif %}
  {% if CERT_PRIVATE_KEY %}
  privateKey:
    {{ CERT_PRIVATE_KEY | to_yaml | indent(4) }}
  {% endif %}
{% endif %}

---
# Network Policy (for ingress traffic control)
{% if ENABLE_NETWORK_POLICY %}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ APP_NAME }}-ingress-policy
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: network-policy
    managed-by: infrastructure-management-subagent
spec:
  podSelector:
    matchLabels:
      app: {{ APP_NAME }}
  policyTypes:
  - Ingress
  ingress:
  # Allow ingress controller traffic
  - from:
    {% if INGRESS_CONTROLLER == "nginx" %}
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    {% elif INGRESS_CONTROLLER == "alb" %}
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          app.kubernetes.io/name: aws-load-balancer-controller
    {% elif INGRESS_CONTROLLER == "traefik" %}
    - namespaceSelector:
        matchLabels:
          name: traefik-system
    {% endif %}
    ports:
    - protocol: TCP
      port: {{ TARGET_PORT | default(8080) }}
  
  # Allow health check probes
  - from: []
    ports:
    - protocol: TCP
      port: {{ HEALTH_CHECK_PORT | default(TARGET_PORT | default(8080)) }}
  
  # Custom ingress rules
  {% if ADDITIONAL_INGRESS_RULES %}
  {% for rule in ADDITIONAL_INGRESS_RULES %}
  - {{ rule | to_yaml | indent(4) }}
  {% endfor %}
  {% endif %}
{% endif %}