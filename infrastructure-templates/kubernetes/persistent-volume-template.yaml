# PersistentVolume and StorageClass Templates for Kubernetes
# Production-ready storage configurations with security and performance optimization
---
# StorageClass for dynamic provisioning
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ STORAGE_CLASS_NAME | default(APP_NAME + "-storage") }}
  labels:
    app: {{ APP_NAME }}
    component: storage
    managed-by: infrastructure-management-subagent
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    infrastructure.fortium.io/template-version: "1.0"
    infrastructure.fortium.io/storage-type: "{{ STORAGE_TYPE | default('aws-ebs') }}"
    {% if STORAGE_CLASS_DEFAULT %}
    storageclass.kubernetes.io/is-default-class: "{{ STORAGE_CLASS_DEFAULT | lower }}"
    {% endif %}
provisioner: {{ PROVISIONER | default("ebs.csi.aws.com") }}
volumeBindingMode: {{ VOLUME_BINDING_MODE | default("WaitForFirstConsumer") }}
allowVolumeExpansion: {{ ALLOW_VOLUME_EXPANSION | default(true) }}
reclaimPolicy: {{ RECLAIM_POLICY | default("Delete") }}

# Storage provider specific parameters
parameters:
  {% if STORAGE_TYPE == "aws-ebs" %}
  # AWS EBS CSI Driver parameters
  type: {{ EBS_VOLUME_TYPE | default("gp3") }}
  {% if EBS_VOLUME_TYPE == "gp3" %}
  iops: "{{ EBS_IOPS | default(3000) }}"
  throughput: "{{ EBS_THROUGHPUT | default(125) }}"
  {% elif EBS_VOLUME_TYPE == "io1" or EBS_VOLUME_TYPE == "io2" %}
  iops: "{{ EBS_IOPS | default(1000) }}"
  {% endif %}
  {% if EBS_ENCRYPTED %}
  encrypted: "{{ EBS_ENCRYPTED | lower }}"
  {% endif %}
  {% if EBS_KMS_KEY_ID %}
  kmsKeyId: "{{ EBS_KMS_KEY_ID }}"
  {% endif %}
  fsType: {{ FS_TYPE | default("ext4") }}
  {% if EBS_TAGS %}
  tagSpecification_1: "Name={{ APP_NAME }}-volume"
  {% for tag_key, tag_value in EBS_TAGS.items() %}
  tagSpecification_{{ loop.index + 1 }}: "{{ tag_key }}={{ tag_value }}"
  {% endfor %}
  {% endif %}
  
  {% elif STORAGE_TYPE == "aws-efs" %}
  # AWS EFS CSI Driver parameters
  provisioningMode: {{ EFS_PROVISIONING_MODE | default("efs-ap") }}
  fileSystemId: {{ EFS_FILESYSTEM_ID }}
  directoryPerms: "{{ EFS_DIRECTORY_PERMS | default('0755') }}"
  {% if EFS_GID_RANGE %}
  gidRangeStart: "{{ EFS_GID_RANGE.start }}"
  gidRangeEnd: "{{ EFS_GID_RANGE.end }}"
  {% endif %}
  {% if EFS_BASE_PATH %}
  basePath: "{{ EFS_BASE_PATH }}"
  {% endif %}
  
  {% elif STORAGE_TYPE == "aws-fsx" %}
  # AWS FSx CSI Driver parameters
  subnetId: {{ FSX_SUBNET_ID }}
  securityGroupIds: {{ FSX_SECURITY_GROUP_IDS | join(',') }}
  deploymentType: {{ FSX_DEPLOYMENT_TYPE | default("SCRATCH_2") }}
  {% if FSX_STORAGE_CAPACITY %}
  storageCapacity: "{{ FSX_STORAGE_CAPACITY }}"
  {% endif %}
  {% if FSX_THROUGHPUT_CAPACITY %}
  throughputCapacity: "{{ FSX_THROUGHPUT_CAPACITY }}"
  {% endif %}
  
  {% elif STORAGE_TYPE == "gce-pd" %}
  # Google Cloud Persistent Disk parameters
  type: {{ GCE_DISK_TYPE | default("pd-ssd") }}
  {% if GCE_ZONES %}
  zones: {{ GCE_ZONES | join(',') }}
  {% endif %}
  {% if GCE_REPLICATION_TYPE %}
  replication-type: {{ GCE_REPLICATION_TYPE }}
  {% endif %}
  
  {% elif STORAGE_TYPE == "azure-disk" %}
  # Azure Disk CSI Driver parameters
  skuName: {{ AZURE_DISK_SKU | default("Premium_LRS") }}
  {% if AZURE_DISK_TIER %}
  diskTier: {{ AZURE_DISK_TIER }}
  {% endif %}
  {% if AZURE_RESOURCE_GROUP %}
  resourceGroup: {{ AZURE_RESOURCE_GROUP }}
  {% endif %}
  {% endif %}

---
# PersistentVolumeClaim template
{% if ENABLE_PVC %}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ PVC_NAME | default(APP_NAME + "-data") }}
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: storage
    managed-by: infrastructure-management-subagent
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    infrastructure.fortium.io/backup-enabled: "{{ PVC_BACKUP_ENABLED | default('true') }}"
    {% if PVC_BACKUP_SCHEDULE %}
    infrastructure.fortium.io/backup-schedule: "{{ PVC_BACKUP_SCHEDULE }}"
    {% endif %}
    {% if PVC_SNAPSHOT_CLASS %}
    snapshot.storage.kubernetes.io/snapshot-class: "{{ PVC_SNAPSHOT_CLASS }}"
    {% endif %}
spec:
  accessModes:
  {% for mode in ACCESS_MODES | default(["ReadWriteOnce"]) %}
  - {{ mode }}
  {% endfor %}
  
  {% if STORAGE_CLASS_NAME %}
  storageClassName: {{ STORAGE_CLASS_NAME }}
  {% endif %}
  
  resources:
    requests:
      storage: {{ STORAGE_SIZE | default("10Gi") }}
    {% if STORAGE_LIMITS %}
    limits:
      storage: {{ STORAGE_LIMITS }}
    {% endif %}
  
  # Volume mode (Filesystem or Block)
  volumeMode: {{ VOLUME_MODE | default("Filesystem") }}
  
  # Data source (for cloning or restoring from snapshot)
  {% if DATA_SOURCE %}
  dataSource:
    name: {{ DATA_SOURCE.name }}
    kind: {{ DATA_SOURCE.kind }}
    apiGroup: {{ DATA_SOURCE.apiGroup | default("") }}
  {% endif %}
  
  # Data source ref (for cross-namespace cloning)
  {% if DATA_SOURCE_REF %}
  dataSourceRef:
    name: {{ DATA_SOURCE_REF.name }}
    kind: {{ DATA_SOURCE_REF.kind }}
    apiGroup: {{ DATA_SOURCE_REF.apiGroup | default("") }}
    namespace: {{ DATA_SOURCE_REF.namespace }}
  {% endif %}
  
  # Selector (for static provisioning)
  {% if PVC_SELECTOR %}
  selector:
    matchLabels:
      {{ PVC_SELECTOR.matchLabels | to_yaml | indent(6) }}
    {% if PVC_SELECTOR.matchExpressions %}
    matchExpressions:
      {{ PVC_SELECTOR.matchExpressions | to_yaml | indent(6) }}
    {% endif %}
  {% endif %}
{% endif %}

---
# PersistentVolume (for static provisioning)
{% if ENABLE_PV %}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ PV_NAME | default(APP_NAME + "-pv") }}
  labels:
    app: {{ APP_NAME }}
    component: storage
    managed-by: infrastructure-management-subagent
    type: {{ STORAGE_TYPE | default("aws-ebs") }}
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    infrastructure.fortium.io/storage-backend: "{{ STORAGE_TYPE }}"
spec:
  capacity:
    storage: {{ PV_CAPACITY | default("10Gi") }}
  
  accessModes:
  {% for mode in ACCESS_MODES | default(["ReadWriteOnce"]) %}
  - {{ mode }}
  {% endfor %}
  
  persistentVolumeReclaimPolicy: {{ RECLAIM_POLICY | default("Retain") }}
  volumeMode: {{ VOLUME_MODE | default("Filesystem") }}
  
  {% if STORAGE_CLASS_NAME %}
  storageClassName: {{ STORAGE_CLASS_NAME }}
  {% endif %}
  
  # Mount options
  {% if MOUNT_OPTIONS %}
  mountOptions:
  {% for option in MOUNT_OPTIONS %}
  - {{ option }}
  {% endfor %}
  {% endif %}
  
  # Volume source based on storage type
  {% if STORAGE_TYPE == "aws-ebs" %}
  awsElasticBlockStore:
    volumeID: {{ EBS_VOLUME_ID }}
    fsType: {{ FS_TYPE | default("ext4") }}
    {% if EBS_PARTITION %}
    partition: {{ EBS_PARTITION }}
    {% endif %}
    readOnly: {{ EBS_READ_ONLY | default(false) }}
  
  {% elif STORAGE_TYPE == "aws-efs" %}
  nfs:
    server: {{ EFS_DNS_NAME }}
    path: {{ EFS_PATH | default("/") }}
    readOnly: {{ EFS_READ_ONLY | default(false) }}
  
  {% elif STORAGE_TYPE == "gce-pd" %}
  gcePersistentDisk:
    pdName: {{ GCE_DISK_NAME }}
    fsType: {{ FS_TYPE | default("ext4") }}
    {% if GCE_PARTITION %}
    partition: {{ GCE_PARTITION }}
    {% endif %}
    readOnly: {{ GCE_READ_ONLY | default(false) }}
  
  {% elif STORAGE_TYPE == "azure-disk" %}
  azureDisk:
    diskName: {{ AZURE_DISK_NAME }}
    diskURI: {{ AZURE_DISK_URI }}
    fsType: {{ FS_TYPE | default("ext4") }}
    readOnly: {{ AZURE_READ_ONLY | default(false) }}
    {% if AZURE_CACHING_MODE %}
    cachingMode: {{ AZURE_CACHING_MODE }}
    {% endif %}
  
  {% elif STORAGE_TYPE == "hostpath" %}
  hostPath:
    path: {{ HOST_PATH }}
    type: {{ HOST_PATH_TYPE | default("DirectoryOrCreate") }}
  
  {% elif STORAGE_TYPE == "nfs" %}
  nfs:
    server: {{ NFS_SERVER }}
    path: {{ NFS_PATH }}
    readOnly: {{ NFS_READ_ONLY | default(false) }}
  
  {% elif STORAGE_TYPE == "iscsi" %}
  iscsi:
    targetPortal: {{ ISCSI_TARGET_PORTAL }}
    iqn: {{ ISCSI_IQN }}
    lun: {{ ISCSI_LUN }}
    fsType: {{ FS_TYPE | default("ext4") }}
    readOnly: {{ ISCSI_READ_ONLY | default(false) }}
    {% if ISCSI_CHAP_AUTH %}
    chapAuthDiscovery: {{ ISCSI_CHAP_AUTH.discovery }}
    chapAuthSession: {{ ISCSI_CHAP_AUTH.session }}
    secretRef:
      name: {{ ISCSI_CHAP_AUTH.secretName }}
    {% endif %}
  {% endif %}
  
  # Node affinity (for local storage)
  {% if NODE_AFFINITY %}
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        {% for expression in NODE_AFFINITY %}
        - key: {{ expression.key }}
          operator: {{ expression.operator }}
          {% if expression.values %}
          values:
          {% for value in expression.values %}
          - {{ value }}
          {% endfor %}
          {% endif %}
        {% endfor %}
  {% endif %}
  
  # Claim reference (for pre-binding)
  {% if CLAIM_REF %}
  claimRef:
    name: {{ CLAIM_REF.name }}
    namespace: {{ CLAIM_REF.namespace }}
    uid: {{ CLAIM_REF.uid }}
    apiVersion: v1
    kind: PersistentVolumeClaim
    resourceVersion: {{ CLAIM_REF.resourceVersion }}
  {% endif %}
{% endif %}

---
# VolumeSnapshot for backup/clone operations
{% if ENABLE_VOLUME_SNAPSHOT %}
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshot
metadata:
  name: {{ SNAPSHOT_NAME | default(APP_NAME + "-snapshot-" + ansible_date_time.epoch) }}
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: backup
    managed-by: infrastructure-management-subagent
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    infrastructure.fortium.io/source-pvc: "{{ SOURCE_PVC_NAME }}"
    infrastructure.fortium.io/retention-policy: "{{ SNAPSHOT_RETENTION_POLICY | default('30d') }}"
spec:
  volumeSnapshotClassName: {{ VOLUME_SNAPSHOT_CLASS }}
  source:
    persistentVolumeClaimName: {{ SOURCE_PVC_NAME }}
{% endif %}

---
# VolumeSnapshotClass
{% if ENABLE_VOLUME_SNAPSHOT_CLASS %}
apiVersion: snapshot.storage.k8s.io/v1
kind: VolumeSnapshotClass
metadata:
  name: {{ VOLUME_SNAPSHOT_CLASS | default(APP_NAME + "-snapshot-class") }}
  labels:
    app: {{ APP_NAME }}
    component: backup
    managed-by: infrastructure-management-subagent
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    {% if SNAPSHOT_CLASS_DEFAULT %}
    snapshot.storage.kubernetes.io/is-default-class: "{{ SNAPSHOT_CLASS_DEFAULT | lower }}"
    {% endif %}
driver: {{ SNAPSHOT_DRIVER | default("ebs.csi.aws.com") }}
deletionPolicy: {{ SNAPSHOT_DELETION_POLICY | default("Delete") }}
{% if SNAPSHOT_PARAMETERS %}
parameters:
  {% for key, value in SNAPSHOT_PARAMETERS.items() %}
  {{ key }}: "{{ value }}"
  {% endfor %}
{% endif %}
{% endif %}

---
# Backup CronJob for automated snapshots
{% if ENABLE_BACKUP_CRONJOB %}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ APP_NAME }}-backup
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: backup
    managed-by: infrastructure-management-subagent
spec:
  schedule: "{{ BACKUP_SCHEDULE | default('0 2 * * *') }}"
  concurrencyPolicy: {{ BACKUP_CONCURRENCY_POLICY | default("Forbid") }}
  successfulJobsHistoryLimit: {{ BACKUP_SUCCESS_HISTORY | default(3) }}
  failedJobsHistoryLimit: {{ BACKUP_FAILED_HISTORY | default(1) }}
  startingDeadlineSeconds: {{ BACKUP_DEADLINE | default(3600) }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: {{ APP_NAME }}
            component: backup-job
        spec:
          restartPolicy: OnFailure
          serviceAccountName: {{ BACKUP_SERVICE_ACCOUNT | default(APP_NAME + "-backup") }}
          containers:
          - name: backup
            image: {{ BACKUP_IMAGE | default("bitnami/kubectl:latest") }}
            imagePullPolicy: IfNotPresent
            command:
            - /bin/bash
            - -c
            - |
              # Create volume snapshot
              kubectl create -f - <<EOF
              apiVersion: snapshot.storage.k8s.io/v1
              kind: VolumeSnapshot
              metadata:
                name: {{ APP_NAME }}-auto-backup-$(date +%Y%m%d-%H%M%S)
                namespace: {{ NAMESPACE | default("default") }}
                labels:
                  app: {{ APP_NAME }}
                  backup-type: automated
                annotations:
                  infrastructure.fortium.io/created-by: "backup-cronjob"
                  infrastructure.fortium.io/retention: "{{ BACKUP_RETENTION | default('30d') }}"
              spec:
                volumeSnapshotClassName: {{ VOLUME_SNAPSHOT_CLASS }}
                source:
                  persistentVolumeClaimName: {{ SOURCE_PVC_NAME }}
              EOF
              
              # Clean up old snapshots based on retention policy
              kubectl get volumesnapshots -n {{ NAMESPACE | default("default") }} \
                -l app={{ APP_NAME }},backup-type=automated \
                -o json | jq -r \
                ".items[] | select(.metadata.creationTimestamp < \"$(date -d '{{ BACKUP_RETENTION | default('30d') }} ago' -Iseconds)\") | .metadata.name" | \
                xargs -r kubectl delete volumesnapshot -n {{ NAMESPACE | default("default") }}
            env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          {% if BACKUP_IMAGE_PULL_SECRETS %}
          imagePullSecrets:
          {% for secret in BACKUP_IMAGE_PULL_SECRETS %}
          - name: {{ secret }}
          {% endfor %}
          {% endif %}
{% endif %}