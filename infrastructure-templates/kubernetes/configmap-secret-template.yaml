# ConfigMap and Secret Templates for Kubernetes
# Secure configuration management with best practices
---
# ConfigMap for application configuration
{% if ENABLE_CONFIGMAP %}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ APP_NAME }}-config
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: configuration
    managed-by: infrastructure-management-subagent
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    infrastructure.fortium.io/template-version: "1.0"
data:
  # Application configuration files
  {% if CONFIG_FILES %}
  {% for file in CONFIG_FILES %}
  {{ file.name }}: |
    {{ file.content | indent(4) }}
  {% endfor %}
  {% endif %}
  
  # Key-value configuration
  {% if CONFIG_DATA %}
  {% for key, value in CONFIG_DATA.items() %}
  {{ key }}: "{{ value }}"
  {% endfor %}
  {% endif %}
  
  # Environment-specific configuration
  {% if ENVIRONMENT %}
  environment: "{{ ENVIRONMENT }}"
  {% endif %}
  {% if LOG_LEVEL %}
  log-level: "{{ LOG_LEVEL }}"
  {% endif %}
  {% if DEBUG_ENABLED %}
  debug: "{{ DEBUG_ENABLED | lower }}"
  {% endif %}
  
  # Database configuration (non-sensitive)
  {% if DATABASE_CONFIG %}
  {% if DATABASE_CONFIG.host %}
  database-host: "{{ DATABASE_CONFIG.host }}"
  {% endif %}
  {% if DATABASE_CONFIG.port %}
  database-port: "{{ DATABASE_CONFIG.port }}"
  {% endif %}
  {% if DATABASE_CONFIG.name %}
  database-name: "{{ DATABASE_CONFIG.name }}"
  {% endif %}
  {% if DATABASE_CONFIG.ssl_mode %}
  database-ssl-mode: "{{ DATABASE_CONFIG.ssl_mode }}"
  {% endif %}
  {% endif %}
  
  # Redis configuration (non-sensitive)
  {% if REDIS_CONFIG %}
  {% if REDIS_CONFIG.host %}
  redis-host: "{{ REDIS_CONFIG.host }}"
  {% endif %}
  {% if REDIS_CONFIG.port %}
  redis-port: "{{ REDIS_CONFIG.port }}"
  {% endif %}
  {% if REDIS_CONFIG.database %}
  redis-database: "{{ REDIS_CONFIG.database }}"
  {% endif %}
  {% endif %}
  
  # Monitoring configuration
  {% if MONITORING_CONFIG %}
  {% for key, value in MONITORING_CONFIG.items() %}
  monitoring-{{ key }}: "{{ value }}"
  {% endfor %}
  {% endif %}
  
  # Feature flags
  {% if FEATURE_FLAGS %}
  {% for flag, enabled in FEATURE_FLAGS.items() %}
  feature-{{ flag }}: "{{ enabled | lower }}"
  {% endfor %}
  {% endif %}
{% endif %}

---
# Secret for sensitive configuration
{% if ENABLE_SECRET %}
apiVersion: v1
kind: Secret
metadata:
  name: {{ APP_NAME }}-secret
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: secrets
    managed-by: infrastructure-management-subagent
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    infrastructure.fortium.io/template-version: "1.0"
    {% if SECRET_ROTATION_ENABLED %}
    secrets.fortium.io/rotation-enabled: "true"
    secrets.fortium.io/rotation-interval: "{{ SECRET_ROTATION_INTERVAL | default('30d') }}"
    {% endif %}
type: {{ SECRET_TYPE | default("Opaque") }}
data:
  # Base64 encoded sensitive data
  {% if SECRET_DATA %}
  {% for key, value in SECRET_DATA.items() %}
  {{ key }}: {{ value | b64encode }}
  {% endfor %}
  {% endif %}
stringData:
  # Plain text sensitive data (will be base64 encoded automatically)
  {% if SECRET_STRING_DATA %}
  {% for key, value in SECRET_STRING_DATA.items() %}
  {{ key }}: "{{ value }}"
  {% endfor %}
  {% endif %}
  
  # Database credentials
  {% if DATABASE_CREDENTIALS %}
  database-username: "{{ DATABASE_CREDENTIALS.username }}"
  database-password: "{{ DATABASE_CREDENTIALS.password }}"
  {% if DATABASE_CREDENTIALS.url %}
  database-url: "{{ DATABASE_CREDENTIALS.url }}"
  {% endif %}
  {% endif %}
  
  # API Keys and tokens
  {% if API_KEYS %}
  {% for key_name, key_value in API_KEYS.items() %}
  {{ key_name | lower | replace('_', '-') }}: "{{ key_value }}"
  {% endfor %}
  {% endif %}
  
  # OAuth/JWT configuration
  {% if JWT_CONFIG %}
  jwt-secret: "{{ JWT_CONFIG.secret }}"
  {% if JWT_CONFIG.issuer %}
  jwt-issuer: "{{ JWT_CONFIG.issuer }}"
  {% endif %}
  {% if JWT_CONFIG.audience %}
  jwt-audience: "{{ JWT_CONFIG.audience }}"
  {% endif %}
  {% endif %}
  
  # Redis credentials
  {% if REDIS_CREDENTIALS %}
  redis-password: "{{ REDIS_CREDENTIALS.password }}"
  {% if REDIS_CREDENTIALS.username %}
  redis-username: "{{ REDIS_CREDENTIALS.username }}"
  {% endif %}
  {% endif %}
  
  # TLS certificates and keys
  {% if TLS_DATA %}
  tls.crt: |
    {{ TLS_DATA.certificate | indent(4) }}
  tls.key: |
    {{ TLS_DATA.private_key | indent(4) }}
  {% if TLS_DATA.ca_certificate %}
  ca.crt: |
    {{ TLS_DATA.ca_certificate | indent(4) }}
  {% endif %}
  {% endif %}
{% endif %}

---
# External Secret (for integration with external secret stores)
{% if ENABLE_EXTERNAL_SECRET %}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ APP_NAME }}-external-secret
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: external-secrets
    managed-by: infrastructure-management-subagent
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    infrastructure.fortium.io/secret-store: "{{ EXTERNAL_SECRET_STORE }}"
spec:
  refreshInterval: {{ EXTERNAL_SECRET_REFRESH_INTERVAL | default("15m") }}
  secretStoreRef:
    name: {{ EXTERNAL_SECRET_STORE }}
    kind: {{ EXTERNAL_SECRET_STORE_KIND | default("SecretStore") }}
  
  target:
    name: {{ APP_NAME }}-external-secret-data
    creationPolicy: Owner
    {% if EXTERNAL_SECRET_TEMPLATE %}
    template:
      type: {{ EXTERNAL_SECRET_TEMPLATE.type | default("Opaque") }}
      {% if EXTERNAL_SECRET_TEMPLATE.metadata %}
      metadata:
        {{ EXTERNAL_SECRET_TEMPLATE.metadata | to_yaml | indent(8) }}
      {% endif %}
      {% if EXTERNAL_SECRET_TEMPLATE.data %}
      data:
        {{ EXTERNAL_SECRET_TEMPLATE.data | to_yaml | indent(8) }}
      {% endif %}
    {% endif %}
  
  data:
  {% for secret_ref in EXTERNAL_SECRET_DATA %}
  - secretKey: {{ secret_ref.secretKey }}
    remoteRef:
      key: {{ secret_ref.remoteRef.key }}
      {% if secret_ref.remoteRef.property %}
      property: {{ secret_ref.remoteRef.property }}
      {% endif %}
      {% if secret_ref.remoteRef.version %}
      version: {{ secret_ref.remoteRef.version }}
      {% endif %}
    {% if secret_ref.sourceRef %}
    sourceRef:
      {{ secret_ref.sourceRef | to_yaml | indent(6) }}
    {% endif %}
  {% endfor %}
  
  {% if EXTERNAL_SECRET_DATA_FROM %}
  dataFrom:
  {% for data_from in EXTERNAL_SECRET_DATA_FROM %}
  - extract:
      key: {{ data_from.key }}
      {% if data_from.version %}
      version: {{ data_from.version }}
      {% endif %}
      {% if data_from.property %}
      property: {{ data_from.property }}
      {% endif %}
    {% if data_from.rewrite %}
    rewrite:
      {{ data_from.rewrite | to_yaml | indent(6) }}
    {% endif %}
  {% endfor %}
  {% endif %}
{% endif %}

---
# Sealed Secret (for GitOps workflows with sealed-secrets)
{% if ENABLE_SEALED_SECRET %}
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: {{ APP_NAME }}-sealed-secret
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: sealed-secrets
    managed-by: infrastructure-management-subagent
  annotations:
    sealedsecrets.bitnami.com/cluster-wide: "{{ SEALED_SECRET_CLUSTER_WIDE | default('false') }}"
    sealedsecrets.bitnami.com/namespace-wide: "{{ SEALED_SECRET_NAMESPACE_WIDE | default('false') }}"
spec:
  encryptedData:
    {% for key, encrypted_value in SEALED_SECRET_DATA.items() %}
    {{ key }}: {{ encrypted_value }}
    {% endfor %}
  template:
    metadata:
      name: {{ APP_NAME }}-sealed-secret-data
      namespace: {{ NAMESPACE | default("default") }}
      labels:
        app: {{ APP_NAME }}
      annotations:
        infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    type: {{ SEALED_SECRET_TYPE | default("Opaque") }}
{% endif %}

---
# Service Account for RBAC (if needed)
{% if ENABLE_SERVICE_ACCOUNT %}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ SERVICE_ACCOUNT_NAME | default(APP_NAME) }}
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: service-account
    managed-by: infrastructure-management-subagent
  annotations:
    infrastructure.fortium.io/generated-by: "infrastructure-management-subagent"
    {% if SERVICE_ACCOUNT_ANNOTATIONS %}
    {% for key, value in SERVICE_ACCOUNT_ANNOTATIONS.items() %}
    {{ key }}: "{{ value }}"
    {% endfor %}
    {% endif %}
{% if SERVICE_ACCOUNT_IMAGE_PULL_SECRETS %}
imagePullSecrets:
{% for secret in SERVICE_ACCOUNT_IMAGE_PULL_SECRETS %}
- name: {{ secret }}
{% endfor %}
{% endif %}
{% if SERVICE_ACCOUNT_SECRETS %}
secrets:
{% for secret in SERVICE_ACCOUNT_SECRETS %}
- name: {{ secret }}
{% endfor %}
{% endif %}
automountServiceAccountToken: {{ SERVICE_ACCOUNT_AUTOMOUNT_TOKEN | default(true) }}
{% endif %}

---
# RBAC Role (if service account needs specific permissions)
{% if ENABLE_RBAC_ROLE %}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ APP_NAME }}-role
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: rbac
    managed-by: infrastructure-management-subagent
rules:
{% for rule in RBAC_RULES %}
- apiGroups: {{ rule.apiGroups | to_json }}
  resources: {{ rule.resources | to_json }}
  verbs: {{ rule.verbs | to_json }}
  {% if rule.resourceNames %}
  resourceNames: {{ rule.resourceNames | to_json }}
  {% endif %}
{% endfor %}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ APP_NAME }}-role-binding
  namespace: {{ NAMESPACE | default("default") }}
  labels:
    app: {{ APP_NAME }}
    component: rbac
    managed-by: infrastructure-management-subagent
subjects:
- kind: ServiceAccount
  name: {{ SERVICE_ACCOUNT_NAME | default(APP_NAME) }}
  namespace: {{ NAMESPACE | default("default") }}
roleRef:
  kind: Role
  name: {{ APP_NAME }}-role
  apiGroup: rbac.authorization.k8s.io
{% endif %}

---
# Cluster Role (for cluster-wide permissions)
{% if ENABLE_CLUSTER_ROLE %}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ APP_NAME }}-cluster-role
  labels:
    app: {{ APP_NAME }}
    component: rbac
    managed-by: infrastructure-management-subagent
rules:
{% for rule in CLUSTER_RBAC_RULES %}
- apiGroups: {{ rule.apiGroups | to_json }}
  resources: {{ rule.resources | to_json }}
  verbs: {{ rule.verbs | to_json }}
  {% if rule.resourceNames %}
  resourceNames: {{ rule.resourceNames | to_json }}
  {% endif %}
{% endfor %}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ APP_NAME }}-cluster-role-binding
  labels:
    app: {{ APP_NAME }}
    component: rbac
    managed-by: infrastructure-management-subagent
subjects:
- kind: ServiceAccount
  name: {{ SERVICE_ACCOUNT_NAME | default(APP_NAME) }}
  namespace: {{ NAMESPACE | default("default") }}
roleRef:
  kind: ClusterRole
  name: {{ APP_NAME }}-cluster-role
  apiGroup: rbac.authorization.k8s.io
{% endif %}