# ECS Module - Production-Ready ECS Cluster with Auto-Scaling and Load Balancing
# Generated by Infrastructure Management Subagent v1.0

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Data sources
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

# ECS Cluster
resource "aws_ecs_cluster" "main" {
  name = var.cluster_name

  configuration {
    execute_command_configuration {
      kms_key_id = var.enable_execute_command ? aws_kms_key.ecs_exec[0].arn : null
      logging    = var.enable_execute_command ? "OVERRIDE" : "DEFAULT"

      log_configuration {
        cloud_watch_encryption_enabled = var.enable_execute_command
        cloud_watch_log_group_name     = var.enable_execute_command ? aws_cloudwatch_log_group.ecs_exec[0].name : null
      }
    }
  }

  setting {
    name  = "containerInsights"
    value = var.enable_container_insights ? "enabled" : "disabled"
  }

  tags = merge(
    var.tags,
    {
      Name = var.cluster_name
    }
  )
}

# ECS Cluster Capacity Providers
resource "aws_ecs_cluster_capacity_providers" "main" {
  cluster_name = aws_ecs_cluster.main.name

  capacity_providers = var.capacity_providers

  dynamic "default_capacity_provider_strategy" {
    for_each = var.default_capacity_provider_strategy
    content {
      capacity_provider = default_capacity_provider_strategy.value.capacity_provider
      weight           = default_capacity_provider_strategy.value.weight
      base             = default_capacity_provider_strategy.value.base
    }
  }

  depends_on = [aws_ecs_capacity_provider.main]
}

# Auto Scaling Group (for EC2 capacity provider)
resource "aws_autoscaling_group" "ecs_asg" {
  count = var.create_ec2_capacity_provider ? 1 : 0

  name                = "${var.cluster_name}-asg"
  vpc_zone_identifier = var.subnet_ids
  target_group_arns   = var.target_group_arns
  health_check_type   = var.health_check_type
  health_check_grace_period = var.health_check_grace_period

  min_size         = var.asg_min_size
  max_size         = var.asg_max_size
  desired_capacity = var.asg_desired_capacity

  launch_template {
    id      = aws_launch_template.ecs_lt[0].id
    version = aws_launch_template.ecs_lt[0].latest_version
  }

  enabled_metrics = var.enabled_metrics

  dynamic "tag" {
    for_each = merge(
      var.tags,
      {
        Name = "${var.cluster_name}-asg"
        AmazonECSManaged = true
      }
    )
    content {
      key                 = tag.key
      value               = tag.value
      propagate_at_launch = true
    }
  }

  instance_refresh {
    strategy = "Rolling"
    preferences {
      min_healthy_percentage = 50
      instance_warmup        = 300
    }
  }
}

# Launch Template for ECS instances
resource "aws_launch_template" "ecs_lt" {
  count = var.create_ec2_capacity_provider ? 1 : 0

  name_prefix   = "${var.cluster_name}-lt-"
  image_id      = var.ami_id != "" ? var.ami_id : data.aws_ami.ecs_optimized[0].id
  instance_type = var.instance_type
  key_name      = var.key_name

  vpc_security_group_ids = var.security_group_ids

  iam_instance_profile {
    name = aws_iam_instance_profile.ecs_instance_profile[0].name
  }

  user_data = base64encode(templatefile("${path.module}/user_data.tpl", {
    cluster_name = aws_ecs_cluster.main.name
  }))

  block_device_mappings {
    device_name = "/dev/xvda"
    ebs {
      volume_size           = var.root_volume_size
      volume_type           = var.root_volume_type
      encrypted             = var.root_volume_encrypted
      delete_on_termination = true
    }
  }

  monitoring {
    enabled = var.enable_detailed_monitoring
  }

  metadata_options {
    http_endpoint               = "enabled"
    http_tokens                 = "required"
    http_put_response_hop_limit = 2
    instance_metadata_tags      = "enabled"
  }

  tag_specifications {
    resource_type = "instance"
    tags = merge(
      var.tags,
      {
        Name = "${var.cluster_name}-instance"
      }
    )
  }

  tag_specifications {
    resource_type = "volume"
    tags = merge(
      var.tags,
      {
        Name = "${var.cluster_name}-volume"
      }
    )
  }

  tags = var.tags

  lifecycle {
    create_before_destroy = true
  }
}

# ECS Optimized AMI
data "aws_ami" "ecs_optimized" {
  count = var.create_ec2_capacity_provider && var.ami_id == "" ? 1 : 0

  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-ecs-hvm-*-x86_64-ebs"]
  }

  filter {
    name   = "state"
    values = ["available"]
  }
}

# ECS Capacity Provider
resource "aws_ecs_capacity_provider" "main" {
  count = var.create_ec2_capacity_provider ? 1 : 0

  name = "${var.cluster_name}-cp"

  auto_scaling_group_provider {
    auto_scaling_group_arn         = aws_autoscaling_group.ecs_asg[0].arn
    managed_termination_protection = var.managed_termination_protection

    managed_scaling {
      maximum_scaling_step_size = var.maximum_scaling_step_size
      minimum_scaling_step_size = var.minimum_scaling_step_size
      status                    = var.managed_scaling_status
      target_capacity          = var.target_capacity
    }
  }

  tags = var.tags
}

# Application Load Balancer
resource "aws_lb" "main" {
  count = var.create_load_balancer ? 1 : 0

  name               = "${var.cluster_name}-alb"
  load_balancer_type = "application"
  security_groups    = var.lb_security_group_ids
  subnets            = var.lb_subnet_ids

  enable_deletion_protection       = var.enable_deletion_protection
  enable_cross_zone_load_balancing = var.enable_cross_zone_load_balancing
  enable_http2                     = var.enable_http2
  enable_waf_fail_open            = var.enable_waf_fail_open
  drop_invalid_header_fields      = var.drop_invalid_header_fields

  access_logs {
    bucket  = var.access_logs_bucket
    prefix  = var.access_logs_prefix
    enabled = var.enable_access_logs
  }

  tags = merge(
    var.tags,
    {
      Name = "${var.cluster_name}-alb"
    }
  )
}

# ALB Target Group
resource "aws_lb_target_group" "main" {
  count = var.create_load_balancer ? 1 : 0

  name        = "${var.cluster_name}-tg"
  port        = var.target_group_port
  protocol    = var.target_group_protocol
  vpc_id      = var.vpc_id
  target_type = var.target_type

  health_check {
    enabled             = var.health_check_enabled
    healthy_threshold   = var.health_check_healthy_threshold
    interval            = var.health_check_interval
    matcher             = var.health_check_matcher
    path                = var.health_check_path
    port                = var.health_check_port
    protocol            = var.health_check_protocol
    timeout             = var.health_check_timeout
    unhealthy_threshold = var.health_check_unhealthy_threshold
  }

  deregistration_delay = var.deregistration_delay

  stickiness {
    type            = var.stickiness_type
    cookie_duration = var.stickiness_cookie_duration
    enabled         = var.stickiness_enabled
  }

  tags = merge(
    var.tags,
    {
      Name = "${var.cluster_name}-tg"
    }
  )

  lifecycle {
    create_before_destroy = true
  }
}

# ALB Listener (HTTP)
resource "aws_lb_listener" "http" {
  count = var.create_load_balancer && var.enable_http_listener ? 1 : 0

  load_balancer_arn = aws_lb.main[0].arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type = var.redirect_http_to_https ? "redirect" : "forward"

    dynamic "redirect" {
      for_each = var.redirect_http_to_https ? [1] : []
      content {
        port        = "443"
        protocol    = "HTTPS"
        status_code = "HTTP_301"
      }
    }

    dynamic "forward" {
      for_each = var.redirect_http_to_https ? [] : [1]
      content {
        target_group {
          arn = aws_lb_target_group.main[0].arn
        }
      }
    }
  }

  tags = var.tags
}

# ALB Listener (HTTPS)
resource "aws_lb_listener" "https" {
  count = var.create_load_balancer && var.enable_https_listener ? 1 : 0

  load_balancer_arn = aws_lb.main[0].arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = var.ssl_policy
  certificate_arn   = var.certificate_arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.main[0].arn
  }

  tags = var.tags
}

# CloudWatch Log Group for ECS Execute Command
resource "aws_cloudwatch_log_group" "ecs_exec" {
  count = var.enable_execute_command ? 1 : 0

  name              = "/aws/ecs/execute-command/${var.cluster_name}"
  retention_in_days = var.cloudwatch_log_retention_days

  tags = var.tags
}

# KMS Key for ECS Execute Command
resource "aws_kms_key" "ecs_exec" {
  count = var.enable_execute_command ? 1 : 0

  description             = "KMS key for ECS Execute Command encryption"
  deletion_window_in_days = var.kms_key_deletion_window

  tags = merge(
    var.tags,
    {
      Name = "${var.cluster_name}-ecs-exec-key"
    }
  )
}

resource "aws_kms_alias" "ecs_exec" {
  count = var.enable_execute_command ? 1 : 0

  name          = "alias/${var.cluster_name}-ecs-exec"
  target_key_id = aws_kms_key.ecs_exec[0].key_id
}

# IAM Resources for ECS instances
resource "aws_iam_role" "ecs_instance_role" {
  count = var.create_ec2_capacity_provider ? 1 : 0

  name_prefix = "${var.cluster_name}-ecs-instance-"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })

  tags = var.tags
}

resource "aws_iam_role_policy_attachment" "ecs_instance_role_policy" {
  count = var.create_ec2_capacity_provider ? 1 : 0

  role       = aws_iam_role.ecs_instance_role[0].name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
}

resource "aws_iam_role_policy_attachment" "ecs_instance_ssm_policy" {
  count = var.create_ec2_capacity_provider && var.enable_ssm ? 1 : 0

  role       = aws_iam_role.ecs_instance_role[0].name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_instance_profile" "ecs_instance_profile" {
  count = var.create_ec2_capacity_provider ? 1 : 0

  name_prefix = "${var.cluster_name}-ecs-instance-"
  role        = aws_iam_role.ecs_instance_role[0].name

  tags = var.tags
}

# IAM Role for ECS Task Execution
resource "aws_iam_role" "ecs_task_execution_role" {
  count = var.create_task_execution_role ? 1 : 0

  name_prefix = "${var.cluster_name}-ecs-task-execution-"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })

  tags = var.tags
}

resource "aws_iam_role_policy_attachment" "ecs_task_execution_role_policy" {
  count = var.create_task_execution_role ? 1 : 0

  role       = aws_iam_role.ecs_task_execution_role[0].name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# Additional policy for ECS task execution role (for secrets and parameters)
resource "aws_iam_role_policy" "ecs_task_execution_secrets" {
  count = var.create_task_execution_role && length(var.secrets_arns) > 0 ? 1 : 0

  name_prefix = "${var.cluster_name}-ecs-task-execution-secrets-"
  role        = aws_iam_role.ecs_task_execution_role[0].id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "secretsmanager:GetSecretValue",
          "ssm:GetParameters",
          "ssm:GetParameter",
          "ssm:GetParametersByPath"
        ]
        Resource = var.secrets_arns
      },
      {
        Effect = "Allow"
        Action = [
          "kms:Decrypt"
        ]
        Resource = var.kms_key_arns
      }
    ]
  })
}

# CloudWatch Log Group for ECS services
resource "aws_cloudwatch_log_group" "ecs_services" {
  count = var.create_cloudwatch_log_group ? 1 : 0

  name              = "/ecs/${var.cluster_name}"
  retention_in_days = var.cloudwatch_log_retention_days

  tags = var.tags
}

# Service Discovery Namespace
resource "aws_service_discovery_private_dns_namespace" "main" {
  count = var.create_service_discovery ? 1 : 0

  name        = var.service_discovery_namespace
  description = "Service discovery namespace for ${var.cluster_name}"
  vpc         = var.vpc_id

  tags = var.tags
}

# Security Group for ALB
resource "aws_security_group" "alb" {
  count = var.create_load_balancer && length(var.lb_security_group_ids) == 0 ? 1 : 0

  name_prefix = "${var.cluster_name}-alb-"
  description = "Security group for ALB"
  vpc_id      = var.vpc_id

  # HTTP
  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = var.alb_ingress_cidr_blocks
  }

  # HTTPS
  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = var.alb_ingress_cidr_blocks
  }

  egress {
    description = "All outbound traffic"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(
    var.tags,
    {
      Name = "${var.cluster_name}-alb-sg"
    }
  )

  lifecycle {
    create_before_destroy = true
  }
}

# Security Group for ECS instances
resource "aws_security_group" "ecs_instances" {
  count = var.create_ec2_capacity_provider && length(var.security_group_ids) == 0 ? 1 : 0

  name_prefix = "${var.cluster_name}-ecs-instances-"
  description = "Security group for ECS instances"
  vpc_id      = var.vpc_id

  ingress {
    description     = "Traffic from ALB"
    from_port       = 0
    to_port         = 65535
    protocol        = "tcp"
    security_groups = var.create_load_balancer ? [aws_security_group.alb[0].id] : []
  }

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = var.ssh_cidr_blocks
  }

  egress {
    description = "All outbound traffic"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(
    var.tags,
    {
      Name = "${var.cluster_name}-ecs-instances-sg"
    }
  )

  lifecycle {
    create_before_destroy = true
  }
}