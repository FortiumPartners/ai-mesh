# VPC Module Variables
# Generated by Infrastructure Management Subagent v1.0

variable "name" {
  description = "Name to be used on all the resources as identifier"
  type        = string
  validation {
    condition     = length(var.name) > 0 && length(var.name) <= 32
    error_message = "Name must be between 1 and 32 characters."
  }
}

variable "aws_region" {
  description = "AWS region where resources will be created"
  type        = string
  default     = "us-west-2"
}

variable "vpc_cidr" {
  description = "The IPv4 CIDR block for the VPC"
  type        = string
  default     = "10.0.0.0/16"
  validation {
    condition     = can(cidrhost(var.vpc_cidr, 0))
    error_message = "VPC CIDR must be a valid IPv4 CIDR block."
  }
}

variable "instance_tenancy" {
  description = "A tenancy option for instances launched into the VPC"
  type        = string
  default     = "default"
  validation {
    condition     = contains(["default", "dedicated"], var.instance_tenancy)
    error_message = "Instance tenancy must be either 'default' or 'dedicated'."
  }
}

variable "enable_dns_hostnames" {
  description = "Should be true to enable DNS hostnames in the VPC"
  type        = bool
  default     = true
}

variable "enable_dns_support" {
  description = "Should be true to enable DNS support in the VPC"
  type        = bool
  default     = true
}

variable "enable_network_address_usage_metrics" {
  description = "Determines whether network address usage metrics are disabled for your VPC"
  type        = bool
  default     = false
}

variable "enable_internet_gateway" {
  description = "Should be true if you want to provision an internet gateway to give the VPC access to the outside world"
  type        = bool
  default     = true
}

variable "enable_nat_gateway" {
  description = "Should be true if you want to provision NAT Gateways for each of your private networks"
  type        = bool
  default     = true
}

variable "single_nat_gateway" {
  description = "Should be true if you want to provision a single shared NAT Gateway across all of your private networks"
  type        = bool
  default     = false
}

variable "map_public_ip_on_launch" {
  description = "Should be false if you do not want to auto-assign public IP on launch"
  type        = bool
  default     = true
}

variable "public_subnet_cidrs" {
  description = "A list of public subnet CIDR blocks inside the VPC"
  type        = list(string)
  default     = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]
  validation {
    condition     = length(var.public_subnet_cidrs) <= 16
    error_message = "Maximum of 16 public subnets allowed."
  }
}

variable "private_subnet_cidrs" {
  description = "A list of private subnet CIDR blocks inside the VPC"
  type        = list(string)
  default     = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  validation {
    condition     = length(var.private_subnet_cidrs) <= 16
    error_message = "Maximum of 16 private subnets allowed."
  }
}

variable "database_subnet_cidrs" {
  description = "A list of database subnet CIDR blocks inside the VPC"
  type        = list(string)
  default     = ["10.0.201.0/24", "10.0.202.0/24", "10.0.203.0/24"]
  validation {
    condition     = length(var.database_subnet_cidrs) <= 16
    error_message = "Maximum of 16 database subnets allowed."
  }
}

variable "database_route_table_tags" {
  description = "Additional tags for the database route tables"
  type        = map(string)
  default = {
    public_access = false
  }
}

variable "enable_ipv6" {
  description = "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC"
  type        = bool
  default     = false
}

variable "assign_ipv6_address_on_creation" {
  description = "Assign IPv6 address on subnet creation"
  type        = bool
  default     = false
}

variable "enable_flow_logs" {
  description = "Whether or not to enable VPC Flow Logs"
  type        = bool
  default     = true
}

variable "flow_logs_traffic_type" {
  description = "The type of traffic to capture. Valid values: ACCEPT, REJECT, ALL"
  type        = string
  default     = "ALL"
  validation {
    condition     = contains(["ACCEPT", "REJECT", "ALL"], var.flow_logs_traffic_type)
    error_message = "Flow logs traffic type must be ACCEPT, REJECT, or ALL."
  }
}

variable "flow_logs_retention_days" {
  description = "Specifies the number of days you want to retain log events in CloudWatch Logs"
  type        = number
  default     = 14
  validation {
    condition = contains([
      1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653
    ], var.flow_logs_retention_days)
    error_message = "Flow logs retention days must be a valid CloudWatch Logs retention period."
  }
}

variable "enable_dhcp_options" {
  description = "Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type"
  type        = bool
  default     = false
}

variable "dhcp_options_domain_name" {
  description = "Specifies DNS name for DHCP options set (requires enable_dhcp_options set to true)"
  type        = string
  default     = ""
}

variable "dhcp_options_domain_name_servers" {
  description = "Specify a list of DNS server addresses for DHCP options set, default to AWS provided (requires enable_dhcp_options set to true)"
  type        = list(string)
  default     = ["AmazonProvidedDNS"]
}

variable "dhcp_options_ntp_servers" {
  description = "Specify a list of NTP servers for DHCP options set (requires enable_dhcp_options set to true)"
  type        = list(string)
  default     = []
}

variable "dhcp_options_netbios_name_servers" {
  description = "Specify a list of netbios servers for DHCP options set (requires enable_dhcp_options set to true)"
  type        = list(string)
  default     = []
}

variable "dhcp_options_netbios_node_type" {
  description = "Specify netbios node_type for DHCP options set (requires enable_dhcp_options set to true)"
  type        = string
  default     = ""
}

variable "enable_network_acls" {
  description = "Whether to create network ACLs for additional security layer"
  type        = bool
  default     = true
}

variable "cluster_name" {
  description = "Name of the EKS cluster (if applicable) for proper resource tagging"
  type        = string
  default     = ""
}

variable "tags" {
  description = "A map of tags to add to all resources"
  type        = map(string)
  default = {
    Terraform                = "true"
    Environment             = "dev"
    ManagedBy              = "infrastructure-management-subagent"
    "fortium.io/managed"   = "true"
  }
  validation {
    condition = alltrue([
      for tag_key, tag_value in var.tags :
      length(tag_key) <= 128 && length(tag_value) <= 256
    ])
    error_message = "Tag keys must be <= 128 characters and values <= 256 characters."
  }
}

# Security and Compliance Variables
variable "enable_private_dns_hostname" {
  description = "Whether to enable private DNS hostname resolution for the VPC"
  type        = bool
  default     = true
}

variable "enable_private_dns_support" {
  description = "Whether to enable private DNS support for the VPC"
  type        = bool
  default     = true
}

variable "vpc_endpoint_services" {
  description = "List of AWS services for which to create VPC endpoints"
  type        = list(string)
  default     = []
  # Common services: ["s3", "dynamodb", "ec2", "ssm", "ssmmessages", "ec2messages", "logs", "monitoring"]
}

variable "enable_s3_endpoint" {
  description = "Should be true if you want to provision an S3 VPC Endpoint to the VPC"
  type        = bool
  default     = false
}

variable "enable_dynamodb_endpoint" {
  description = "Should be true if you want to provision a DynamoDB VPC Endpoint to the VPC"
  type        = bool
  default     = false
}

# Cost Optimization Variables
variable "nat_gateway_per_az" {
  description = "Should be true if you want only one NAT Gateway per availability zone. Setting to false will provision one NAT Gateway per public subnet"
  type        = bool
  default     = true
}

variable "reuse_nat_ips" {
  description = "Should be true if you don't want EIPs to be created for your NAT Gateways and will instead pass them in via the 'external_nat_ip_ids' variable"
  type        = bool
  default     = false
}

variable "external_nat_ip_ids" {
  description = "List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse_nat_ips)"
  type        = list(string)
  default     = []
}

# Performance and Monitoring Variables
variable "enable_vpc_endpoint_dns" {
  description = "Whether to enable private DNS for VPC endpoints"
  type        = bool
  default     = true
}

variable "flow_logs_log_format" {
  description = "The fields to include in the flow log record, in the order in which they should appear"
  type        = string
  default     = null
}

variable "flow_logs_max_aggregation_interval" {
  description = "The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. Valid values: 60 seconds or 600 seconds"
  type        = number
  default     = 600
  validation {
    condition     = contains([60, 600], var.flow_logs_max_aggregation_interval)
    error_message = "Flow logs max aggregation interval must be either 60 or 600 seconds."
  }
}

# Advanced Networking Variables
variable "secondary_cidr_blocks" {
  description = "List of secondary CIDR blocks to associate with the VPC to extend the IP address pool"
  type        = list(string)
  default     = []
}

variable "enable_classiclink" {
  description = "Should be true to enable ClassicLink for the VPC"
  type        = bool
  default     = false
}

variable "enable_classiclink_dns_support" {
  description = "Should be true to enable ClassicLink DNS Support for the VPC"
  type        = bool
  default     = false
}

# Environment-specific Variables
variable "environment" {
  description = "Environment name (e.g., dev, staging, prod)"
  type        = string
  default     = "dev"
  validation {
    condition     = contains(["dev", "staging", "prod", "test"], var.environment)
    error_message = "Environment must be one of: dev, staging, prod, test."
  }
}

variable "project" {
  description = "Project name for resource organization and billing"
  type        = string
  default     = ""
}

variable "owner" {
  description = "Owner of the infrastructure (team or individual)"
  type        = string
  default     = ""
}

# High Availability Configuration
variable "multi_az_nat_gateway" {
  description = "Should be true if you want to have one NAT Gateway per availability zone"
  type        = bool
  default     = true
}

variable "enable_dns64" {
  description = "Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations"
  type        = bool
  default     = false
}

variable "enable_resource_name_dns_aaaa_record_on_launch" {
  description = "Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records"
  type        = bool
  default     = false
}

variable "enable_resource_name_dns_a_record_on_launch" {
  description = "Indicates whether to respond to DNS queries for instance hostnames with DNS A records"
  type        = bool
  default     = false
}

variable "private_dns_hostname_type_on_launch" {
  description = "The type of hostnames to assign to instances in the subnet at launch"
  type        = string
  default     = "ip-name"
  validation {
    condition     = contains(["ip-name", "resource-name"], var.private_dns_hostname_type_on_launch)
    error_message = "Private DNS hostname type must be either 'ip-name' or 'resource-name'."
  }
}

# Security Groups
variable "default_security_group_ingress" {
  description = "List of maps of ingress rules to set on the default security group"
  type        = list(map(string))
  default     = []
}

variable "default_security_group_egress" {
  description = "List of maps of egress rules to set on the default security group"
  type        = list(map(string))
  default     = []
}

variable "manage_default_security_group" {
  description = "Should be true to adopt and manage default security group"
  type        = bool
  default     = true
}