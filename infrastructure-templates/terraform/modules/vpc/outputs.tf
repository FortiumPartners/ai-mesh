# VPC Module Outputs
# Generated by Infrastructure Management Subagent v1.0

# VPC
output "vpc_id" {
  description = "ID of the VPC"
  value       = aws_vpc.main.id
}

output "vpc_arn" {
  description = "The ARN of the VPC"
  value       = aws_vpc.main.arn
}

output "vpc_cidr_block" {
  description = "The CIDR block of the VPC"
  value       = aws_vpc.main.cidr_block
}

output "vpc_instance_tenancy" {
  description = "Tenancy of instances spin up within VPC"
  value       = aws_vpc.main.instance_tenancy
}

output "vpc_enable_dns_support" {
  description = "Whether or not the VPC has DNS support"
  value       = aws_vpc.main.enable_dns_support
}

output "vpc_enable_dns_hostnames" {
  description = "Whether or not the VPC has DNS hostname support"
  value       = aws_vpc.main.enable_dns_hostnames
}

output "vpc_main_route_table_id" {
  description = "The ID of the main route table associated with this VPC"
  value       = aws_vpc.main.main_route_table_id
}

output "vpc_default_network_acl_id" {
  description = "The ID of the default network ACL"
  value       = aws_vpc.main.default_network_acl_id
}

output "vpc_default_security_group_id" {
  description = "The ID of the security group created by default on VPC creation"
  value       = aws_vpc.main.default_security_group_id
}

output "vpc_default_route_table_id" {
  description = "The ID of the default route table"
  value       = aws_vpc.main.default_route_table_id
}

output "vpc_ipv6_association_id" {
  description = "The association ID for the IPv6 CIDR block"
  value       = try(aws_vpc_ipv6_cidr_block_association.main[0].id, null)
}

output "vpc_ipv6_cidr_block" {
  description = "The IPv6 CIDR block"
  value       = try(aws_vpc_ipv6_cidr_block_association.main[0].ipv6_cidr_block, null)
}

output "vpc_secondary_cidr_blocks" {
  description = "List of secondary CIDR blocks of the VPC"
  value       = compact(aws_vpc.main.cidr_block_associations[*].cidr_block)
}

output "vpc_owner_id" {
  description = "The ID of the AWS account that owns the VPC"
  value       = aws_vpc.main.owner_id
}

# Internet Gateway
output "igw_id" {
  description = "The ID of the Internet Gateway"
  value       = try(aws_internet_gateway.main[0].id, null)
}

output "igw_arn" {
  description = "The ARN of the Internet Gateway"
  value       = try(aws_internet_gateway.main[0].arn, null)
}

# NAT gateways
output "nat_ids" {
  description = "List of IDs of the NAT Gateways"
  value       = aws_nat_gateway.main[*].id
}

output "nat_public_ips" {
  description = "List of public Elastic IPs of the NAT Gateways"
  value       = aws_nat_gateway.main[*].public_ip
}

output "natgw_ids" {
  description = "List of IDs of the NAT Gateways"
  value       = aws_nat_gateway.main[*].id
}

# Elastic IPs
output "nat_eip_ids" {
  description = "List of IDs of the Elastic IPs for NAT Gateways"
  value       = aws_eip.nat[*].id
}

output "nat_eip_public_ips" {
  description = "List of public Elastic IPs for NAT Gateways"
  value       = aws_eip.nat[*].public_ip
}

# Subnets
output "private_subnets" {
  description = "List of IDs of private subnets"
  value       = aws_subnet.private[*].id
}

output "private_subnet_arns" {
  description = "List of ARNs of private subnets"
  value       = aws_subnet.private[*].arn
}

output "private_subnets_cidr_blocks" {
  description = "List of CIDR blocks of the private subnets"
  value       = aws_subnet.private[*].cidr_block
}

output "private_subnets_ipv6_cidr_blocks" {
  description = "List of IPv6 CIDR blocks assigned to the private subnets"
  value       = compact(aws_subnet.private[*].ipv6_cidr_block)
}

output "public_subnets" {
  description = "List of IDs of public subnets"
  value       = aws_subnet.public[*].id
}

output "public_subnet_arns" {
  description = "List of ARNs of public subnets"
  value       = aws_subnet.public[*].arn
}

output "public_subnets_cidr_blocks" {
  description = "List of CIDR blocks of the public subnets"
  value       = aws_subnet.public[*].cidr_block
}

output "public_subnets_ipv6_cidr_blocks" {
  description = "List of IPv6 CIDR blocks assigned to the public subnets"
  value       = compact(aws_subnet.public[*].ipv6_cidr_block)
}

output "database_subnets" {
  description = "List of IDs of database subnets"
  value       = aws_subnet.database[*].id
}

output "database_subnet_arns" {
  description = "List of ARNs of database subnets"
  value       = aws_subnet.database[*].arn
}

output "database_subnets_cidr_blocks" {
  description = "List of CIDR blocks of the database subnets"
  value       = aws_subnet.database[*].cidr_block
}

output "database_subnets_ipv6_cidr_blocks" {
  description = "List of IPv6 CIDR blocks assigned to the database subnets"
  value       = compact(aws_subnet.database[*].ipv6_cidr_block)
}

output "database_subnet_group" {
  description = "ID of database subnet group"
  value       = try(aws_db_subnet_group.database[0].id, null)
}

output "database_subnet_group_name" {
  description = "Name of database subnet group"
  value       = try(aws_db_subnet_group.database[0].name, null)
}

# Route tables
output "private_route_table_ids" {
  description = "List of IDs of the private route tables"
  value       = aws_route_table.private[*].id
}

output "public_route_table_ids" {
  description = "List of IDs of the public route tables"
  value       = aws_route_table.public[*].id
}

output "database_route_table_ids" {
  description = "List of IDs of the database route tables"
  value       = aws_route_table.database[*].id
}

output "private_internet_gateway_route_id" {
  description = "ID of the internet gateway route"
  value       = try(aws_route.private_nat_gateway[0].id, null)
}

output "private_nat_gateway_route_ids" {
  description = "List of IDs of the private nat gateway route"
  value       = aws_route.private_nat_gateway[*].id
}

output "database_internet_gateway_route_id" {
  description = "ID of the database internet gateway route"
  value       = try(aws_route.database_nat_gateway[0].id, null)
}

output "database_nat_gateway_route_ids" {
  description = "List of IDs of the database nat gateway route"
  value       = aws_route.database_nat_gateway[*].id
}

output "public_internet_gateway_route_id" {
  description = "ID of the public internet gateway route"
  value       = try(aws_route.public_internet_gateway[0].id, null)
}

output "public_internet_gateway_ipv6_route_id" {
  description = "ID of the IPv6 internet gateway route"
  value       = try(aws_route.public_ipv6_internet_gateway[0].id, null)
}

# Route table associations
output "private_route_table_association_ids" {
  description = "List of IDs of the private route table association"
  value       = aws_route_table_association.private[*].id
}

output "public_route_table_association_ids" {
  description = "List of IDs of the public route table association"
  value       = aws_route_table_association.public[*].id
}

output "database_route_table_association_ids" {
  description = "List of IDs of the database route table association"
  value       = aws_route_table_association.database[*].id
}

# DHCP Options Set
output "dhcp_options_id" {
  description = "The ID of the DHCP Options Set"
  value       = try(aws_vpc_dhcp_options.main[0].id, null)
}

# VPC Flow Logs
output "vpc_flow_log_id" {
  description = "The ID of the Flow Log resource"
  value       = try(aws_flow_log.vpc_flow_log[0].id, null)
}

output "vpc_flow_log_cloudwatch_iam_role_arn" {
  description = "The ARN of the IAM role used when pushing logs to Cloudwatch log group"
  value       = try(aws_iam_role.flow_log[0].arn, null)
}

# Network ACLs
output "default_network_acl_id" {
  description = "The ID of the default network ACL"
  value       = aws_vpc.main.default_network_acl_id
}

output "public_network_acl_id" {
  description = "ID of the public network ACL"
  value       = try(aws_network_acl.public[0].id, null)
}

output "public_network_acl_arn" {
  description = "ARN of the public network ACL"
  value       = try(aws_network_acl.public[0].arn, null)
}

output "private_network_acl_id" {
  description = "ID of the private network ACL"
  value       = try(aws_network_acl.private[0].id, null)
}

output "private_network_acl_arn" {
  description = "ARN of the private network ACL"
  value       = try(aws_network_acl.private[0].arn, null)
}

# Availability Zones
output "azs" {
  description = "A list of availability zones specified as argument to this module"
  value       = data.aws_availability_zones.available.names
}

output "availability_zones" {
  description = "List of availability zones where subnets were created"
  value       = data.aws_availability_zones.available.names
}

# Useful computed values
output "vpc_tags" {
  description = "Tags applied to the VPC"
  value       = aws_vpc.main.tags
}

output "igw_tags" {
  description = "Tags applied to the Internet Gateway"
  value       = try(aws_internet_gateway.main[0].tags, null)
}

output "private_subnet_tags" {
  description = "Tags applied to private subnets"
  value       = [for subnet in aws_subnet.private : subnet.tags]
}

output "public_subnet_tags" {
  description = "Tags applied to public subnets"
  value       = [for subnet in aws_subnet.public : subnet.tags]
}

output "database_subnet_tags" {
  description = "Tags applied to database subnets"
  value       = [for subnet in aws_subnet.database : subnet.tags]
}

# EKS specific outputs
output "private_subnets_with_tags" {
  description = "Map of private subnet IDs with their tags for EKS integration"
  value = {
    for subnet in aws_subnet.private :
    subnet.id => subnet.tags
  }
}

output "public_subnets_with_tags" {
  description = "Map of public subnet IDs with their tags for EKS integration"
  value = {
    for subnet in aws_subnet.public :
    subnet.id => subnet.tags
  }
}

# Subnet group for different tiers
output "subnet_groups" {
  description = "Map of subnet groups by tier"
  value = {
    public   = aws_subnet.public[*].id
    private  = aws_subnet.private[*].id
    database = aws_subnet.database[*].id
  }
}

# CIDR block information
output "cidr_block_associations" {
  description = "List of CIDR block associations"
  value = [
    {
      cidr_block = aws_vpc.main.cidr_block
      state      = "associated"
    }
  ]
}

# Cross-reference mappings
output "availability_zone_to_private_subnet" {
  description = "Map from availability zone to private subnet ID"
  value = zipmap(
    [for i, subnet in aws_subnet.private : data.aws_availability_zones.available.names[i % length(data.aws_availability_zones.available.names)]],
    aws_subnet.private[*].id
  )
}

output "availability_zone_to_public_subnet" {
  description = "Map from availability zone to public subnet ID"
  value = zipmap(
    [for i, subnet in aws_subnet.public : data.aws_availability_zones.available.names[i % length(data.aws_availability_zones.available.names)]],
    aws_subnet.public[*].id
  )
}

output "availability_zone_to_database_subnet" {
  description = "Map from availability zone to database subnet ID"
  value = zipmap(
    [for i, subnet in aws_subnet.database : data.aws_availability_zones.available.names[i % length(data.aws_availability_zones.available.names)]],
    aws_subnet.database[*].id
  )
}

# Security and monitoring
output "flow_logs_enabled" {
  description = "Whether VPC Flow Logs are enabled"
  value       = var.enable_flow_logs
}

output "network_acls_enabled" {
  description = "Whether Network ACLs are enabled"
  value       = var.enable_network_acls
}

# Cost optimization information
output "nat_gateway_count" {
  description = "Number of NAT Gateways created"
  value       = length(aws_nat_gateway.main)
}

output "nat_gateway_cost_optimization" {
  description = "NAT Gateway configuration for cost optimization"
  value = {
    single_nat_gateway = var.single_nat_gateway
    nat_gateway_count  = length(aws_nat_gateway.main)
    estimated_monthly_cost_usd = length(aws_nat_gateway.main) * 45.36  # Approximate cost per NAT Gateway
  }
}

# Environment and project information
output "environment_info" {
  description = "Environment information for this VPC"
  value = {
    environment = var.environment
    project     = var.project
    owner       = var.owner
    region      = var.aws_region
  }
}