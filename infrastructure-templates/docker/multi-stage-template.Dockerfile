# Multi-Stage Docker Build Template with Security Best Practices
# Generated by Infrastructure Management Subagent v1.0
# Optimized for size, security, and performance

# ==============================================================================
# Build Stage - Development Dependencies and Build Process
# ==============================================================================

FROM {{ BASE_BUILD_IMAGE | default("node:18-alpine") }} AS builder

# Set working directory
WORKDIR {{ WORKDIR | default("/app") }}

# Install build dependencies (if specified)
{% if BUILD_DEPENDENCIES %}
RUN apk add --no-cache {{ BUILD_DEPENDENCIES | join(" ") }}
{% endif %}

# Copy package files first for better layer caching
{% if PACKAGE_FILES %}
{% for file in PACKAGE_FILES %}
COPY {{ file.src }} {{ file.dest }}
{% endfor %}
{% endif %}

# Install dependencies
{% if PACKAGE_MANAGER == "npm" %}
# Clean install for production
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# Install development dependencies for build
RUN npm ci --no-audit --no-fund
{% elif PACKAGE_MANAGER == "yarn" %}
RUN yarn install --frozen-lockfile --production=false && \
    yarn cache clean
{% elif PACKAGE_MANAGER == "pip" %}
# Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt
{% elif PACKAGE_MANAGER == "go" %}
# Go modules
COPY go.mod go.sum ./
RUN go mod download && go mod verify
{% endif %}

# Copy source code
COPY {{ SOURCE_DIR | default(".") }} .

# Build the application
{% if BUILD_COMMAND %}
RUN {{ BUILD_COMMAND }}
{% elif PACKAGE_MANAGER == "npm" %}
RUN npm run build
{% elif PACKAGE_MANAGER == "yarn" %}
RUN yarn build
{% elif PACKAGE_MANAGER == "go" %}
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o {{ OUTPUT_BINARY | default("app") }} .
{% endif %}

# ==============================================================================
# Dependencies Stage - Production Dependencies Only
# ==============================================================================

{% if PACKAGE_MANAGER in ["npm", "yarn"] %}
FROM {{ BASE_BUILD_IMAGE | default("node:18-alpine") }} AS dependencies

WORKDIR {{ WORKDIR | default("/app") }}

# Copy package files
{% if PACKAGE_FILES %}
{% for file in PACKAGE_FILES %}
COPY {{ file.src }} {{ file.dest }}
{% endfor %}
{% endif %}

# Install production dependencies only
{% if PACKAGE_MANAGER == "npm" %}
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force && \
    rm -rf ~/.npm
{% elif PACKAGE_MANAGER == "yarn" %}
RUN yarn install --frozen-lockfile --production=true && \
    yarn cache clean
{% endif %}
{% endif %}

# ==============================================================================
# Security Scanning Stage (Optional)
# ==============================================================================

{% if ENABLE_SECURITY_SCAN %}
FROM {{ BASE_BUILD_IMAGE | default("node:18-alpine") }} AS security-scan

# Install security scanning tools
RUN apk add --no-cache curl && \
    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# Copy built application for scanning
COPY --from=builder {{ WORKDIR | default("/app") }} {{ WORKDIR | default("/app") }}

WORKDIR {{ WORKDIR | default("/app") }}

# Run security scan (this stage can fail the build if vulnerabilities found)
RUN trivy fs --exit-code {{ TRIVY_EXIT_CODE | default(1) }} \
    --severity {{ TRIVY_SEVERITY | default("HIGH,CRITICAL") }} \
    --no-progress .
{% endif %}

# ==============================================================================
# Production Stage - Minimal Runtime Environment
# ==============================================================================

FROM {{ RUNTIME_IMAGE | default("gcr.io/distroless/nodejs18-debian11") }} AS production

# Labels for metadata and compliance
LABEL maintainer="{{ MAINTAINER | default('infrastructure-management-subagent') }}"
LABEL version="{{ VERSION | default('1.0.0') }}"
LABEL description="{{ DESCRIPTION | default('Production container built with security best practices') }}"
LABEL org.opencontainers.image.title="{{ APP_NAME | default('app') }}"
LABEL org.opencontainers.image.description="{{ DESCRIPTION | default('Production container') }}"
LABEL org.opencontainers.image.version="{{ VERSION | default('1.0.0') }}"
LABEL org.opencontainers.image.created="{{ BUILD_DATE | default('$(date -u +'%Y-%m-%dT%H:%M:%SZ')') }}"
LABEL org.opencontainers.image.source="{{ SOURCE_REPOSITORY | default('') }}"
LABEL org.opencontainers.image.licenses="{{ LICENSE | default('MIT') }}"

# Security labels
LABEL security.scan.enabled="true"
LABEL security.non-root-user="true"
LABEL security.read-only-rootfs="{{ READ_ONLY_ROOTFS | default('true') }}"

# Set working directory
WORKDIR {{ WORKDIR | default("/app") }}

# Create non-root user (for non-distroless images)
{% if not RUNTIME_IMAGE or "distroless" not in RUNTIME_IMAGE %}
RUN groupadd --gid {{ GROUP_ID | default(3000) }} {{ GROUP_NAME | default("appgroup") }} && \
    useradd --uid {{ USER_ID | default(1001) }} --gid {{ GROUP_ID | default(3000) }} \
    --shell /bin/bash --create-home {{ USER_NAME | default("appuser") }}

# Create necessary directories with proper permissions
RUN mkdir -p {{ WORKDIR | default("/app") }}/logs && \
    mkdir -p {{ WORKDIR | default("/app") }}/tmp && \
    chown -R {{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }} {{ WORKDIR | default("/app") }}
{% endif %}

# Copy production dependencies (for Node.js/Python apps)
{% if PACKAGE_MANAGER in ["npm", "yarn"] %}
COPY --from=dependencies --chown={{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }} {{ WORKDIR | default("/app") }}/node_modules ./node_modules
{% elif PACKAGE_MANAGER == "pip" %}
COPY --from=builder --chown={{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }} /root/.local /home/{{ USER_NAME | default("appuser") }}/.local
ENV PATH=/home/{{ USER_NAME | default("appuser") }}/.local/bin:$PATH
{% endif %}

# Copy built application
{% if PACKAGE_MANAGER == "go" %}
COPY --from=builder --chown={{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }} {{ WORKDIR | default("/app") }}/{{ OUTPUT_BINARY | default("app") }} ./{{ OUTPUT_BINARY | default("app") }}
{% else %}
COPY --from=builder --chown={{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }} {{ WORKDIR | default("/app") }}/{{ BUILD_OUTPUT_DIR | default("dist") }} ./{{ BUILD_OUTPUT_DIR | default("dist") }}
{% endif %}

# Copy additional files if specified
{% if ADDITIONAL_FILES %}
{% for file in ADDITIONAL_FILES %}
COPY --from=builder --chown={{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }} {{ file.src }} {{ file.dest }}
{% endfor %}
{% endif %}

# Copy package.json for runtime (Node.js specific)
{% if PACKAGE_MANAGER in ["npm", "yarn"] %}
COPY --from=builder --chown={{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }} {{ WORKDIR | default("/app") }}/package.json ./package.json
{% endif %}

# Set environment variables
ENV NODE_ENV={{ NODE_ENV | default("production") }}
ENV PORT={{ PORT | default(8080) }}
{% if ADDITIONAL_ENV_VARS %}
{% for key, value in ADDITIONAL_ENV_VARS.items() %}
ENV {{ key }}={{ value }}
{% endfor %}
{% endif %}

# Security environment variables
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false

# Expose port
EXPOSE {{ PORT | default(8080) }}

# Health check
{% if HEALTH_CHECK_ENABLED %}
HEALTHCHECK --interval={{ HEALTH_CHECK_INTERVAL | default("30s") }} \
            --timeout={{ HEALTH_CHECK_TIMEOUT | default("3s") }} \
            --start-period={{ HEALTH_CHECK_START_PERIOD | default("5s") }} \
            --retries={{ HEALTH_CHECK_RETRIES | default(3) }} \
            CMD {{ HEALTH_CHECK_CMD | default("curl -f http://localhost:$PORT/health || exit 1") }}
{% endif %}

# Switch to non-root user
{% if not RUNTIME_IMAGE or "distroless" not in RUNTIME_IMAGE %}
USER {{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }}
{% else %}
USER {{ USER_ID | default(1001) }}
{% endif %}

# Start the application
{% if PACKAGE_MANAGER == "go" %}
CMD ["./{{ OUTPUT_BINARY | default('app') }}"]
{% elif START_COMMAND %}
CMD {{ START_COMMAND }}
{% elif PACKAGE_MANAGER in ["npm", "yarn"] %}
CMD ["node", "{{ BUILD_OUTPUT_DIR | default('dist') }}/{{ ENTRY_POINT | default('main.js') }}"]
{% elif PACKAGE_MANAGER == "pip" %}
CMD ["python", "{{ ENTRY_POINT | default('app.py') }}"]
{% else %}
CMD ["{{ ENTRY_POINT | default('./app') }}"]
{% endif %}

# ==============================================================================
# Development Stage - For local development with hot reload
# ==============================================================================

FROM {{ BASE_BUILD_IMAGE | default("node:18-alpine") }} AS development

WORKDIR {{ WORKDIR | default("/app") }}

# Install system dependencies for development
{% if DEV_DEPENDENCIES %}
RUN apk add --no-cache {{ DEV_DEPENDENCIES | join(" ") }}
{% endif %}

# Create non-root user for development
RUN addgroup -g {{ GROUP_ID | default(3000) }} {{ GROUP_NAME | default("appgroup") }} && \
    adduser -u {{ USER_ID | default(1001) }} -G {{ GROUP_NAME | default("appgroup") }} \
    -s /bin/sh -D {{ USER_NAME | default("appuser") }}

# Copy package files and install all dependencies (including dev)
{% if PACKAGE_FILES %}
{% for file in PACKAGE_FILES %}
COPY --chown={{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }} {{ file.src }} {{ file.dest }}
{% endfor %}
{% endif %}

{% if PACKAGE_MANAGER == "npm" %}
RUN npm install --no-audit --no-fund
{% elif PACKAGE_MANAGER == "yarn" %}
RUN yarn install --frozen-lockfile
{% elif PACKAGE_MANAGER == "pip" %}
COPY requirements-dev.txt ./
RUN pip install --no-cache-dir -r requirements-dev.txt
{% endif %}

# Create development directories
RUN mkdir -p logs tmp && \
    chown -R {{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }} {{ WORKDIR | default("/app") }}

# Set development environment
ENV NODE_ENV=development
ENV DEBUG={{ DEBUG_ENABLED | default("true") }}

# Expose debug port (Node.js)
{% if PACKAGE_MANAGER in ["npm", "yarn"] and DEBUG_PORT %}
EXPOSE {{ DEBUG_PORT }}
{% endif %}

USER {{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }}

# Development command with hot reload
{% if DEV_COMMAND %}
CMD {{ DEV_COMMAND }}
{% elif PACKAGE_MANAGER == "npm" %}
CMD ["npm", "run", "dev"]
{% elif PACKAGE_MANAGER == "yarn" %}
CMD ["yarn", "dev"]
{% elif PACKAGE_MANAGER == "pip" %}
CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--debug"]
{% else %}
CMD ["sh"]
{% endif %}

# ==============================================================================
# Testing Stage - For running tests in CI/CD
# ==============================================================================

FROM builder AS testing

WORKDIR {{ WORKDIR | default("/app") }}

# Copy test files
COPY {{ TEST_DIR | default("tests/") }} {{ TEST_DIR | default("tests/") }}

# Run tests
{% if TEST_COMMAND %}
RUN {{ TEST_COMMAND }}
{% elif PACKAGE_MANAGER == "npm" %}
RUN npm test
{% elif PACKAGE_MANAGER == "yarn" %}
RUN yarn test
{% elif PACKAGE_MANAGER == "pip" %}
RUN python -m pytest {{ TEST_DIR | default("tests/") }}
{% endif %}

# ==============================================================================
# Documentation Stage - For generating documentation
# ==============================================================================

{% if ENABLE_DOCS %}
FROM {{ BASE_BUILD_IMAGE | default("node:18-alpine") }} AS docs

WORKDIR {{ WORKDIR | default("/app") }}

# Install documentation tools
{% if DOC_DEPENDENCIES %}
RUN apk add --no-cache {{ DOC_DEPENDENCIES | join(" ") }}
{% endif %}

# Copy source code for documentation generation
COPY --from=builder {{ WORKDIR | default("/app") }} .

# Generate documentation
{% if DOC_COMMAND %}
RUN {{ DOC_COMMAND }}
{% endif %}
{% endif %}