# Docker Compose Template for Local Development and Testing
# Generated by Infrastructure Management Subagent v1.0
# Production-ready configuration with security best practices

version: '3.8'

# ==============================================================================
# Networks
# ==============================================================================
networks:
  {{ NETWORK_NAME | default("app-network") }}:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: {{ SUBNET | default("172.20.0.0/16") }}
    driver_opts:
      com.docker.network.bridge.name: {{ BRIDGE_NAME | default("br-app") }}
  {% if ENABLE_EXTERNAL_NETWORK %}
  external-network:
    external: true
    name: {{ EXTERNAL_NETWORK_NAME }}
  {% endif %}

# ==============================================================================
# Volumes
# ==============================================================================
volumes:
  # Application data
  {% if ENABLE_APP_VOLUME %}
  app-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: {{ APP_DATA_PATH | default("./data") }}
  {% endif %}
  
  # Database data
  {% if ENABLE_DATABASE %}
  {{ DATABASE_TYPE | default("postgres") }}-data:
    driver: local
    {% if DATABASE_VOLUME_OPTIONS %}
    driver_opts:
      {{ DATABASE_VOLUME_OPTIONS | to_yaml | indent(6) }}
    {% endif %}
  {% endif %}
  
  # Cache data
  {% if ENABLE_CACHE %}
  cache-data:
    driver: local
  {% endif %}
  
  # Log volumes
  {% if ENABLE_LOG_VOLUME %}
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: {{ LOG_PATH | default("./logs") }}
  {% endif %}
  
  # SSL certificates
  {% if ENABLE_SSL %}
  ssl-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: {{ SSL_CERT_PATH | default("./certs") }}
  {% endif %}

# ==============================================================================
# Services
# ==============================================================================
services:
  # ==============================================================================
  # Main Application Service
  # ==============================================================================
  {{ APP_NAME | default("app") }}:
    build:
      context: {{ BUILD_CONTEXT | default(".") }}
      dockerfile: {{ DOCKERFILE | default("Dockerfile") }}
      target: {{ BUILD_TARGET | default("production") }}
      args:
        {% if BUILD_ARGS %}
        {% for key, value in BUILD_ARGS.items() %}
        {{ key }}: {{ value }}
        {% endfor %}
        {% endif %}
        NODE_ENV: {{ NODE_ENV | default("production") }}
        PORT: {{ APP_PORT | default(8080) }}
    
    image: {{ IMAGE_NAME | default(APP_NAME + ":latest") }}
    
    container_name: {{ CONTAINER_NAME | default(APP_NAME) }}
    
    restart: {{ RESTART_POLICY | default("unless-stopped") }}
    
    ports:
      - "{{ HOST_PORT | default(8080) }}:{{ APP_PORT | default(8080) }}"
      {% if DEBUG_PORT %}
      - "{{ DEBUG_HOST_PORT | default(9229) }}:{{ DEBUG_PORT }}"
      {% endif %}
      {% if ADDITIONAL_PORTS %}
      {% for port in ADDITIONAL_PORTS %}
      - "{{ port.host }}:{{ port.container }}"
      {% endfor %}
      {% endif %}
    
    environment:
      # Application configuration
      NODE_ENV: {{ NODE_ENV | default("production") }}
      PORT: {{ APP_PORT | default(8080) }}
      {% if DATABASE_URL %}
      DATABASE_URL: {{ DATABASE_URL }}
      {% endif %}
      {% if REDIS_URL %}
      REDIS_URL: {{ REDIS_URL }}
      {% endif %}
      
      # Security settings
      SECURE_HEADERS: "true"
      HELMET_ENABLED: "true"
      CORS_ORIGIN: {{ CORS_ORIGIN | default("*") }}
      
      # Monitoring and observability
      ENABLE_METRICS: {{ ENABLE_METRICS | default("true") }}
      METRICS_PORT: {{ METRICS_PORT | default(9090) }}
      LOG_LEVEL: {{ LOG_LEVEL | default("info") }}
      
      # Additional environment variables
      {% if ENVIRONMENT_VARIABLES %}
      {% for key, value in ENVIRONMENT_VARIABLES.items() %}
      {{ key }}: {{ value }}
      {% endfor %}
      {% endif %}
    
    env_file:
      {% if ENV_FILES %}
      {% for file in ENV_FILES %}
      - {{ file }}
      {% endfor %}
      {% else %}
      - .env
      {% endif %}
    
    volumes:
      # Application volumes
      {% if ENABLE_APP_VOLUME %}
      - app-data:{{ APP_DATA_MOUNT | default("/app/data") }}:{{ APP_DATA_MODE | default("rw") }}
      {% endif %}
      {% if ENABLE_LOG_VOLUME %}
      - app-logs:{{ LOG_MOUNT | default("/app/logs") }}:rw
      {% endif %}
      {% if ENABLE_SSL %}
      - ssl-certs:{{ SSL_MOUNT | default("/app/certs") }}:ro
      {% endif %}
      
      # Configuration volumes
      {% if CONFIG_VOLUMES %}
      {% for volume in CONFIG_VOLUMES %}
      - {{ volume.source }}:{{ volume.target }}:{{ volume.mode | default("ro") }}
      {% endfor %}
      {% endif %}
      
      # Development volumes (bind mounts for hot reload)
      {% if NODE_ENV == "development" %}
      - {{ SOURCE_PATH | default("./src") }}:{{ SOURCE_MOUNT | default("/app/src") }}:ro
      - {{ CONFIG_PATH | default("./config") }}:{{ CONFIG_MOUNT | default("/app/config") }}:ro
      {% endif %}
    
    networks:
      - {{ NETWORK_NAME | default("app-network") }}
      {% if ENABLE_EXTERNAL_NETWORK %}
      - external-network
      {% endif %}
    
    depends_on:
      {% if ENABLE_DATABASE %}
      {{ DATABASE_SERVICE_NAME | default("database") }}:
        condition: service_healthy
      {% endif %}
      {% if ENABLE_CACHE %}
      {{ CACHE_SERVICE_NAME | default("cache") }}:
        condition: service_healthy
      {% endif %}
      {% if ADDITIONAL_DEPENDENCIES %}
      {% for dependency in ADDITIONAL_DEPENDENCIES %}
      {{ dependency.name }}:
        condition: {{ dependency.condition | default("service_started") }}
      {% endfor %}
      {% endif %}
    
    healthcheck:
      test: {{ HEALTH_CHECK_COMMAND | default("curl -f http://localhost:$PORT/health || exit 1") }}
      interval: {{ HEALTH_CHECK_INTERVAL | default("30s") }}
      timeout: {{ HEALTH_CHECK_TIMEOUT | default("10s") }}
      retries: {{ HEALTH_CHECK_RETRIES | default(3) }}
      start_period: {{ HEALTH_CHECK_START_PERIOD | default("40s") }}
    
    security_opt:
      - no-new-privileges:true
    
    user: "{{ USER_ID | default(1001) }}:{{ GROUP_ID | default(3000) }}"
    
    read_only: {{ READ_ONLY_CONTAINER | default(true) }}
    
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=50m
    
    cap_drop:
      - ALL
    {% if REQUIRED_CAPABILITIES %}
    cap_add:
      {% for cap in REQUIRED_CAPABILITIES %}
      - {{ cap }}
      {% endfor %}
    {% endif %}
    
    deploy:
      resources:
        limits:
          cpus: '{{ CPU_LIMIT | default("1.0") }}'
          memory: {{ MEMORY_LIMIT | default("512M") }}
        reservations:
          cpus: '{{ CPU_RESERVATION | default("0.25") }}'
          memory: {{ MEMORY_RESERVATION | default("128M") }}
      restart_policy:
        condition: {{ DEPLOY_RESTART_CONDITION | default("on-failure") }}
        delay: {{ DEPLOY_RESTART_DELAY | default("5s") }}
        max_attempts: {{ DEPLOY_RESTART_MAX_ATTEMPTS | default(3) }}
        window: {{ DEPLOY_RESTART_WINDOW | default("120s") }}
    
    logging:
      driver: {{ LOG_DRIVER | default("json-file") }}
      options:
        max-size: {{ LOG_MAX_SIZE | default("10m") }}
        max-file: {{ LOG_MAX_FILES | default("3") }}
        {% if LOG_DRIVER_OPTIONS %}
        {% for key, value in LOG_DRIVER_OPTIONS.items() %}
        {{ key }}: {{ value }}
        {% endfor %}
        {% endif %}
    
    labels:
      - "traefik.enable={{ ENABLE_TRAEFIK | default('false') }}"
      {% if ENABLE_TRAEFIK %}
      - "traefik.http.routers.{{ APP_NAME }}.rule=Host(`{{ TRAEFIK_HOST | default('localhost') }}`)"
      - "traefik.http.routers.{{ APP_NAME }}.entrypoints={{ TRAEFIK_ENTRYPOINT | default('web') }}"
      - "traefik.http.services.{{ APP_NAME }}.loadbalancer.server.port={{ APP_PORT | default(8080) }}"
      {% endif %}
      - "com.example.description={{ DESCRIPTION | default('Application service') }}"
      - "com.example.version={{ VERSION | default('1.0.0') }}"

  # ==============================================================================
  # Database Service
  # ==============================================================================
  {% if ENABLE_DATABASE %}
  {{ DATABASE_SERVICE_NAME | default("database") }}:
    {% if DATABASE_TYPE == "postgres" %}
    image: postgres:{{ POSTGRES_VERSION | default("15-alpine") }}
    {% elif DATABASE_TYPE == "mysql" %}
    image: mysql:{{ MYSQL_VERSION | default("8.0") }}
    {% elif DATABASE_TYPE == "mongodb" %}
    image: mongo:{{ MONGO_VERSION | default("6.0") }}
    {% endif %}
    
    container_name: {{ DATABASE_CONTAINER_NAME | default(APP_NAME + "-db") }}
    
    restart: {{ RESTART_POLICY | default("unless-stopped") }}
    
    ports:
      {% if DATABASE_TYPE == "postgres" %}
      - "{{ DB_HOST_PORT | default(5432) }}:5432"
      {% elif DATABASE_TYPE == "mysql" %}
      - "{{ DB_HOST_PORT | default(3306) }}:3306"
      {% elif DATABASE_TYPE == "mongodb" %}
      - "{{ DB_HOST_PORT | default(27017) }}:27017"
      {% endif %}
    
    environment:
      {% if DATABASE_TYPE == "postgres" %}
      POSTGRES_DB: {{ DATABASE_NAME | default(APP_NAME) }}
      POSTGRES_USER: {{ DATABASE_USER | default("appuser") }}
      POSTGRES_PASSWORD: {{ DATABASE_PASSWORD | default("password") }}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      {% elif DATABASE_TYPE == "mysql" %}
      MYSQL_DATABASE: {{ DATABASE_NAME | default(APP_NAME) }}
      MYSQL_USER: {{ DATABASE_USER | default("appuser") }}
      MYSQL_PASSWORD: {{ DATABASE_PASSWORD | default("password") }}
      MYSQL_ROOT_PASSWORD: {{ DATABASE_ROOT_PASSWORD | default("rootpassword") }}
      {% elif DATABASE_TYPE == "mongodb" %}
      MONGO_INITDB_DATABASE: {{ DATABASE_NAME | default(APP_NAME) }}
      MONGO_INITDB_ROOT_USERNAME: {{ DATABASE_USER | default("admin") }}
      MONGO_INITDB_ROOT_PASSWORD: {{ DATABASE_PASSWORD | default("password") }}
      {% endif %}
    
    volumes:
      - {{ DATABASE_TYPE }}-data:{{ DATABASE_DATA_PATH | default("/var/lib/postgresql/data" if DATABASE_TYPE == "postgres" else "/var/lib/mysql" if DATABASE_TYPE == "mysql" else "/data/db") }}
      {% if DATABASE_INIT_SCRIPTS %}
      {% for script in DATABASE_INIT_SCRIPTS %}
      - {{ script.source }}:{{ script.target }}:ro
      {% endfor %}
      {% endif %}
    
    networks:
      - {{ NETWORK_NAME | default("app-network") }}
    
    healthcheck:
      {% if DATABASE_TYPE == "postgres" %}
      test: ["CMD-SHELL", "pg_isready -U {{ DATABASE_USER | default('appuser') }} -d {{ DATABASE_NAME | default(APP_NAME) }}"]
      {% elif DATABASE_TYPE == "mysql" %}
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "{{ DATABASE_USER | default('appuser') }}", "-p{{ DATABASE_PASSWORD | default('password') }}"]
      {% elif DATABASE_TYPE == "mongodb" %}
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      {% endif %}
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    security_opt:
      - no-new-privileges:true
    
    cap_drop:
      - ALL
    {% if DATABASE_TYPE == "postgres" %}
    cap_add:
      - SETUID
      - SETGID
    {% endif %}
    
    deploy:
      resources:
        limits:
          cpus: '{{ DB_CPU_LIMIT | default("1.0") }}'
          memory: {{ DB_MEMORY_LIMIT | default("512M") }}
        reservations:
          cpus: '{{ DB_CPU_RESERVATION | default("0.25") }}'
          memory: {{ DB_MEMORY_RESERVATION | default("256M") }}
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
  {% endif %}

  # ==============================================================================
  # Cache Service (Redis)
  # ==============================================================================
  {% if ENABLE_CACHE %}
  {{ CACHE_SERVICE_NAME | default("cache") }}:
    image: redis:{{ REDIS_VERSION | default("7-alpine") }}
    
    container_name: {{ CACHE_CONTAINER_NAME | default(APP_NAME + "-cache") }}
    
    restart: {{ RESTART_POLICY | default("unless-stopped") }}
    
    ports:
      - "{{ CACHE_HOST_PORT | default(6379) }}:6379"
    
    command: redis-server --appendonly yes --requirepass {{ REDIS_PASSWORD | default("password") }}
    
    volumes:
      - cache-data:/data
      {% if REDIS_CONFIG %}
      - {{ REDIS_CONFIG }}:/usr/local/etc/redis/redis.conf:ro
      {% endif %}
    
    networks:
      - {{ NETWORK_NAME | default("app-network") }}
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    security_opt:
      - no-new-privileges:true
    
    cap_drop:
      - ALL
    
    deploy:
      resources:
        limits:
          cpus: '{{ CACHE_CPU_LIMIT | default("0.5") }}'
          memory: {{ CACHE_MEMORY_LIMIT | default("256M") }}
        reservations:
          cpus: '{{ CACHE_CPU_RESERVATION | default("0.1") }}'
          memory: {{ CACHE_MEMORY_RESERVATION | default("128M") }}
  {% endif %}

  # ==============================================================================
  # Reverse Proxy Service (Traefik)
  # ==============================================================================
  {% if ENABLE_REVERSE_PROXY %}
  {{ PROXY_SERVICE_NAME | default("traefik") }}:
    image: traefik:{{ TRAEFIK_VERSION | default("v3.0") }}
    
    container_name: {{ PROXY_CONTAINER_NAME | default(APP_NAME + "-proxy") }}
    
    restart: {{ RESTART_POLICY | default("unless-stopped") }}
    
    ports:
      - "{{ HTTP_PORT | default(80) }}:80"
      - "{{ HTTPS_PORT | default(443) }}:443"
      - "{{ TRAEFIK_DASHBOARD_PORT | default(8080) }}:8080"
    
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      {% if ENABLE_SSL %}
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email={{ SSL_EMAIL }}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      {% endif %}
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      {% if ENABLE_SSL %}
      - ssl-certs:/letsencrypt
      {% endif %}
    
    networks:
      - {{ NETWORK_NAME | default("app-network") }}
    
    security_opt:
      - no-new-privileges:true
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`{{ TRAEFIK_DASHBOARD_HOST | default('traefik.localhost') }}`)"
      - "traefik.http.routers.traefik.entrypoints=web"
  {% endif %}

  # ==============================================================================
  # Monitoring Services
  # ==============================================================================
  {% if ENABLE_MONITORING %}
  # Prometheus
  prometheus:
    image: prom/prometheus:{{ PROMETHEUS_VERSION | default("latest") }}
    
    container_name: {{ APP_NAME }}-prometheus
    
    restart: {{ RESTART_POLICY | default("unless-stopped") }}
    
    ports:
      - "{{ PROMETHEUS_PORT | default(9090) }}:9090"
    
    volumes:
      - {{ PROMETHEUS_CONFIG | default("./monitoring/prometheus.yml") }}:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - {{ NETWORK_NAME | default("app-network") }}
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time={{ PROMETHEUS_RETENTION | default("15d") }}'
      - '--web.enable-lifecycle'
  
  # Grafana
  grafana:
    image: grafana/grafana:{{ GRAFANA_VERSION | default("latest") }}
    
    container_name: {{ APP_NAME }}-grafana
    
    restart: {{ RESTART_POLICY | default("unless-stopped") }}
    
    ports:
      - "{{ GRAFANA_PORT | default(3000) }}:3000"
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: {{ GRAFANA_PASSWORD | default("admin") }}
    
    volumes:
      - grafana-data:/var/lib/grafana
      - {{ GRAFANA_CONFIG | default("./monitoring/grafana/") }}:/etc/grafana/provisioning/:ro
    
    networks:
      - {{ NETWORK_NAME | default("app-network") }}
  {% endif %}

# ==============================================================================
# Additional Volumes for Monitoring
# ==============================================================================
{% if ENABLE_MONITORING %}
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
{% endif %}