# 3-Tier Web Application Infrastructure Template
# Generated by Infrastructure Management Subagent v1.0
# Production-ready with auto-scaling, load balancing, and security

name: three-tier-web-application
description: Complete 3-tier web application with load balancer, web servers, and database
version: 1.0.0

# Architecture Components
components:
  presentation_tier:
    - application_load_balancer
    - cloudfront_distribution
    - route53_dns
    - ssl_certificate
  
  application_tier:
    - ecs_cluster
    - auto_scaling_group
    - container_services
    - api_gateway
  
  data_tier:
    - rds_database
    - elasticache_redis
    - s3_storage
    - database_backup

# Resource Configuration
resources:
  # Load Balancer & CDN (Presentation Tier)
  application_load_balancer:
    type: aws_lb
    properties:
      name: "{{ APP_NAME }}-alb"
      load_balancer_type: application
      scheme: internet-facing
      subnets: "{{ public_subnets }}"
      security_groups: ["{{ alb_security_group }}"]
      enable_deletion_protection: "{{ ENABLE_DELETION_PROTECTION | default(false) }}"
      
  cloudfront_distribution:
    type: aws_cloudfront_distribution
    properties:
      aliases: ["{{ DOMAIN_NAME }}"]
      origin:
        domain_name: "{{ application_load_balancer.dns_name }}"
        custom_origin_config:
          http_port: 80
          https_port: 443
          origin_protocol_policy: https-only
      default_cache_behavior:
        target_origin_id: alb-origin
        viewer_protocol_policy: redirect-to-https
        compress: true
        
  # ECS Cluster (Application Tier)
  ecs_cluster:
    type: aws_ecs_cluster
    properties:
      name: "{{ APP_NAME }}-cluster"
      capacity_providers: ["FARGATE", "FARGATE_SPOT"]
      default_capacity_provider_strategy:
        - capacity_provider: FARGATE
          weight: 1
          base: 1
  
  web_service:
    type: aws_ecs_service
    properties:
      name: "{{ APP_NAME }}-web"
      cluster: "{{ ecs_cluster.id }}"
      task_definition: "{{ web_task_definition.arn }}"
      desired_count: "{{ WEB_DESIRED_COUNT | default(3) }}"
      launch_type: FARGATE
      load_balancer:
        target_group_arn: "{{ web_target_group.arn }}"
        container_name: web
        container_port: 80
        
  api_service:
    type: aws_ecs_service
    properties:
      name: "{{ APP_NAME }}-api"
      cluster: "{{ ecs_cluster.id }}"
      task_definition: "{{ api_task_definition.arn }}"
      desired_count: "{{ API_DESIRED_COUNT | default(2) }}"
      launch_type: FARGATE
      
  # Database (Data Tier)
  rds_database:
    type: aws_db_instance
    properties:
      identifier: "{{ APP_NAME }}-db"
      engine: "{{ DB_ENGINE | default('postgres') }}"
      engine_version: "{{ DB_ENGINE_VERSION | default('15.3') }}"
      instance_class: "{{ DB_INSTANCE_CLASS | default('db.t3.micro') }}"
      allocated_storage: "{{ DB_STORAGE | default(20) }}"
      storage_encrypted: true
      multi_az: "{{ ENABLE_MULTI_AZ | default(true) }}"
      backup_retention_period: "{{ BACKUP_RETENTION | default(7) }}"
      
  elasticache_redis:
    type: aws_elasticache_subnet_group
    properties:
      name: "{{ APP_NAME }}-cache-subnet"
      subnet_ids: "{{ private_subnets }}"

# Networking Configuration
networking:
  vpc:
    cidr: "{{ VPC_CIDR | default('10.0.0.0/16') }}"
    enable_dns_hostnames: true
    enable_dns_support: true
    
  subnets:
    public:
      - cidr: "{{ PUBLIC_SUBNET_1_CIDR | default('10.0.101.0/24') }}"
        availability_zone: "{{ AZ_1 }}"
      - cidr: "{{ PUBLIC_SUBNET_2_CIDR | default('10.0.102.0/24') }}"
        availability_zone: "{{ AZ_2 }}"
        
    private:
      - cidr: "{{ PRIVATE_SUBNET_1_CIDR | default('10.0.1.0/24') }}"
        availability_zone: "{{ AZ_1 }}"
      - cidr: "{{ PRIVATE_SUBNET_2_CIDR | default('10.0.2.0/24') }}"
        availability_zone: "{{ AZ_2 }}"
        
    database:
      - cidr: "{{ DB_SUBNET_1_CIDR | default('10.0.201.0/24') }}"
        availability_zone: "{{ AZ_1 }}"
      - cidr: "{{ DB_SUBNET_2_CIDR | default('10.0.202.0/24') }}"
        availability_zone: "{{ AZ_2 }}"

# Security Configuration
security:
  security_groups:
    alb_security_group:
      name: "{{ APP_NAME }}-alb-sg"
      ingress:
        - from_port: 80
          to_port: 80
          protocol: tcp
          cidr_blocks: ["0.0.0.0/0"]
        - from_port: 443
          to_port: 443
          protocol: tcp
          cidr_blocks: ["0.0.0.0/0"]
          
    web_security_group:
      name: "{{ APP_NAME }}-web-sg"
      ingress:
        - from_port: 80
          to_port: 80
          protocol: tcp
          source_security_group_id: "{{ alb_security_group }}"
          
    database_security_group:
      name: "{{ APP_NAME }}-db-sg"
      ingress:
        - from_port: 5432
          to_port: 5432
          protocol: tcp
          source_security_group_id: "{{ web_security_group }}"

# Monitoring & Observability
monitoring:
  cloudwatch_log_groups:
    - name: "/ecs/{{ APP_NAME }}-web"
      retention_in_days: "{{ LOG_RETENTION | default(14) }}"
    - name: "/ecs/{{ APP_NAME }}-api"
      retention_in_days: "{{ LOG_RETENTION | default(14) }}"
      
  cloudwatch_alarms:
    - name: "{{ APP_NAME }}-high-cpu"
      metric_name: CPUUtilization
      namespace: AWS/ECS
      statistic: Average
      period: 300
      evaluation_periods: 2
      threshold: 80
      
  application_insights:
    enabled: true
    auto_create: true

# Auto Scaling Configuration
auto_scaling:
  web_scaling:
    min_capacity: "{{ MIN_WEB_CAPACITY | default(2) }}"
    max_capacity: "{{ MAX_WEB_CAPACITY | default(10) }}"
    target_cpu: "{{ TARGET_CPU | default(70) }}"
    scale_up_cooldown: 300
    scale_down_cooldown: 300

# Backup & Disaster Recovery
backup:
  rds_automated_backups:
    backup_retention_period: "{{ BACKUP_RETENTION | default(7) }}"
    backup_window: "03:00-04:00"
    maintenance_window: "sun:04:00-sun:05:00"
    
  point_in_time_recovery:
    enabled: true
    
# Cost Optimization
cost_optimization:
  use_spot_instances: "{{ USE_SPOT_INSTANCES | default(false) }}"
  scheduled_scaling:
    enabled: "{{ ENABLE_SCHEDULED_SCALING | default(false) }}"
    business_hours:
      min_capacity: "{{ MIN_WEB_CAPACITY | default(2) }}"
      max_capacity: "{{ MAX_WEB_CAPACITY | default(10) }}"
    off_hours:
      min_capacity: 1
      max_capacity: 3

# Environment-specific Configurations
environments:
  development:
    db_instance_class: db.t3.micro
    min_web_capacity: 1
    max_web_capacity: 2
    enable_multi_az: false
    backup_retention: 1
    
  staging:
    db_instance_class: db.t3.small
    min_web_capacity: 2
    max_web_capacity: 5
    enable_multi_az: true
    backup_retention: 3
    
  production:
    db_instance_class: db.r5.large
    min_web_capacity: 3
    max_web_capacity: 20
    enable_multi_az: true
    backup_retention: 30
    enable_deletion_protection: true

# Required Variables
required_variables:
  - APP_NAME
  - ENVIRONMENT
  - DOMAIN_NAME
  - VPC_ID
  - DB_PASSWORD

# Optional Variables with Defaults
optional_variables:
  VPC_CIDR: "10.0.0.0/16"
  DB_ENGINE: "postgres"
  DB_INSTANCE_CLASS: "db.t3.micro"
  WEB_DESIRED_COUNT: 3
  API_DESIRED_COUNT: 2
  BACKUP_RETENTION: 7